
ParcelLocker_NUCLEO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003858  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  08003910  08003910  00013910  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080039d8  080039d8  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  080039d8  080039d8  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  080039d8  080039d8  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080039d8  080039d8  000139d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080039dc  080039dc  000139dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  080039e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000428  20000018  080039f8  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000440  080039f8  00020440  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cd28  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020c8  00000000  00000000  0002cd68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000908  00000000  00000000  0002ee30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000840  00000000  00000000  0002f738  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000155ed  00000000  00000000  0002ff78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b68d  00000000  00000000  00045565  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008208b  00000000  00000000  00050bf2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d2c7d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001e88  00000000  00000000  000d2cd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000018 	.word	0x20000018
 80000d8:	00000000 	.word	0x00000000
 80000dc:	080038f8 	.word	0x080038f8

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	2000001c 	.word	0x2000001c
 80000fc:	080038f8 	.word	0x080038f8

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f8f0 	bl	80003e8 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__divsi3>:
 8000214:	4603      	mov	r3, r0
 8000216:	430b      	orrs	r3, r1
 8000218:	d47f      	bmi.n	800031a <__divsi3+0x106>
 800021a:	2200      	movs	r2, #0
 800021c:	0843      	lsrs	r3, r0, #1
 800021e:	428b      	cmp	r3, r1
 8000220:	d374      	bcc.n	800030c <__divsi3+0xf8>
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d35f      	bcc.n	80002e8 <__divsi3+0xd4>
 8000228:	0a03      	lsrs	r3, r0, #8
 800022a:	428b      	cmp	r3, r1
 800022c:	d344      	bcc.n	80002b8 <__divsi3+0xa4>
 800022e:	0b03      	lsrs	r3, r0, #12
 8000230:	428b      	cmp	r3, r1
 8000232:	d328      	bcc.n	8000286 <__divsi3+0x72>
 8000234:	0c03      	lsrs	r3, r0, #16
 8000236:	428b      	cmp	r3, r1
 8000238:	d30d      	bcc.n	8000256 <__divsi3+0x42>
 800023a:	22ff      	movs	r2, #255	; 0xff
 800023c:	0209      	lsls	r1, r1, #8
 800023e:	ba12      	rev	r2, r2
 8000240:	0c03      	lsrs	r3, r0, #16
 8000242:	428b      	cmp	r3, r1
 8000244:	d302      	bcc.n	800024c <__divsi3+0x38>
 8000246:	1212      	asrs	r2, r2, #8
 8000248:	0209      	lsls	r1, r1, #8
 800024a:	d065      	beq.n	8000318 <__divsi3+0x104>
 800024c:	0b03      	lsrs	r3, r0, #12
 800024e:	428b      	cmp	r3, r1
 8000250:	d319      	bcc.n	8000286 <__divsi3+0x72>
 8000252:	e000      	b.n	8000256 <__divsi3+0x42>
 8000254:	0a09      	lsrs	r1, r1, #8
 8000256:	0bc3      	lsrs	r3, r0, #15
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__divsi3+0x4c>
 800025c:	03cb      	lsls	r3, r1, #15
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0b83      	lsrs	r3, r0, #14
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__divsi3+0x58>
 8000268:	038b      	lsls	r3, r1, #14
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0b43      	lsrs	r3, r0, #13
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x64>
 8000274:	034b      	lsls	r3, r1, #13
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x70>
 8000280:	030b      	lsls	r3, r1, #12
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0ac3      	lsrs	r3, r0, #11
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x7c>
 800028c:	02cb      	lsls	r3, r1, #11
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0a83      	lsrs	r3, r0, #10
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x88>
 8000298:	028b      	lsls	r3, r1, #10
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0a43      	lsrs	r3, r0, #9
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x94>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a03      	lsrs	r3, r0, #8
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0xa0>
 80002b0:	020b      	lsls	r3, r1, #8
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	d2cd      	bcs.n	8000254 <__divsi3+0x40>
 80002b8:	09c3      	lsrs	r3, r0, #7
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__divsi3+0xae>
 80002be:	01cb      	lsls	r3, r1, #7
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0983      	lsrs	r3, r0, #6
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__divsi3+0xba>
 80002ca:	018b      	lsls	r3, r1, #6
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	0943      	lsrs	r3, r0, #5
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xc6>
 80002d6:	014b      	lsls	r3, r1, #5
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0903      	lsrs	r3, r0, #4
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xd2>
 80002e2:	010b      	lsls	r3, r1, #4
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	08c3      	lsrs	r3, r0, #3
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xde>
 80002ee:	00cb      	lsls	r3, r1, #3
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0883      	lsrs	r3, r0, #2
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xea>
 80002fa:	008b      	lsls	r3, r1, #2
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0843      	lsrs	r3, r0, #1
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xf6>
 8000306:	004b      	lsls	r3, r1, #1
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	1a41      	subs	r1, r0, r1
 800030e:	d200      	bcs.n	8000312 <__divsi3+0xfe>
 8000310:	4601      	mov	r1, r0
 8000312:	4152      	adcs	r2, r2
 8000314:	4610      	mov	r0, r2
 8000316:	4770      	bx	lr
 8000318:	e05d      	b.n	80003d6 <__divsi3+0x1c2>
 800031a:	0fca      	lsrs	r2, r1, #31
 800031c:	d000      	beq.n	8000320 <__divsi3+0x10c>
 800031e:	4249      	negs	r1, r1
 8000320:	1003      	asrs	r3, r0, #32
 8000322:	d300      	bcc.n	8000326 <__divsi3+0x112>
 8000324:	4240      	negs	r0, r0
 8000326:	4053      	eors	r3, r2
 8000328:	2200      	movs	r2, #0
 800032a:	469c      	mov	ip, r3
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d32d      	bcc.n	800038e <__divsi3+0x17a>
 8000332:	0a03      	lsrs	r3, r0, #8
 8000334:	428b      	cmp	r3, r1
 8000336:	d312      	bcc.n	800035e <__divsi3+0x14a>
 8000338:	22fc      	movs	r2, #252	; 0xfc
 800033a:	0189      	lsls	r1, r1, #6
 800033c:	ba12      	rev	r2, r2
 800033e:	0a03      	lsrs	r3, r0, #8
 8000340:	428b      	cmp	r3, r1
 8000342:	d30c      	bcc.n	800035e <__divsi3+0x14a>
 8000344:	0189      	lsls	r1, r1, #6
 8000346:	1192      	asrs	r2, r2, #6
 8000348:	428b      	cmp	r3, r1
 800034a:	d308      	bcc.n	800035e <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d304      	bcc.n	800035e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	d03a      	beq.n	80003ce <__divsi3+0x1ba>
 8000358:	1192      	asrs	r2, r2, #6
 800035a:	e000      	b.n	800035e <__divsi3+0x14a>
 800035c:	0989      	lsrs	r1, r1, #6
 800035e:	09c3      	lsrs	r3, r0, #7
 8000360:	428b      	cmp	r3, r1
 8000362:	d301      	bcc.n	8000368 <__divsi3+0x154>
 8000364:	01cb      	lsls	r3, r1, #7
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	4152      	adcs	r2, r2
 800036a:	0983      	lsrs	r3, r0, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d301      	bcc.n	8000374 <__divsi3+0x160>
 8000370:	018b      	lsls	r3, r1, #6
 8000372:	1ac0      	subs	r0, r0, r3
 8000374:	4152      	adcs	r2, r2
 8000376:	0943      	lsrs	r3, r0, #5
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x16c>
 800037c:	014b      	lsls	r3, r1, #5
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0903      	lsrs	r3, r0, #4
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x178>
 8000388:	010b      	lsls	r3, r1, #4
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x184>
 8000394:	00cb      	lsls	r3, r1, #3
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0883      	lsrs	r3, r0, #2
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x190>
 80003a0:	008b      	lsls	r3, r1, #2
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	d2d9      	bcs.n	800035c <__divsi3+0x148>
 80003a8:	0843      	lsrs	r3, r0, #1
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d301      	bcc.n	80003b2 <__divsi3+0x19e>
 80003ae:	004b      	lsls	r3, r1, #1
 80003b0:	1ac0      	subs	r0, r0, r3
 80003b2:	4152      	adcs	r2, r2
 80003b4:	1a41      	subs	r1, r0, r1
 80003b6:	d200      	bcs.n	80003ba <__divsi3+0x1a6>
 80003b8:	4601      	mov	r1, r0
 80003ba:	4663      	mov	r3, ip
 80003bc:	4152      	adcs	r2, r2
 80003be:	105b      	asrs	r3, r3, #1
 80003c0:	4610      	mov	r0, r2
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x1b4>
 80003c4:	4240      	negs	r0, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d500      	bpl.n	80003cc <__divsi3+0x1b8>
 80003ca:	4249      	negs	r1, r1
 80003cc:	4770      	bx	lr
 80003ce:	4663      	mov	r3, ip
 80003d0:	105b      	asrs	r3, r3, #1
 80003d2:	d300      	bcc.n	80003d6 <__divsi3+0x1c2>
 80003d4:	4240      	negs	r0, r0
 80003d6:	b501      	push	{r0, lr}
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 f805 	bl	80003e8 <__aeabi_idiv0>
 80003de:	bd02      	pop	{r1, pc}

080003e0 <__aeabi_idivmod>:
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d0f8      	beq.n	80003d6 <__divsi3+0x1c2>
 80003e4:	e716      	b.n	8000214 <__divsi3>
 80003e6:	4770      	bx	lr

080003e8 <__aeabi_idiv0>:
 80003e8:	4770      	bx	lr
 80003ea:	46c0      	nop			; (mov r8, r8)

080003ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003f0:	f000 fcba 	bl	8000d68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003f4:	f000 f81c 	bl	8000430 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003f8:	f000 f8fc 	bl	80005f4 <MX_GPIO_Init>
  MX_DMA_Init();
 80003fc:	f000 f8dc 	bl	80005b8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000400:	f000 f888 	bl	8000514 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  __HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 8000404:	4b09      	ldr	r3, [pc, #36]	; (800042c <main+0x40>)
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	681a      	ldr	r2, [r3, #0]
 800040a:	4b08      	ldr	r3, [pc, #32]	; (800042c <main+0x40>)
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	2120      	movs	r1, #32
 8000410:	430a      	orrs	r2, r1
 8000412:	601a      	str	r2, [r3, #0]
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8000414:	b662      	cpsie	i
}
 8000416:	46c0      	nop			; (mov r8, r8)
//		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
//		HAL_Delay(100);
//	}

	/* Suspend Sys Tick and go to sleep mode. */
	HAL_SuspendTick();
 8000418:	f000 fd2c 	bl	8000e74 <HAL_SuspendTick>
	HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 800041c:	2101      	movs	r1, #1
 800041e:	2000      	movs	r0, #0
 8000420:	f001 fad8 	bl	80019d4 <HAL_PWR_EnterSLEEPMode>
	HAL_ResumeTick();
 8000424:	f000 fd34 	bl	8000e90 <HAL_ResumeTick>
	HAL_SuspendTick();
 8000428:	e7f6      	b.n	8000418 <main+0x2c>
 800042a:	46c0      	nop			; (mov r8, r8)
 800042c:	200003ac 	.word	0x200003ac

08000430 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000430:	b590      	push	{r4, r7, lr}
 8000432:	b099      	sub	sp, #100	; 0x64
 8000434:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000436:	242c      	movs	r4, #44	; 0x2c
 8000438:	193b      	adds	r3, r7, r4
 800043a:	0018      	movs	r0, r3
 800043c:	2334      	movs	r3, #52	; 0x34
 800043e:	001a      	movs	r2, r3
 8000440:	2100      	movs	r1, #0
 8000442:	f003 fa51 	bl	80038e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000446:	231c      	movs	r3, #28
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	0018      	movs	r0, r3
 800044c:	2310      	movs	r3, #16
 800044e:	001a      	movs	r2, r3
 8000450:	2100      	movs	r1, #0
 8000452:	f003 fa49 	bl	80038e8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000456:	003b      	movs	r3, r7
 8000458:	0018      	movs	r0, r3
 800045a:	231c      	movs	r3, #28
 800045c:	001a      	movs	r2, r3
 800045e:	2100      	movs	r1, #0
 8000460:	f003 fa42 	bl	80038e8 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000464:	2380      	movs	r3, #128	; 0x80
 8000466:	009b      	lsls	r3, r3, #2
 8000468:	0018      	movs	r0, r3
 800046a:	f001 fae9 	bl	8001a40 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800046e:	193b      	adds	r3, r7, r4
 8000470:	2202      	movs	r2, #2
 8000472:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000474:	193b      	adds	r3, r7, r4
 8000476:	2280      	movs	r2, #128	; 0x80
 8000478:	0052      	lsls	r2, r2, #1
 800047a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800047c:	0021      	movs	r1, r4
 800047e:	187b      	adds	r3, r7, r1
 8000480:	2200      	movs	r2, #0
 8000482:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000484:	187b      	adds	r3, r7, r1
 8000486:	2240      	movs	r2, #64	; 0x40
 8000488:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800048a:	187b      	adds	r3, r7, r1
 800048c:	2202      	movs	r2, #2
 800048e:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000490:	187b      	adds	r3, r7, r1
 8000492:	2202      	movs	r2, #2
 8000494:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000496:	187b      	adds	r3, r7, r1
 8000498:	2200      	movs	r2, #0
 800049a:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 800049c:	187b      	adds	r3, r7, r1
 800049e:	2208      	movs	r2, #8
 80004a0:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80004a2:	187b      	adds	r3, r7, r1
 80004a4:	2280      	movs	r2, #128	; 0x80
 80004a6:	0292      	lsls	r2, r2, #10
 80004a8:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80004aa:	187b      	adds	r3, r7, r1
 80004ac:	2280      	movs	r2, #128	; 0x80
 80004ae:	0592      	lsls	r2, r2, #22
 80004b0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004b2:	187b      	adds	r3, r7, r1
 80004b4:	0018      	movs	r0, r3
 80004b6:	f001 fb53 	bl	8001b60 <HAL_RCC_OscConfig>
 80004ba:	1e03      	subs	r3, r0, #0
 80004bc:	d001      	beq.n	80004c2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80004be:	f000 f8cf 	bl	8000660 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004c2:	211c      	movs	r1, #28
 80004c4:	187b      	adds	r3, r7, r1
 80004c6:	2207      	movs	r2, #7
 80004c8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004ca:	187b      	adds	r3, r7, r1
 80004cc:	2202      	movs	r2, #2
 80004ce:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004d0:	187b      	adds	r3, r7, r1
 80004d2:	2200      	movs	r2, #0
 80004d4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004d6:	187b      	adds	r3, r7, r1
 80004d8:	2200      	movs	r2, #0
 80004da:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004dc:	187b      	adds	r3, r7, r1
 80004de:	2102      	movs	r1, #2
 80004e0:	0018      	movs	r0, r3
 80004e2:	f001 fe53 	bl	800218c <HAL_RCC_ClockConfig>
 80004e6:	1e03      	subs	r3, r0, #0
 80004e8:	d001      	beq.n	80004ee <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80004ea:	f000 f8b9 	bl	8000660 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80004ee:	003b      	movs	r3, r7
 80004f0:	2202      	movs	r2, #2
 80004f2:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80004f4:	003b      	movs	r3, r7
 80004f6:	2200      	movs	r2, #0
 80004f8:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004fa:	003b      	movs	r3, r7
 80004fc:	0018      	movs	r0, r3
 80004fe:	f001 ffef 	bl	80024e0 <HAL_RCCEx_PeriphCLKConfig>
 8000502:	1e03      	subs	r3, r0, #0
 8000504:	d001      	beq.n	800050a <SystemClock_Config+0xda>
  {
    Error_Handler();
 8000506:	f000 f8ab 	bl	8000660 <Error_Handler>
  }
}
 800050a:	46c0      	nop			; (mov r8, r8)
 800050c:	46bd      	mov	sp, r7
 800050e:	b019      	add	sp, #100	; 0x64
 8000510:	bd90      	pop	{r4, r7, pc}
	...

08000514 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000518:	4b24      	ldr	r3, [pc, #144]	; (80005ac <MX_USART2_UART_Init+0x98>)
 800051a:	4a25      	ldr	r2, [pc, #148]	; (80005b0 <MX_USART2_UART_Init+0x9c>)
 800051c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800051e:	4b23      	ldr	r3, [pc, #140]	; (80005ac <MX_USART2_UART_Init+0x98>)
 8000520:	2296      	movs	r2, #150	; 0x96
 8000522:	0192      	lsls	r2, r2, #6
 8000524:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000526:	4b21      	ldr	r3, [pc, #132]	; (80005ac <MX_USART2_UART_Init+0x98>)
 8000528:	2200      	movs	r2, #0
 800052a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800052c:	4b1f      	ldr	r3, [pc, #124]	; (80005ac <MX_USART2_UART_Init+0x98>)
 800052e:	2200      	movs	r2, #0
 8000530:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000532:	4b1e      	ldr	r3, [pc, #120]	; (80005ac <MX_USART2_UART_Init+0x98>)
 8000534:	2200      	movs	r2, #0
 8000536:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000538:	4b1c      	ldr	r3, [pc, #112]	; (80005ac <MX_USART2_UART_Init+0x98>)
 800053a:	220c      	movs	r2, #12
 800053c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800053e:	4b1b      	ldr	r3, [pc, #108]	; (80005ac <MX_USART2_UART_Init+0x98>)
 8000540:	2200      	movs	r2, #0
 8000542:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000544:	4b19      	ldr	r3, [pc, #100]	; (80005ac <MX_USART2_UART_Init+0x98>)
 8000546:	2200      	movs	r2, #0
 8000548:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800054a:	4b18      	ldr	r3, [pc, #96]	; (80005ac <MX_USART2_UART_Init+0x98>)
 800054c:	2200      	movs	r2, #0
 800054e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000550:	4b16      	ldr	r3, [pc, #88]	; (80005ac <MX_USART2_UART_Init+0x98>)
 8000552:	2200      	movs	r2, #0
 8000554:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000556:	4b15      	ldr	r3, [pc, #84]	; (80005ac <MX_USART2_UART_Init+0x98>)
 8000558:	2200      	movs	r2, #0
 800055a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800055c:	4b13      	ldr	r3, [pc, #76]	; (80005ac <MX_USART2_UART_Init+0x98>)
 800055e:	0018      	movs	r0, r3
 8000560:	f002 f8f2 	bl	8002748 <HAL_UART_Init>
 8000564:	1e03      	subs	r3, r0, #0
 8000566:	d001      	beq.n	800056c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000568:	f000 f87a 	bl	8000660 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800056c:	4b0f      	ldr	r3, [pc, #60]	; (80005ac <MX_USART2_UART_Init+0x98>)
 800056e:	2100      	movs	r1, #0
 8000570:	0018      	movs	r0, r3
 8000572:	f003 f8a9 	bl	80036c8 <HAL_UARTEx_SetTxFifoThreshold>
 8000576:	1e03      	subs	r3, r0, #0
 8000578:	d001      	beq.n	800057e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800057a:	f000 f871 	bl	8000660 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800057e:	4b0b      	ldr	r3, [pc, #44]	; (80005ac <MX_USART2_UART_Init+0x98>)
 8000580:	2100      	movs	r1, #0
 8000582:	0018      	movs	r0, r3
 8000584:	f003 f8e0 	bl	8003748 <HAL_UARTEx_SetRxFifoThreshold>
 8000588:	1e03      	subs	r3, r0, #0
 800058a:	d001      	beq.n	8000590 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800058c:	f000 f868 	bl	8000660 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000590:	4b06      	ldr	r3, [pc, #24]	; (80005ac <MX_USART2_UART_Init+0x98>)
 8000592:	0018      	movs	r0, r3
 8000594:	f003 f85e 	bl	8003654 <HAL_UARTEx_DisableFifoMode>
 8000598:	1e03      	subs	r3, r0, #0
 800059a:	d001      	beq.n	80005a0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800059c:	f000 f860 	bl	8000660 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  huart2.RxISR = xv_prclcr_uart_rx_callback;
 80005a0:	4b02      	ldr	r3, [pc, #8]	; (80005ac <MX_USART2_UART_Init+0x98>)
 80005a2:	4a04      	ldr	r2, [pc, #16]	; (80005b4 <MX_USART2_UART_Init+0xa0>)
 80005a4:	671a      	str	r2, [r3, #112]	; 0x70
  /* USER CODE END USART2_Init 2 */

}
 80005a6:	46c0      	nop			; (mov r8, r8)
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	200003ac 	.word	0x200003ac
 80005b0:	40004400 	.word	0x40004400
 80005b4:	0800066d 	.word	0x0800066d

080005b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005be:	4b0c      	ldr	r3, [pc, #48]	; (80005f0 <MX_DMA_Init+0x38>)
 80005c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80005c2:	4b0b      	ldr	r3, [pc, #44]	; (80005f0 <MX_DMA_Init+0x38>)
 80005c4:	2101      	movs	r1, #1
 80005c6:	430a      	orrs	r2, r1
 80005c8:	639a      	str	r2, [r3, #56]	; 0x38
 80005ca:	4b09      	ldr	r3, [pc, #36]	; (80005f0 <MX_DMA_Init+0x38>)
 80005cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80005ce:	2201      	movs	r2, #1
 80005d0:	4013      	ands	r3, r2
 80005d2:	607b      	str	r3, [r7, #4]
 80005d4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80005d6:	2200      	movs	r2, #0
 80005d8:	2100      	movs	r1, #0
 80005da:	2009      	movs	r0, #9
 80005dc:	f000 fd28 	bl	8001030 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80005e0:	2009      	movs	r0, #9
 80005e2:	f000 fd3a 	bl	800105a <HAL_NVIC_EnableIRQ>

}
 80005e6:	46c0      	nop			; (mov r8, r8)
 80005e8:	46bd      	mov	sp, r7
 80005ea:	b002      	add	sp, #8
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	46c0      	nop			; (mov r8, r8)
 80005f0:	40021000 	.word	0x40021000

080005f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b086      	sub	sp, #24
 80005f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005fa:	1d3b      	adds	r3, r7, #4
 80005fc:	0018      	movs	r0, r3
 80005fe:	2314      	movs	r3, #20
 8000600:	001a      	movs	r2, r3
 8000602:	2100      	movs	r1, #0
 8000604:	f003 f970 	bl	80038e8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000608:	4b14      	ldr	r3, [pc, #80]	; (800065c <MX_GPIO_Init+0x68>)
 800060a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800060c:	4b13      	ldr	r3, [pc, #76]	; (800065c <MX_GPIO_Init+0x68>)
 800060e:	2101      	movs	r1, #1
 8000610:	430a      	orrs	r2, r1
 8000612:	635a      	str	r2, [r3, #52]	; 0x34
 8000614:	4b11      	ldr	r3, [pc, #68]	; (800065c <MX_GPIO_Init+0x68>)
 8000616:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000618:	2201      	movs	r2, #1
 800061a:	4013      	ands	r3, r2
 800061c:	603b      	str	r3, [r7, #0]
 800061e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000620:	23a0      	movs	r3, #160	; 0xa0
 8000622:	05db      	lsls	r3, r3, #23
 8000624:	2200      	movs	r2, #0
 8000626:	2120      	movs	r1, #32
 8000628:	0018      	movs	r0, r3
 800062a:	f001 f9b5 	bl	8001998 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800062e:	1d3b      	adds	r3, r7, #4
 8000630:	2220      	movs	r2, #32
 8000632:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000634:	1d3b      	adds	r3, r7, #4
 8000636:	2201      	movs	r2, #1
 8000638:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063a:	1d3b      	adds	r3, r7, #4
 800063c:	2200      	movs	r2, #0
 800063e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000640:	1d3b      	adds	r3, r7, #4
 8000642:	2200      	movs	r2, #0
 8000644:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000646:	1d3a      	adds	r2, r7, #4
 8000648:	23a0      	movs	r3, #160	; 0xa0
 800064a:	05db      	lsls	r3, r3, #23
 800064c:	0011      	movs	r1, r2
 800064e:	0018      	movs	r0, r3
 8000650:	f001 f83e 	bl	80016d0 <HAL_GPIO_Init>

}
 8000654:	46c0      	nop			; (mov r8, r8)
 8000656:	46bd      	mov	sp, r7
 8000658:	b006      	add	sp, #24
 800065a:	bd80      	pop	{r7, pc}
 800065c:	40021000 	.word	0x40021000

08000660 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000664:	b672      	cpsid	i
}
 8000666:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000668:	e7fe      	b.n	8000668 <Error_Handler+0x8>
	...

0800066c <xv_prclcr_uart_rx_callback>:
 * function is started. If the received packet is damaged, an error message is sent back.
 *
 * @param  [in] huart		pointer to uart structure, which one provide interrupt
 */
void xv_prclcr_uart_rx_callback(UART_HandleTypeDef *huart)
{
 800066c:	b5b0      	push	{r4, r5, r7, lr}
 800066e:	b084      	sub	sp, #16
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
	/* Read data from RDR register.*/
	uint8_t u8_rx_data = READ_REG(huart->Instance->RDR);
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800067a:	210f      	movs	r1, #15
 800067c:	187b      	adds	r3, r7, r1
 800067e:	701a      	strb	r2, [r3, #0]

	/* Call packet decode function. If result is ERR_BUSY nothing do. */
	TPRCLCR_ERR enu_err = err_prclcr_packet_decode(u8_rx_data);
 8000680:	250e      	movs	r5, #14
 8000682:	197c      	adds	r4, r7, r5
 8000684:	187b      	adds	r3, r7, r1
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	0018      	movs	r0, r3
 800068a:	f000 f81d 	bl	80006c8 <err_prclcr_packet_decode>
 800068e:	0003      	movs	r3, r0
 8000690:	7023      	strb	r3, [r4, #0]

	/* If packet is valid run state machine of decoding and answer. */
	if(enu_err == ERR_OK) {
 8000692:	197b      	adds	r3, r7, r5
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	2b00      	cmp	r3, #0
 8000698:	d104      	bne.n	80006a4 <xv_prclcr_uart_rx_callback+0x38>
		v_prclcr_cmd_set(huart);
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	0018      	movs	r0, r3
 800069e:	f000 f8e9 	bl	8000874 <v_prclcr_cmd_set>
	}
	/* If packet is not valid error answer is send. */
	else if(enu_err == ERR_FAILD) {
		HAL_UART_Transmit_DMA(huart, lu8_err_reply, sizeof(lu8_err_reply));
	}
}
 80006a2:	e00a      	b.n	80006ba <xv_prclcr_uart_rx_callback+0x4e>
	else if(enu_err == ERR_FAILD) {
 80006a4:	230e      	movs	r3, #14
 80006a6:	18fb      	adds	r3, r7, r3
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	2b01      	cmp	r3, #1
 80006ac:	d105      	bne.n	80006ba <xv_prclcr_uart_rx_callback+0x4e>
		HAL_UART_Transmit_DMA(huart, lu8_err_reply, sizeof(lu8_err_reply));
 80006ae:	4905      	ldr	r1, [pc, #20]	; (80006c4 <xv_prclcr_uart_rx_callback+0x58>)
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	2208      	movs	r2, #8
 80006b4:	0018      	movs	r0, r3
 80006b6:	f002 f89d 	bl	80027f4 <HAL_UART_Transmit_DMA>
}
 80006ba:	46c0      	nop			; (mov r8, r8)
 80006bc:	46bd      	mov	sp, r7
 80006be:	b004      	add	sp, #16
 80006c0:	bdb0      	pop	{r4, r5, r7, pc}
 80006c2:	46c0      	nop			; (mov r8, r8)
 80006c4:	20000004 	.word	0x20000004

080006c8 <err_prclcr_packet_decode>:
* @retval ERR_OK				Packet is complet and valid
*         ERR_FAILD				Packet is not valid 
*         ERR_BUSY				Packet incoming.		
*/
TPRCLCR_ERR err_prclcr_packet_decode(uint8_t u8_rx_data)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	0002      	movs	r2, r0
 80006d0:	1dfb      	adds	r3, r7, #7
 80006d2:	701a      	strb	r2, [r3, #0]
	/*Decode incoming packet. */
	if((u8_rx_data == PRCLCR_START_CMD) && (ls_cmd_form_inst_rx.u8_cmd_head == FALSE))
 80006d4:	1dfb      	adds	r3, r7, #7
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	2b21      	cmp	r3, #33	; 0x21
 80006da:	d111      	bne.n	8000700 <err_prclcr_packet_decode+0x38>
 80006dc:	4b25      	ldr	r3, [pc, #148]	; (8000774 <err_prclcr_packet_decode+0xac>)
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d10d      	bne.n	8000700 <err_prclcr_packet_decode+0x38>
	{
		/* Set cmd header to true for lock machine and set it to wait for data */
		ls_cmd_form_inst_rx.u8_cmd_head = TRUE;
 80006e4:	4b23      	ldr	r3, [pc, #140]	; (8000774 <err_prclcr_packet_decode+0xac>)
 80006e6:	2201      	movs	r2, #1
 80006e8:	701a      	strb	r2, [r3, #0]

		/* Clean checksum */
		CLEAN_REG(lu32_cs_rx);
 80006ea:	4b23      	ldr	r3, [pc, #140]	; (8000778 <err_prclcr_packet_decode+0xb0>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	601a      	str	r2, [r3, #0]
		/* Add new data to cs */
		lu32_cs_rx += u8_rx_data;
 80006f0:	1dfb      	adds	r3, r7, #7
 80006f2:	781a      	ldrb	r2, [r3, #0]
 80006f4:	4b20      	ldr	r3, [pc, #128]	; (8000778 <err_prclcr_packet_decode+0xb0>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	18d2      	adds	r2, r2, r3
 80006fa:	4b1f      	ldr	r3, [pc, #124]	; (8000778 <err_prclcr_packet_decode+0xb0>)
 80006fc:	601a      	str	r2, [r3, #0]
 80006fe:	e033      	b.n	8000768 <err_prclcr_packet_decode+0xa0>
	}
	else if((u8_rx_data == PRCLCR_END_CMD) && (ls_cmd_form_inst_rx.u8_cmd_head == FALSE))
 8000700:	1dfb      	adds	r3, r7, #7
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	2b16      	cmp	r3, #22
 8000706:	d11b      	bne.n	8000740 <err_prclcr_packet_decode+0x78>
 8000708:	4b1a      	ldr	r3, [pc, #104]	; (8000774 <err_prclcr_packet_decode+0xac>)
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	2b00      	cmp	r3, #0
 800070e:	d117      	bne.n	8000740 <err_prclcr_packet_decode+0x78>
	{
		/* Machine in end state. Reset counter save state machine */
		(void)err_prclcr_packet_save(0U, TRUE);
 8000710:	2101      	movs	r1, #1
 8000712:	2000      	movs	r0, #0
 8000714:	f000 f832 	bl	800077c <err_prclcr_packet_save>

		/* Check mask */
		if((uint8_t)(lu32_cs_rx & PRCLCR_CS_MASK) == ls_cmd_form_inst_rx.u8_cmd_cs)
 8000718:	4b17      	ldr	r3, [pc, #92]	; (8000778 <err_prclcr_packet_decode+0xb0>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	b2da      	uxtb	r2, r3
 800071e:	4b15      	ldr	r3, [pc, #84]	; (8000774 <err_prclcr_packet_decode+0xac>)
 8000720:	799b      	ldrb	r3, [r3, #6]
 8000722:	429a      	cmp	r2, r3
 8000724:	d10a      	bne.n	800073c <err_prclcr_packet_decode+0x74>
		{
			/* Reset decote state machine. */
			ls_cmd_form_inst_rx.u8_cmd_head = FALSE;
 8000726:	4b13      	ldr	r3, [pc, #76]	; (8000774 <err_prclcr_packet_decode+0xac>)
 8000728:	2200      	movs	r2, #0
 800072a:	701a      	strb	r2, [r3, #0]
			ls_cmd_form_inst_rx.u8_cmd_end = TRUE;
 800072c:	4b11      	ldr	r3, [pc, #68]	; (8000774 <err_prclcr_packet_decode+0xac>)
 800072e:	2201      	movs	r2, #1
 8000730:	71da      	strb	r2, [r3, #7]
			CLEAN_REG(lu32_cs_rx);
 8000732:	4b11      	ldr	r3, [pc, #68]	; (8000778 <err_prclcr_packet_decode+0xb0>)
 8000734:	2200      	movs	r2, #0
 8000736:	601a      	str	r2, [r3, #0]

			/* Run answer process */
			return ERR_OK;
 8000738:	2300      	movs	r3, #0
 800073a:	e016      	b.n	800076a <err_prclcr_packet_decode+0xa2>
		}
		else
		{
			/* Error frame received */
			return ERR_FAILD;
 800073c:	2301      	movs	r3, #1
 800073e:	e014      	b.n	800076a <err_prclcr_packet_decode+0xa2>
		}
	}
	else if(ls_cmd_form_inst_rx.u8_cmd_head == TRUE)
 8000740:	4b0c      	ldr	r3, [pc, #48]	; (8000774 <err_prclcr_packet_decode+0xac>)
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	2b01      	cmp	r3, #1
 8000746:	d10f      	bne.n	8000768 <err_prclcr_packet_decode+0xa0>
	{
		/* Machine in save data state. Check if data can by write*/
		if(err_prclcr_packet_save(u8_rx_data, FALSE) != ERR_OK)
 8000748:	1dfb      	adds	r3, r7, #7
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	2100      	movs	r1, #0
 800074e:	0018      	movs	r0, r3
 8000750:	f000 f814 	bl	800077c <err_prclcr_packet_save>
 8000754:	1e03      	subs	r3, r0, #0
 8000756:	d007      	beq.n	8000768 <err_prclcr_packet_decode+0xa0>
		{
			/* If not reset machine */
			ls_cmd_form_inst_rx.u8_cmd_head = FALSE;
 8000758:	4b06      	ldr	r3, [pc, #24]	; (8000774 <err_prclcr_packet_decode+0xac>)
 800075a:	2200      	movs	r2, #0
 800075c:	701a      	strb	r2, [r3, #0]
			ls_cmd_form_inst_rx.u8_cmd_end = FALSE;
 800075e:	4b05      	ldr	r3, [pc, #20]	; (8000774 <err_prclcr_packet_decode+0xac>)
 8000760:	2200      	movs	r2, #0
 8000762:	71da      	strb	r2, [r3, #7]
			return ERR_FAILD;
 8000764:	2301      	movs	r3, #1
 8000766:	e000      	b.n	800076a <err_prclcr_packet_decode+0xa2>
		}
	}
	else {/* Empty else*/}

	return ERR_BUSY;
 8000768:	2302      	movs	r3, #2
}
 800076a:	0018      	movs	r0, r3
 800076c:	46bd      	mov	sp, r7
 800076e:	b002      	add	sp, #8
 8000770:	bd80      	pop	{r7, pc}
 8000772:	46c0      	nop			; (mov r8, r8)
 8000774:	20000034 	.word	0x20000034
 8000778:	20000000 	.word	0x20000000

0800077c <err_prclcr_packet_save>:
* @param  [in] u8_rst_st        TRUE/FALSE - RESET/NOT RESET state machine.
* @retval ERR_OK				Packet is complet and valid, state machine successful reset.
*         ERR_FAILD				Packet is not valid.
*/
TPRCLCR_ERR err_prclcr_packet_save(uint8_t u8_data, uint8_t u8_rst_st)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
 8000782:	0002      	movs	r2, r0
 8000784:	1dfb      	adds	r3, r7, #7
 8000786:	701a      	strb	r2, [r3, #0]
 8000788:	1dbb      	adds	r3, r7, #6
 800078a:	1c0a      	adds	r2, r1, #0
 800078c:	701a      	strb	r2, [r3, #0]
	static uint8_t u8_data_cnt = 0;
	
	/* Reset state machine if u8_rst_st is set. */
	if(u8_rst_st == TRUE)
 800078e:	1dbb      	adds	r3, r7, #6
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	2b01      	cmp	r3, #1
 8000794:	d104      	bne.n	80007a0 <err_prclcr_packet_save+0x24>
	{
		/* Call macro to clean state counter. */
		CLEAN_REG(u8_data_cnt);
 8000796:	4b33      	ldr	r3, [pc, #204]	; (8000864 <err_prclcr_packet_save+0xe8>)
 8000798:	2200      	movs	r2, #0
 800079a:	701a      	strb	r2, [r3, #0]
		return ERR_OK;
 800079c:	2300      	movs	r3, #0
 800079e:	e05d      	b.n	800085c <err_prclcr_packet_save+0xe0>
	}
	/* Check if packet is still valid. */
	else if(u8_data_cnt == PRCLCR_CMD_FORM_INST_LEN)
 80007a0:	4b30      	ldr	r3, [pc, #192]	; (8000864 <err_prclcr_packet_save+0xe8>)
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	2b06      	cmp	r3, #6
 80007a6:	d104      	bne.n	80007b2 <err_prclcr_packet_save+0x36>
	{
		/* Call macro to clean state counter. */
		CLEAN_REG(u8_data_cnt);
 80007a8:	4b2e      	ldr	r3, [pc, #184]	; (8000864 <err_prclcr_packet_save+0xe8>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	701a      	strb	r2, [r3, #0]
		return ERR_FAILD;
 80007ae:	2301      	movs	r3, #1
 80007b0:	e054      	b.n	800085c <err_prclcr_packet_save+0xe0>
	}
	/* Save state machine function. */
	else
	{
		switch(u8_data_cnt)
 80007b2:	4b2c      	ldr	r3, [pc, #176]	; (8000864 <err_prclcr_packet_save+0xe8>)
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	2b05      	cmp	r3, #5
 80007b8:	d848      	bhi.n	800084c <err_prclcr_packet_save+0xd0>
 80007ba:	009a      	lsls	r2, r3, #2
 80007bc:	4b2a      	ldr	r3, [pc, #168]	; (8000868 <err_prclcr_packet_save+0xec>)
 80007be:	18d3      	adds	r3, r2, r3
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	469f      	mov	pc, r3
		{
		case 0U: ls_cmd_form_inst_rx.u8_cab_addr = u8_data;
 80007c4:	4b29      	ldr	r3, [pc, #164]	; (800086c <err_prclcr_packet_save+0xf0>)
 80007c6:	1dfa      	adds	r2, r7, #7
 80007c8:	7812      	ldrb	r2, [r2, #0]
 80007ca:	705a      	strb	r2, [r3, #1]
				 lu32_cs_rx += u8_data;
 80007cc:	1dfb      	adds	r3, r7, #7
 80007ce:	781a      	ldrb	r2, [r3, #0]
 80007d0:	4b27      	ldr	r3, [pc, #156]	; (8000870 <err_prclcr_packet_save+0xf4>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	18d2      	adds	r2, r2, r3
 80007d6:	4b26      	ldr	r3, [pc, #152]	; (8000870 <err_prclcr_packet_save+0xf4>)
 80007d8:	601a      	str	r2, [r3, #0]
				 break;
 80007da:	e038      	b.n	800084e <err_prclcr_packet_save+0xd2>
		case 1U: ls_cmd_form_inst_rx.u8_box_num = u8_data;
 80007dc:	4b23      	ldr	r3, [pc, #140]	; (800086c <err_prclcr_packet_save+0xf0>)
 80007de:	1dfa      	adds	r2, r7, #7
 80007e0:	7812      	ldrb	r2, [r2, #0]
 80007e2:	709a      	strb	r2, [r3, #2]
				 lu32_cs_rx += u8_data;
 80007e4:	1dfb      	adds	r3, r7, #7
 80007e6:	781a      	ldrb	r2, [r3, #0]
 80007e8:	4b21      	ldr	r3, [pc, #132]	; (8000870 <err_prclcr_packet_save+0xf4>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	18d2      	adds	r2, r2, r3
 80007ee:	4b20      	ldr	r3, [pc, #128]	; (8000870 <err_prclcr_packet_save+0xf4>)
 80007f0:	601a      	str	r2, [r3, #0]
				 break;
 80007f2:	e02c      	b.n	800084e <err_prclcr_packet_save+0xd2>
		case 2U: ls_cmd_form_inst_rx.u8_com_type = u8_data;
 80007f4:	4b1d      	ldr	r3, [pc, #116]	; (800086c <err_prclcr_packet_save+0xf0>)
 80007f6:	1dfa      	adds	r2, r7, #7
 80007f8:	7812      	ldrb	r2, [r2, #0]
 80007fa:	70da      	strb	r2, [r3, #3]
		         lu32_cs_rx += u8_data;
 80007fc:	1dfb      	adds	r3, r7, #7
 80007fe:	781a      	ldrb	r2, [r3, #0]
 8000800:	4b1b      	ldr	r3, [pc, #108]	; (8000870 <err_prclcr_packet_save+0xf4>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	18d2      	adds	r2, r2, r3
 8000806:	4b1a      	ldr	r3, [pc, #104]	; (8000870 <err_prclcr_packet_save+0xf4>)
 8000808:	601a      	str	r2, [r3, #0]
				 break;
 800080a:	e020      	b.n	800084e <err_prclcr_packet_save+0xd2>
		case 3U: ls_cmd_form_inst_rx.u8_par_qlt = u8_data;
 800080c:	4b17      	ldr	r3, [pc, #92]	; (800086c <err_prclcr_packet_save+0xf0>)
 800080e:	1dfa      	adds	r2, r7, #7
 8000810:	7812      	ldrb	r2, [r2, #0]
 8000812:	711a      	strb	r2, [r3, #4]
		         lu32_cs_rx += u8_data;
 8000814:	1dfb      	adds	r3, r7, #7
 8000816:	781a      	ldrb	r2, [r3, #0]
 8000818:	4b15      	ldr	r3, [pc, #84]	; (8000870 <err_prclcr_packet_save+0xf4>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	18d2      	adds	r2, r2, r3
 800081e:	4b14      	ldr	r3, [pc, #80]	; (8000870 <err_prclcr_packet_save+0xf4>)
 8000820:	601a      	str	r2, [r3, #0]
				 break;
 8000822:	e014      	b.n	800084e <err_prclcr_packet_save+0xd2>
		case 4U: ls_cmd_form_inst_rx.u8_par_m = u8_data;
 8000824:	4b11      	ldr	r3, [pc, #68]	; (800086c <err_prclcr_packet_save+0xf0>)
 8000826:	1dfa      	adds	r2, r7, #7
 8000828:	7812      	ldrb	r2, [r2, #0]
 800082a:	715a      	strb	r2, [r3, #5]
				 lu32_cs_rx += u8_data;
 800082c:	1dfb      	adds	r3, r7, #7
 800082e:	781a      	ldrb	r2, [r3, #0]
 8000830:	4b0f      	ldr	r3, [pc, #60]	; (8000870 <err_prclcr_packet_save+0xf4>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	18d2      	adds	r2, r2, r3
 8000836:	4b0e      	ldr	r3, [pc, #56]	; (8000870 <err_prclcr_packet_save+0xf4>)
 8000838:	601a      	str	r2, [r3, #0]
				 break;
 800083a:	e008      	b.n	800084e <err_prclcr_packet_save+0xd2>
		case 5U: ls_cmd_form_inst_rx.u8_cmd_cs = u8_data;
 800083c:	4b0b      	ldr	r3, [pc, #44]	; (800086c <err_prclcr_packet_save+0xf0>)
 800083e:	1dfa      	adds	r2, r7, #7
 8000840:	7812      	ldrb	r2, [r2, #0]
 8000842:	719a      	strb	r2, [r3, #6]
				 /* End of save. Drive err_prclcr_packet_decode function */
				 ls_cmd_form_inst_rx.u8_cmd_head = FALSE;
 8000844:	4b09      	ldr	r3, [pc, #36]	; (800086c <err_prclcr_packet_save+0xf0>)
 8000846:	2200      	movs	r2, #0
 8000848:	701a      	strb	r2, [r3, #0]
				 break;
 800084a:	e000      	b.n	800084e <err_prclcr_packet_save+0xd2>
		default: break; /* Empty default*/
 800084c:	46c0      	nop			; (mov r8, r8)
		}

		u8_data_cnt++;
 800084e:	4b05      	ldr	r3, [pc, #20]	; (8000864 <err_prclcr_packet_save+0xe8>)
 8000850:	781b      	ldrb	r3, [r3, #0]
 8000852:	3301      	adds	r3, #1
 8000854:	b2da      	uxtb	r2, r3
 8000856:	4b03      	ldr	r3, [pc, #12]	; (8000864 <err_prclcr_packet_save+0xe8>)
 8000858:	701a      	strb	r2, [r3, #0]

		return ERR_OK;
 800085a:	2300      	movs	r3, #0
	}
	return ERR_OK;
}
 800085c:	0018      	movs	r0, r3
 800085e:	46bd      	mov	sp, r7
 8000860:	b002      	add	sp, #8
 8000862:	bd80      	pop	{r7, pc}
 8000864:	2000034c 	.word	0x2000034c
 8000868:	08003920 	.word	0x08003920
 800086c:	20000034 	.word	0x20000034
 8000870:	20000000 	.word	0x20000000

08000874 <v_prclcr_cmd_set>:
 * @param  [in]  *huart			Pointer to current used uart.
 *
 */

void v_prclcr_cmd_set(UART_HandleTypeDef *huart)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b084      	sub	sp, #16
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
	TPRCLCR_CMD_FORM_INST s_rx_response = ls_cmd_form_inst_rx;
 800087c:	2308      	movs	r3, #8
 800087e:	18fb      	adds	r3, r7, r3
 8000880:	4a1f      	ldr	r2, [pc, #124]	; (8000900 <v_prclcr_cmd_set+0x8c>)
 8000882:	ca03      	ldmia	r2!, {r0, r1}
 8000884:	c303      	stmia	r3!, {r0, r1}

	switch(ls_cmd_form_inst_rx.u8_com_type)
 8000886:	4b1e      	ldr	r3, [pc, #120]	; (8000900 <v_prclcr_cmd_set+0x8c>)
 8000888:	78db      	ldrb	r3, [r3, #3]
 800088a:	2b09      	cmp	r3, #9
 800088c:	d834      	bhi.n	80008f8 <v_prclcr_cmd_set+0x84>
 800088e:	009a      	lsls	r2, r3, #2
 8000890:	4b1c      	ldr	r3, [pc, #112]	; (8000904 <v_prclcr_cmd_set+0x90>)
 8000892:	18d3      	adds	r3, r2, r3
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	469f      	mov	pc, r3
	{
	case BOX_DOOR_CONTROL:
		/* Set local data lu8_box_status. If data can by set m par is set to 1. */
		if(err_prclcr_box_door_ctr() == ERR_OK) {
 8000898:	f000 f83c 	bl	8000914 <err_prclcr_box_door_ctr>
 800089c:	1e03      	subs	r3, r0, #0
 800089e:	d104      	bne.n	80008aa <v_prclcr_cmd_set+0x36>
			s_rx_response.u8_par_m = TRUE;
 80008a0:	2308      	movs	r3, #8
 80008a2:	18fb      	adds	r3, r7, r3
 80008a4:	2201      	movs	r2, #1
 80008a6:	715a      	strb	r2, [r3, #5]
 80008a8:	e003      	b.n	80008b2 <v_prclcr_cmd_set+0x3e>
		}
		else {
			s_rx_response.u8_par_m = FALSE;
 80008aa:	2308      	movs	r3, #8
 80008ac:	18fb      	adds	r3, r7, r3
 80008ae:	2200      	movs	r2, #0
 80008b0:	715a      	strb	r2, [r3, #5]
		}

		s_rx_response.u8_cmd_head = PRCLCR_START_CMD;
 80008b2:	2108      	movs	r1, #8
 80008b4:	187b      	adds	r3, r7, r1
 80008b6:	2221      	movs	r2, #33	; 0x21
 80008b8:	701a      	strb	r2, [r3, #0]
		s_rx_response.u8_cmd_end  = PRCLCR_END_CMD;
 80008ba:	187b      	adds	r3, r7, r1
 80008bc:	2216      	movs	r2, #22
 80008be:	71da      	strb	r2, [r3, #7]

		/* Send response packet. */
//TODO: It is written in the assignment that the slave has to answer within 1s.
//TODO: I'm not sure if it's possible to open the box so quickly.
//TODO: Therefore, a response is sent first, and then does the box open.
		HAL_UART_Transmit_DMA(huart, (uint8_t *)&s_rx_response, 8U);
 80008c0:	1879      	adds	r1, r7, r1
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	2208      	movs	r2, #8
 80008c6:	0018      	movs	r0, r3
 80008c8:	f001 ff94 	bl	80027f4 <HAL_UART_Transmit_DMA>

		/* If function open/close is implemented, it will by run.*/
		if(lp_box_run_function != NULL)
 80008cc:	4b0e      	ldr	r3, [pc, #56]	; (8000908 <v_prclcr_cmd_set+0x94>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d010      	beq.n	80008f6 <v_prclcr_cmd_set+0x82>
		{
			lp_box_run_function(lu8_box_status);
 80008d4:	4b0c      	ldr	r3, [pc, #48]	; (8000908 <v_prclcr_cmd_set+0x94>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4a0c      	ldr	r2, [pc, #48]	; (800090c <v_prclcr_cmd_set+0x98>)
 80008da:	0010      	movs	r0, r2
 80008dc:	4798      	blx	r3
		}

		break;
 80008de:	e00a      	b.n	80008f6 <v_prclcr_cmd_set+0x82>
	case BOX_STATUS_QUERY:    /* No implemented */
		break;
	case BOX_DOOR_STATUS:
		/* Create respond packet and send it. */
		v_prclcr_box_door_satus();
 80008e0:	f000 f8da 	bl	8000a98 <v_prclcr_box_door_satus>
		HAL_UART_Transmit_DMA(huart, lu8_cmd_form_inst_expand, sizeof(lu8_cmd_form_inst_expand));
 80008e4:	490a      	ldr	r1, [pc, #40]	; (8000910 <v_prclcr_cmd_set+0x9c>)
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	220a      	movs	r2, #10
 80008ea:	0018      	movs	r0, r3
 80008ec:	f001 ff82 	bl	80027f4 <HAL_UART_Transmit_DMA>
		break;
 80008f0:	e002      	b.n	80008f8 <v_prclcr_cmd_set+0x84>
		break;
 80008f2:	46c0      	nop			; (mov r8, r8)
 80008f4:	e000      	b.n	80008f8 <v_prclcr_cmd_set+0x84>
		break;
 80008f6:	46c0      	nop			; (mov r8, r8)
	case FIRMWARE_VERSION:    /* No implemented */
		break;
	case COMUNICATION_CHECK:  /* No implemented */
		break;
	}
}
 80008f8:	46c0      	nop			; (mov r8, r8)
 80008fa:	46bd      	mov	sp, r7
 80008fc:	b004      	add	sp, #16
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	20000034 	.word	0x20000034
 8000904:	08003938 	.word	0x08003938
 8000908:	20000348 	.word	0x20000348
 800090c:	2000003c 	.word	0x2000003c
 8000910:	2000033c 	.word	0x2000033c

08000914 <err_prclcr_box_door_ctr>:
 * @retval ERR_OK				Box number is set to open/close status
 *         ERR_FAILD			Box number cannot by set.
 *
 */
TPRCLCR_ERR err_prclcr_box_door_ctr(void)
{
 8000914:	b590      	push	{r4, r7, lr}
 8000916:	b083      	sub	sp, #12
 8000918:	af00      	add	r7, sp, #0
	/* Calculate which bit in lu8_box_status has to by set/reset */
	uint8_t u8_msg_box_sel = (uint8_t)((ls_cmd_form_inst_rx.u8_box_num - 1U) / 8U);
 800091a:	4b5d      	ldr	r3, [pc, #372]	; (8000a90 <err_prclcr_box_door_ctr+0x17c>)
 800091c:	789b      	ldrb	r3, [r3, #2]
 800091e:	3b01      	subs	r3, #1
 8000920:	08da      	lsrs	r2, r3, #3
 8000922:	1dbb      	adds	r3, r7, #6
 8000924:	701a      	strb	r2, [r3, #0]
	uint8_t u8_msg_box_mod = (uint8_t)((ls_cmd_form_inst_rx.u8_box_num - 1U) % 8U);
 8000926:	4b5a      	ldr	r3, [pc, #360]	; (8000a90 <err_prclcr_box_door_ctr+0x17c>)
 8000928:	789b      	ldrb	r3, [r3, #2]
 800092a:	3b01      	subs	r3, #1
 800092c:	b2da      	uxtb	r2, r3
 800092e:	1d7b      	adds	r3, r7, #5
 8000930:	2107      	movs	r1, #7
 8000932:	400a      	ands	r2, r1
 8000934:	701a      	strb	r2, [r3, #0]

	/* Check if number of box is not bigger as in code define. */
	if(u8_msg_box_sel >= PRCLCR_NUM_OF_BOX_STATUS)
 8000936:	1dbb      	adds	r3, r7, #6
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	2b02      	cmp	r3, #2
 800093c:	d901      	bls.n	8000942 <err_prclcr_box_door_ctr+0x2e>
	{
		return ERR_FAILD;
 800093e:	2301      	movs	r3, #1
 8000940:	e0a2      	b.n	8000a88 <err_prclcr_box_door_ctr+0x174>
	}

	/* Broadcast for all cabinet. */
	if(ls_cmd_form_inst_rx.u8_cab_addr == 0U)
 8000942:	4b53      	ldr	r3, [pc, #332]	; (8000a90 <err_prclcr_box_door_ctr+0x17c>)
 8000944:	785b      	ldrb	r3, [r3, #1]
 8000946:	2b00      	cmp	r3, #0
 8000948:	d153      	bne.n	80009f2 <err_prclcr_box_door_ctr+0xde>
	{
		if(ls_cmd_form_inst_rx.u8_box_num == 0U)
 800094a:	4b51      	ldr	r3, [pc, #324]	; (8000a90 <err_prclcr_box_door_ctr+0x17c>)
 800094c:	789b      	ldrb	r3, [r3, #2]
 800094e:	2b00      	cmp	r3, #0
 8000950:	d101      	bne.n	8000956 <err_prclcr_box_door_ctr+0x42>
		{
			/* Never can by set all box in cabinet at once. */
			return ERR_FAILD;
 8000952:	2301      	movs	r3, #1
 8000954:	e098      	b.n	8000a88 <err_prclcr_box_door_ctr+0x174>
		}
		else
		{
			uint8_t i;
			for(i = 0; i < PRCLCR_CAINET_NUM; i++)
 8000956:	1dfb      	adds	r3, r7, #7
 8000958:	2200      	movs	r2, #0
 800095a:	701a      	strb	r2, [r3, #0]
 800095c:	e044      	b.n	80009e8 <err_prclcr_box_door_ctr+0xd4>
			{
				lu8_box_status[i][u8_msg_box_sel] &= ~(uint8_t)(1U << u8_msg_box_mod);
 800095e:	1dfb      	adds	r3, r7, #7
 8000960:	781a      	ldrb	r2, [r3, #0]
 8000962:	1dbb      	adds	r3, r7, #6
 8000964:	7819      	ldrb	r1, [r3, #0]
 8000966:	484b      	ldr	r0, [pc, #300]	; (8000a94 <err_prclcr_box_door_ctr+0x180>)
 8000968:	0013      	movs	r3, r2
 800096a:	005b      	lsls	r3, r3, #1
 800096c:	189b      	adds	r3, r3, r2
 800096e:	18c3      	adds	r3, r0, r3
 8000970:	5c5b      	ldrb	r3, [r3, r1]
 8000972:	b25b      	sxtb	r3, r3
 8000974:	1d7a      	adds	r2, r7, #5
 8000976:	7812      	ldrb	r2, [r2, #0]
 8000978:	2101      	movs	r1, #1
 800097a:	4091      	lsls	r1, r2
 800097c:	000a      	movs	r2, r1
 800097e:	b252      	sxtb	r2, r2
 8000980:	43d2      	mvns	r2, r2
 8000982:	b252      	sxtb	r2, r2
 8000984:	4013      	ands	r3, r2
 8000986:	b258      	sxtb	r0, r3
 8000988:	1dfb      	adds	r3, r7, #7
 800098a:	781a      	ldrb	r2, [r3, #0]
 800098c:	1dbb      	adds	r3, r7, #6
 800098e:	7819      	ldrb	r1, [r3, #0]
 8000990:	b2c4      	uxtb	r4, r0
 8000992:	4840      	ldr	r0, [pc, #256]	; (8000a94 <err_prclcr_box_door_ctr+0x180>)
 8000994:	0013      	movs	r3, r2
 8000996:	005b      	lsls	r3, r3, #1
 8000998:	189b      	adds	r3, r3, r2
 800099a:	18c3      	adds	r3, r0, r3
 800099c:	1c22      	adds	r2, r4, #0
 800099e:	545a      	strb	r2, [r3, r1]
				lu8_box_status[i][u8_msg_box_sel] |= (uint8_t)(ls_cmd_form_inst_rx.u8_par_m << u8_msg_box_mod);
 80009a0:	1dfb      	adds	r3, r7, #7
 80009a2:	781a      	ldrb	r2, [r3, #0]
 80009a4:	1dbb      	adds	r3, r7, #6
 80009a6:	7819      	ldrb	r1, [r3, #0]
 80009a8:	483a      	ldr	r0, [pc, #232]	; (8000a94 <err_prclcr_box_door_ctr+0x180>)
 80009aa:	0013      	movs	r3, r2
 80009ac:	005b      	lsls	r3, r3, #1
 80009ae:	189b      	adds	r3, r3, r2
 80009b0:	18c3      	adds	r3, r0, r3
 80009b2:	5c58      	ldrb	r0, [r3, r1]
 80009b4:	4b36      	ldr	r3, [pc, #216]	; (8000a90 <err_prclcr_box_door_ctr+0x17c>)
 80009b6:	795b      	ldrb	r3, [r3, #5]
 80009b8:	001a      	movs	r2, r3
 80009ba:	1d7b      	adds	r3, r7, #5
 80009bc:	781b      	ldrb	r3, [r3, #0]
 80009be:	409a      	lsls	r2, r3
 80009c0:	0013      	movs	r3, r2
 80009c2:	b2db      	uxtb	r3, r3
 80009c4:	1dfa      	adds	r2, r7, #7
 80009c6:	7812      	ldrb	r2, [r2, #0]
 80009c8:	1db9      	adds	r1, r7, #6
 80009ca:	7809      	ldrb	r1, [r1, #0]
 80009cc:	4303      	orrs	r3, r0
 80009ce:	b2dc      	uxtb	r4, r3
 80009d0:	4830      	ldr	r0, [pc, #192]	; (8000a94 <err_prclcr_box_door_ctr+0x180>)
 80009d2:	0013      	movs	r3, r2
 80009d4:	005b      	lsls	r3, r3, #1
 80009d6:	189b      	adds	r3, r3, r2
 80009d8:	18c3      	adds	r3, r0, r3
 80009da:	1c22      	adds	r2, r4, #0
 80009dc:	545a      	strb	r2, [r3, r1]
			for(i = 0; i < PRCLCR_CAINET_NUM; i++)
 80009de:	1dfb      	adds	r3, r7, #7
 80009e0:	781a      	ldrb	r2, [r3, #0]
 80009e2:	1dfb      	adds	r3, r7, #7
 80009e4:	3201      	adds	r2, #1
 80009e6:	701a      	strb	r2, [r3, #0]
 80009e8:	1dfb      	adds	r3, r7, #7
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	2bff      	cmp	r3, #255	; 0xff
 80009ee:	d1b6      	bne.n	800095e <err_prclcr_box_door_ctr+0x4a>
 80009f0:	e049      	b.n	8000a86 <err_prclcr_box_door_ctr+0x172>
		}
	}
	/* Set/reset current one box. */
	else
	{
		if(ls_cmd_form_inst_rx.u8_box_num == 0U)
 80009f2:	4b27      	ldr	r3, [pc, #156]	; (8000a90 <err_prclcr_box_door_ctr+0x17c>)
 80009f4:	789b      	ldrb	r3, [r3, #2]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d101      	bne.n	80009fe <err_prclcr_box_door_ctr+0xea>
		{
			/* Never can by set all box in cabinet at once. */
			return ERR_FAILD;
 80009fa:	2301      	movs	r3, #1
 80009fc:	e044      	b.n	8000a88 <err_prclcr_box_door_ctr+0x174>
		}
		else
		{
			lu8_box_status[ls_cmd_form_inst_rx.u8_cab_addr - 1U][u8_msg_box_sel] &= ~(uint8_t)(1U << u8_msg_box_mod);
 80009fe:	4b24      	ldr	r3, [pc, #144]	; (8000a90 <err_prclcr_box_door_ctr+0x17c>)
 8000a00:	785b      	ldrb	r3, [r3, #1]
 8000a02:	1e5a      	subs	r2, r3, #1
 8000a04:	1dbb      	adds	r3, r7, #6
 8000a06:	7819      	ldrb	r1, [r3, #0]
 8000a08:	4822      	ldr	r0, [pc, #136]	; (8000a94 <err_prclcr_box_door_ctr+0x180>)
 8000a0a:	0013      	movs	r3, r2
 8000a0c:	005b      	lsls	r3, r3, #1
 8000a0e:	189b      	adds	r3, r3, r2
 8000a10:	18c3      	adds	r3, r0, r3
 8000a12:	5c5b      	ldrb	r3, [r3, r1]
 8000a14:	b25b      	sxtb	r3, r3
 8000a16:	1d7a      	adds	r2, r7, #5
 8000a18:	7812      	ldrb	r2, [r2, #0]
 8000a1a:	2101      	movs	r1, #1
 8000a1c:	4091      	lsls	r1, r2
 8000a1e:	000a      	movs	r2, r1
 8000a20:	b252      	sxtb	r2, r2
 8000a22:	43d2      	mvns	r2, r2
 8000a24:	b252      	sxtb	r2, r2
 8000a26:	4013      	ands	r3, r2
 8000a28:	b258      	sxtb	r0, r3
 8000a2a:	4b19      	ldr	r3, [pc, #100]	; (8000a90 <err_prclcr_box_door_ctr+0x17c>)
 8000a2c:	785b      	ldrb	r3, [r3, #1]
 8000a2e:	1e5a      	subs	r2, r3, #1
 8000a30:	1dbb      	adds	r3, r7, #6
 8000a32:	7819      	ldrb	r1, [r3, #0]
 8000a34:	b2c4      	uxtb	r4, r0
 8000a36:	4817      	ldr	r0, [pc, #92]	; (8000a94 <err_prclcr_box_door_ctr+0x180>)
 8000a38:	0013      	movs	r3, r2
 8000a3a:	005b      	lsls	r3, r3, #1
 8000a3c:	189b      	adds	r3, r3, r2
 8000a3e:	18c3      	adds	r3, r0, r3
 8000a40:	1c22      	adds	r2, r4, #0
 8000a42:	545a      	strb	r2, [r3, r1]
			lu8_box_status[ls_cmd_form_inst_rx.u8_cab_addr - 1U][u8_msg_box_sel] |= (uint8_t)(ls_cmd_form_inst_rx.u8_par_m << u8_msg_box_mod);
 8000a44:	4b12      	ldr	r3, [pc, #72]	; (8000a90 <err_prclcr_box_door_ctr+0x17c>)
 8000a46:	785b      	ldrb	r3, [r3, #1]
 8000a48:	1e5a      	subs	r2, r3, #1
 8000a4a:	1dbb      	adds	r3, r7, #6
 8000a4c:	7819      	ldrb	r1, [r3, #0]
 8000a4e:	4811      	ldr	r0, [pc, #68]	; (8000a94 <err_prclcr_box_door_ctr+0x180>)
 8000a50:	0013      	movs	r3, r2
 8000a52:	005b      	lsls	r3, r3, #1
 8000a54:	189b      	adds	r3, r3, r2
 8000a56:	18c3      	adds	r3, r0, r3
 8000a58:	5c58      	ldrb	r0, [r3, r1]
 8000a5a:	4b0d      	ldr	r3, [pc, #52]	; (8000a90 <err_prclcr_box_door_ctr+0x17c>)
 8000a5c:	795b      	ldrb	r3, [r3, #5]
 8000a5e:	001a      	movs	r2, r3
 8000a60:	1d7b      	adds	r3, r7, #5
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	409a      	lsls	r2, r3
 8000a66:	0013      	movs	r3, r2
 8000a68:	b2db      	uxtb	r3, r3
 8000a6a:	4a09      	ldr	r2, [pc, #36]	; (8000a90 <err_prclcr_box_door_ctr+0x17c>)
 8000a6c:	7852      	ldrb	r2, [r2, #1]
 8000a6e:	3a01      	subs	r2, #1
 8000a70:	1db9      	adds	r1, r7, #6
 8000a72:	7809      	ldrb	r1, [r1, #0]
 8000a74:	4303      	orrs	r3, r0
 8000a76:	b2dc      	uxtb	r4, r3
 8000a78:	4806      	ldr	r0, [pc, #24]	; (8000a94 <err_prclcr_box_door_ctr+0x180>)
 8000a7a:	0013      	movs	r3, r2
 8000a7c:	005b      	lsls	r3, r3, #1
 8000a7e:	189b      	adds	r3, r3, r2
 8000a80:	18c3      	adds	r3, r0, r3
 8000a82:	1c22      	adds	r2, r4, #0
 8000a84:	545a      	strb	r2, [r3, r1]
		}
	}
	return ERR_OK;
 8000a86:	2300      	movs	r3, #0
}
 8000a88:	0018      	movs	r0, r3
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	b003      	add	sp, #12
 8000a8e:	bd90      	pop	{r4, r7, pc}
 8000a90:	20000034 	.word	0x20000034
 8000a94:	2000003c 	.word	0x2000003c

08000a98 <v_prclcr_box_door_satus>:
 *
 * The function sets the field for sending the status of the required cabinet.
 * The number of boxes sent is given by the constant PRCLCR_NUM_OF_BOX_STATUS.
 */
void v_prclcr_box_door_satus(void)
{
 8000a98:	b590      	push	{r4, r7, lr}
 8000a9a:	b083      	sub	sp, #12
 8000a9c:	af00      	add	r7, sp, #0
	uint8_t i;
	uint32_t u32_packet_cs = 0;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	603b      	str	r3, [r7, #0]

	lu8_cmd_form_inst_expand[0U] = PRCLCR_START_CMD;
 8000aa2:	4b27      	ldr	r3, [pc, #156]	; (8000b40 <v_prclcr_box_door_satus+0xa8>)
 8000aa4:	2221      	movs	r2, #33	; 0x21
 8000aa6:	701a      	strb	r2, [r3, #0]
	lu8_cmd_form_inst_expand[1U] = ls_cmd_form_inst_rx.u8_cab_addr;
 8000aa8:	4b26      	ldr	r3, [pc, #152]	; (8000b44 <v_prclcr_box_door_satus+0xac>)
 8000aaa:	785a      	ldrb	r2, [r3, #1]
 8000aac:	4b24      	ldr	r3, [pc, #144]	; (8000b40 <v_prclcr_box_door_satus+0xa8>)
 8000aae:	705a      	strb	r2, [r3, #1]
	lu8_cmd_form_inst_expand[2U] = ls_cmd_form_inst_rx.u8_box_num;
 8000ab0:	4b24      	ldr	r3, [pc, #144]	; (8000b44 <v_prclcr_box_door_satus+0xac>)
 8000ab2:	789a      	ldrb	r2, [r3, #2]
 8000ab4:	4b22      	ldr	r3, [pc, #136]	; (8000b40 <v_prclcr_box_door_satus+0xa8>)
 8000ab6:	709a      	strb	r2, [r3, #2]
	lu8_cmd_form_inst_expand[3U] = ls_cmd_form_inst_rx.u8_com_type;
 8000ab8:	4b22      	ldr	r3, [pc, #136]	; (8000b44 <v_prclcr_box_door_satus+0xac>)
 8000aba:	78da      	ldrb	r2, [r3, #3]
 8000abc:	4b20      	ldr	r3, [pc, #128]	; (8000b40 <v_prclcr_box_door_satus+0xa8>)
 8000abe:	70da      	strb	r2, [r3, #3]
	lu8_cmd_form_inst_expand[4U] = PRCLCR_NUM_OF_BOX_STATUS;
 8000ac0:	4b1f      	ldr	r3, [pc, #124]	; (8000b40 <v_prclcr_box_door_satus+0xa8>)
 8000ac2:	2203      	movs	r2, #3
 8000ac4:	711a      	strb	r2, [r3, #4]

	/* Set data of box_status to array. */
	for(i = 0; i < PRCLCR_NUM_OF_BOX_STATUS; i++)
 8000ac6:	1dfb      	adds	r3, r7, #7
 8000ac8:	2200      	movs	r2, #0
 8000aca:	701a      	strb	r2, [r3, #0]
 8000acc:	e014      	b.n	8000af8 <v_prclcr_box_door_satus+0x60>
	{
		lu8_cmd_form_inst_expand[5U + i] = lu8_box_status[ls_cmd_form_inst_rx.u8_cab_addr - 1U][i];
 8000ace:	4b1d      	ldr	r3, [pc, #116]	; (8000b44 <v_prclcr_box_door_satus+0xac>)
 8000ad0:	785b      	ldrb	r3, [r3, #1]
 8000ad2:	1e5a      	subs	r2, r3, #1
 8000ad4:	1dfb      	adds	r3, r7, #7
 8000ad6:	7818      	ldrb	r0, [r3, #0]
 8000ad8:	1dfb      	adds	r3, r7, #7
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	1d59      	adds	r1, r3, #5
 8000ade:	4c1a      	ldr	r4, [pc, #104]	; (8000b48 <v_prclcr_box_door_satus+0xb0>)
 8000ae0:	0013      	movs	r3, r2
 8000ae2:	005b      	lsls	r3, r3, #1
 8000ae4:	189b      	adds	r3, r3, r2
 8000ae6:	18e3      	adds	r3, r4, r3
 8000ae8:	5c1a      	ldrb	r2, [r3, r0]
 8000aea:	4b15      	ldr	r3, [pc, #84]	; (8000b40 <v_prclcr_box_door_satus+0xa8>)
 8000aec:	545a      	strb	r2, [r3, r1]
	for(i = 0; i < PRCLCR_NUM_OF_BOX_STATUS; i++)
 8000aee:	1dfb      	adds	r3, r7, #7
 8000af0:	781a      	ldrb	r2, [r3, #0]
 8000af2:	1dfb      	adds	r3, r7, #7
 8000af4:	3201      	adds	r2, #1
 8000af6:	701a      	strb	r2, [r3, #0]
 8000af8:	1dfb      	adds	r3, r7, #7
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	2b02      	cmp	r3, #2
 8000afe:	d9e6      	bls.n	8000ace <v_prclcr_box_door_satus+0x36>
	}

	/* Calculate new cs */
//TODO: It is written in the assignment that the slave should count cs (page 2, point 2 -> 1 CS :)
//TODO: but in the example of the answer (page 6) cs is not calculated but only forwarded.
	for(i = 0; i < (5U + PRCLCR_NUM_OF_BOX_STATUS); i++)
 8000b00:	1dfb      	adds	r3, r7, #7
 8000b02:	2200      	movs	r2, #0
 8000b04:	701a      	strb	r2, [r3, #0]
 8000b06:	e00c      	b.n	8000b22 <v_prclcr_box_door_satus+0x8a>
	{
		u32_packet_cs += lu8_cmd_form_inst_expand[i];
 8000b08:	1dfb      	adds	r3, r7, #7
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	4a0c      	ldr	r2, [pc, #48]	; (8000b40 <v_prclcr_box_door_satus+0xa8>)
 8000b0e:	5cd3      	ldrb	r3, [r2, r3]
 8000b10:	001a      	movs	r2, r3
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	189b      	adds	r3, r3, r2
 8000b16:	603b      	str	r3, [r7, #0]
	for(i = 0; i < (5U + PRCLCR_NUM_OF_BOX_STATUS); i++)
 8000b18:	1dfb      	adds	r3, r7, #7
 8000b1a:	781a      	ldrb	r2, [r3, #0]
 8000b1c:	1dfb      	adds	r3, r7, #7
 8000b1e:	3201      	adds	r2, #1
 8000b20:	701a      	strb	r2, [r3, #0]
 8000b22:	1dfb      	adds	r3, r7, #7
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	2b07      	cmp	r3, #7
 8000b28:	d9ee      	bls.n	8000b08 <v_prclcr_box_door_satus+0x70>
	}

	lu8_cmd_form_inst_expand[5U + PRCLCR_NUM_OF_BOX_STATUS] = (uint8_t)(u32_packet_cs & 0xFF);
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	b2da      	uxtb	r2, r3
 8000b2e:	4b04      	ldr	r3, [pc, #16]	; (8000b40 <v_prclcr_box_door_satus+0xa8>)
 8000b30:	721a      	strb	r2, [r3, #8]
	lu8_cmd_form_inst_expand[6U + PRCLCR_NUM_OF_BOX_STATUS] = PRCLCR_END_CMD;
 8000b32:	4b03      	ldr	r3, [pc, #12]	; (8000b40 <v_prclcr_box_door_satus+0xa8>)
 8000b34:	2216      	movs	r2, #22
 8000b36:	725a      	strb	r2, [r3, #9]
}
 8000b38:	46c0      	nop			; (mov r8, r8)
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	b003      	add	sp, #12
 8000b3e:	bd90      	pop	{r4, r7, pc}
 8000b40:	2000033c 	.word	0x2000033c
 8000b44:	20000034 	.word	0x20000034
 8000b48:	2000003c 	.word	0x2000003c

08000b4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b52:	4b11      	ldr	r3, [pc, #68]	; (8000b98 <HAL_MspInit+0x4c>)
 8000b54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b56:	4b10      	ldr	r3, [pc, #64]	; (8000b98 <HAL_MspInit+0x4c>)
 8000b58:	2101      	movs	r1, #1
 8000b5a:	430a      	orrs	r2, r1
 8000b5c:	641a      	str	r2, [r3, #64]	; 0x40
 8000b5e:	4b0e      	ldr	r3, [pc, #56]	; (8000b98 <HAL_MspInit+0x4c>)
 8000b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b62:	2201      	movs	r2, #1
 8000b64:	4013      	ands	r3, r2
 8000b66:	607b      	str	r3, [r7, #4]
 8000b68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b6a:	4b0b      	ldr	r3, [pc, #44]	; (8000b98 <HAL_MspInit+0x4c>)
 8000b6c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b6e:	4b0a      	ldr	r3, [pc, #40]	; (8000b98 <HAL_MspInit+0x4c>)
 8000b70:	2180      	movs	r1, #128	; 0x80
 8000b72:	0549      	lsls	r1, r1, #21
 8000b74:	430a      	orrs	r2, r1
 8000b76:	63da      	str	r2, [r3, #60]	; 0x3c
 8000b78:	4b07      	ldr	r3, [pc, #28]	; (8000b98 <HAL_MspInit+0x4c>)
 8000b7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b7c:	2380      	movs	r3, #128	; 0x80
 8000b7e:	055b      	lsls	r3, r3, #21
 8000b80:	4013      	ands	r3, r2
 8000b82:	603b      	str	r3, [r7, #0]
 8000b84:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8000b86:	23c0      	movs	r3, #192	; 0xc0
 8000b88:	00db      	lsls	r3, r3, #3
 8000b8a:	0018      	movs	r0, r3
 8000b8c:	f000 f98e 	bl	8000eac <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b90:	46c0      	nop			; (mov r8, r8)
 8000b92:	46bd      	mov	sp, r7
 8000b94:	b002      	add	sp, #8
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	40021000 	.word	0x40021000

08000b9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b9c:	b590      	push	{r4, r7, lr}
 8000b9e:	b08b      	sub	sp, #44	; 0x2c
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba4:	2414      	movs	r4, #20
 8000ba6:	193b      	adds	r3, r7, r4
 8000ba8:	0018      	movs	r0, r3
 8000baa:	2314      	movs	r3, #20
 8000bac:	001a      	movs	r2, r3
 8000bae:	2100      	movs	r1, #0
 8000bb0:	f002 fe9a 	bl	80038e8 <memset>
  if(huart->Instance==USART2)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a34      	ldr	r2, [pc, #208]	; (8000c8c <HAL_UART_MspInit+0xf0>)
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	d161      	bne.n	8000c82 <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bbe:	4b34      	ldr	r3, [pc, #208]	; (8000c90 <HAL_UART_MspInit+0xf4>)
 8000bc0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000bc2:	4b33      	ldr	r3, [pc, #204]	; (8000c90 <HAL_UART_MspInit+0xf4>)
 8000bc4:	2180      	movs	r1, #128	; 0x80
 8000bc6:	0289      	lsls	r1, r1, #10
 8000bc8:	430a      	orrs	r2, r1
 8000bca:	63da      	str	r2, [r3, #60]	; 0x3c
 8000bcc:	4b30      	ldr	r3, [pc, #192]	; (8000c90 <HAL_UART_MspInit+0xf4>)
 8000bce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000bd0:	2380      	movs	r3, #128	; 0x80
 8000bd2:	029b      	lsls	r3, r3, #10
 8000bd4:	4013      	ands	r3, r2
 8000bd6:	613b      	str	r3, [r7, #16]
 8000bd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bda:	4b2d      	ldr	r3, [pc, #180]	; (8000c90 <HAL_UART_MspInit+0xf4>)
 8000bdc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000bde:	4b2c      	ldr	r3, [pc, #176]	; (8000c90 <HAL_UART_MspInit+0xf4>)
 8000be0:	2101      	movs	r1, #1
 8000be2:	430a      	orrs	r2, r1
 8000be4:	635a      	str	r2, [r3, #52]	; 0x34
 8000be6:	4b2a      	ldr	r3, [pc, #168]	; (8000c90 <HAL_UART_MspInit+0xf4>)
 8000be8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bea:	2201      	movs	r2, #1
 8000bec:	4013      	ands	r3, r2
 8000bee:	60fb      	str	r3, [r7, #12]
 8000bf0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000bf2:	0021      	movs	r1, r4
 8000bf4:	187b      	adds	r3, r7, r1
 8000bf6:	220c      	movs	r2, #12
 8000bf8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfa:	187b      	adds	r3, r7, r1
 8000bfc:	2202      	movs	r2, #2
 8000bfe:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c00:	187b      	adds	r3, r7, r1
 8000c02:	2200      	movs	r2, #0
 8000c04:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c06:	187b      	adds	r3, r7, r1
 8000c08:	2200      	movs	r2, #0
 8000c0a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000c0c:	187b      	adds	r3, r7, r1
 8000c0e:	2201      	movs	r2, #1
 8000c10:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c12:	187a      	adds	r2, r7, r1
 8000c14:	23a0      	movs	r3, #160	; 0xa0
 8000c16:	05db      	lsls	r3, r3, #23
 8000c18:	0011      	movs	r1, r2
 8000c1a:	0018      	movs	r0, r3
 8000c1c:	f000 fd58 	bl	80016d0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel1;
 8000c20:	4b1c      	ldr	r3, [pc, #112]	; (8000c94 <HAL_UART_MspInit+0xf8>)
 8000c22:	4a1d      	ldr	r2, [pc, #116]	; (8000c98 <HAL_UART_MspInit+0xfc>)
 8000c24:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8000c26:	4b1b      	ldr	r3, [pc, #108]	; (8000c94 <HAL_UART_MspInit+0xf8>)
 8000c28:	2235      	movs	r2, #53	; 0x35
 8000c2a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c2c:	4b19      	ldr	r3, [pc, #100]	; (8000c94 <HAL_UART_MspInit+0xf8>)
 8000c2e:	2210      	movs	r2, #16
 8000c30:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c32:	4b18      	ldr	r3, [pc, #96]	; (8000c94 <HAL_UART_MspInit+0xf8>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000c38:	4b16      	ldr	r3, [pc, #88]	; (8000c94 <HAL_UART_MspInit+0xf8>)
 8000c3a:	2280      	movs	r2, #128	; 0x80
 8000c3c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c3e:	4b15      	ldr	r3, [pc, #84]	; (8000c94 <HAL_UART_MspInit+0xf8>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c44:	4b13      	ldr	r3, [pc, #76]	; (8000c94 <HAL_UART_MspInit+0xf8>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000c4a:	4b12      	ldr	r3, [pc, #72]	; (8000c94 <HAL_UART_MspInit+0xf8>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000c50:	4b10      	ldr	r3, [pc, #64]	; (8000c94 <HAL_UART_MspInit+0xf8>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000c56:	4b0f      	ldr	r3, [pc, #60]	; (8000c94 <HAL_UART_MspInit+0xf8>)
 8000c58:	0018      	movs	r0, r3
 8000c5a:	f000 fa1b 	bl	8001094 <HAL_DMA_Init>
 8000c5e:	1e03      	subs	r3, r0, #0
 8000c60:	d001      	beq.n	8000c66 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8000c62:	f7ff fcfd 	bl	8000660 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	4a0a      	ldr	r2, [pc, #40]	; (8000c94 <HAL_UART_MspInit+0xf8>)
 8000c6a:	679a      	str	r2, [r3, #120]	; 0x78
 8000c6c:	4b09      	ldr	r3, [pc, #36]	; (8000c94 <HAL_UART_MspInit+0xf8>)
 8000c6e:	687a      	ldr	r2, [r7, #4]
 8000c70:	629a      	str	r2, [r3, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000c72:	2200      	movs	r2, #0
 8000c74:	2100      	movs	r1, #0
 8000c76:	201c      	movs	r0, #28
 8000c78:	f000 f9da 	bl	8001030 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000c7c:	201c      	movs	r0, #28
 8000c7e:	f000 f9ec 	bl	800105a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c82:	46c0      	nop			; (mov r8, r8)
 8000c84:	46bd      	mov	sp, r7
 8000c86:	b00b      	add	sp, #44	; 0x2c
 8000c88:	bd90      	pop	{r4, r7, pc}
 8000c8a:	46c0      	nop			; (mov r8, r8)
 8000c8c:	40004400 	.word	0x40004400
 8000c90:	40021000 	.word	0x40021000
 8000c94:	20000350 	.word	0x20000350
 8000c98:	40020008 	.word	0x40020008

08000c9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ca0:	e7fe      	b.n	8000ca0 <NMI_Handler+0x4>

08000ca2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ca2:	b580      	push	{r7, lr}
 8000ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ca6:	e7fe      	b.n	8000ca6 <HardFault_Handler+0x4>

08000ca8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000cac:	46c0      	nop			; (mov r8, r8)
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}

08000cb2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cb2:	b580      	push	{r7, lr}
 8000cb4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cb6:	46c0      	nop			; (mov r8, r8)
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}

08000cbc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cc0:	f000 f8bc 	bl	8000e3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cc4:	46c0      	nop			; (mov r8, r8)
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
	...

08000ccc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000cd0:	4b03      	ldr	r3, [pc, #12]	; (8000ce0 <DMA1_Channel1_IRQHandler+0x14>)
 8000cd2:	0018      	movs	r0, r3
 8000cd4:	f000 fbba 	bl	800144c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000cd8:	46c0      	nop			; (mov r8, r8)
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	46c0      	nop			; (mov r8, r8)
 8000ce0:	20000350 	.word	0x20000350

08000ce4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000ce8:	4b03      	ldr	r3, [pc, #12]	; (8000cf8 <USART2_IRQHandler+0x14>)
 8000cea:	0018      	movs	r0, r3
 8000cec:	f001 fe16 	bl	800291c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000cf0:	46c0      	nop			; (mov r8, r8)
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	46c0      	nop			; (mov r8, r8)
 8000cf8:	200003ac 	.word	0x200003ac

08000cfc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d00:	4b03      	ldr	r3, [pc, #12]	; (8000d10 <SystemInit+0x14>)
 8000d02:	2280      	movs	r2, #128	; 0x80
 8000d04:	0512      	lsls	r2, r2, #20
 8000d06:	609a      	str	r2, [r3, #8]
#endif
}
 8000d08:	46c0      	nop			; (mov r8, r8)
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	46c0      	nop			; (mov r8, r8)
 8000d10:	e000ed00 	.word	0xe000ed00

08000d14 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d14:	480d      	ldr	r0, [pc, #52]	; (8000d4c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d16:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d18:	f7ff fff0 	bl	8000cfc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d1c:	480c      	ldr	r0, [pc, #48]	; (8000d50 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d1e:	490d      	ldr	r1, [pc, #52]	; (8000d54 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d20:	4a0d      	ldr	r2, [pc, #52]	; (8000d58 <LoopForever+0xe>)
  movs r3, #0
 8000d22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d24:	e002      	b.n	8000d2c <LoopCopyDataInit>

08000d26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d2a:	3304      	adds	r3, #4

08000d2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d30:	d3f9      	bcc.n	8000d26 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d32:	4a0a      	ldr	r2, [pc, #40]	; (8000d5c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d34:	4c0a      	ldr	r4, [pc, #40]	; (8000d60 <LoopForever+0x16>)
  movs r3, #0
 8000d36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d38:	e001      	b.n	8000d3e <LoopFillZerobss>

08000d3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d3c:	3204      	adds	r2, #4

08000d3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d40:	d3fb      	bcc.n	8000d3a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000d42:	f002 fdad 	bl	80038a0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000d46:	f7ff fb51 	bl	80003ec <main>

08000d4a <LoopForever>:

LoopForever:
  b LoopForever
 8000d4a:	e7fe      	b.n	8000d4a <LoopForever>
  ldr   r0, =_estack
 8000d4c:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000d50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d54:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000d58:	080039e0 	.word	0x080039e0
  ldr r2, =_sbss
 8000d5c:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000d60:	20000440 	.word	0x20000440

08000d64 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d64:	e7fe      	b.n	8000d64 <ADC1_IRQHandler>
	...

08000d68 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d6e:	1dfb      	adds	r3, r7, #7
 8000d70:	2200      	movs	r2, #0
 8000d72:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d74:	4b0b      	ldr	r3, [pc, #44]	; (8000da4 <HAL_Init+0x3c>)
 8000d76:	681a      	ldr	r2, [r3, #0]
 8000d78:	4b0a      	ldr	r3, [pc, #40]	; (8000da4 <HAL_Init+0x3c>)
 8000d7a:	2180      	movs	r1, #128	; 0x80
 8000d7c:	0049      	lsls	r1, r1, #1
 8000d7e:	430a      	orrs	r2, r1
 8000d80:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d82:	2000      	movs	r0, #0
 8000d84:	f000 f810 	bl	8000da8 <HAL_InitTick>
 8000d88:	1e03      	subs	r3, r0, #0
 8000d8a:	d003      	beq.n	8000d94 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000d8c:	1dfb      	adds	r3, r7, #7
 8000d8e:	2201      	movs	r2, #1
 8000d90:	701a      	strb	r2, [r3, #0]
 8000d92:	e001      	b.n	8000d98 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000d94:	f7ff feda 	bl	8000b4c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d98:	1dfb      	adds	r3, r7, #7
 8000d9a:	781b      	ldrb	r3, [r3, #0]
}
 8000d9c:	0018      	movs	r0, r3
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	b002      	add	sp, #8
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	40022000 	.word	0x40022000

08000da8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000da8:	b590      	push	{r4, r7, lr}
 8000daa:	b085      	sub	sp, #20
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000db0:	230f      	movs	r3, #15
 8000db2:	18fb      	adds	r3, r7, r3
 8000db4:	2200      	movs	r2, #0
 8000db6:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000db8:	4b1d      	ldr	r3, [pc, #116]	; (8000e30 <HAL_InitTick+0x88>)
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d02b      	beq.n	8000e18 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000dc0:	4b1c      	ldr	r3, [pc, #112]	; (8000e34 <HAL_InitTick+0x8c>)
 8000dc2:	681c      	ldr	r4, [r3, #0]
 8000dc4:	4b1a      	ldr	r3, [pc, #104]	; (8000e30 <HAL_InitTick+0x88>)
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	0019      	movs	r1, r3
 8000dca:	23fa      	movs	r3, #250	; 0xfa
 8000dcc:	0098      	lsls	r0, r3, #2
 8000dce:	f7ff f997 	bl	8000100 <__udivsi3>
 8000dd2:	0003      	movs	r3, r0
 8000dd4:	0019      	movs	r1, r3
 8000dd6:	0020      	movs	r0, r4
 8000dd8:	f7ff f992 	bl	8000100 <__udivsi3>
 8000ddc:	0003      	movs	r3, r0
 8000dde:	0018      	movs	r0, r3
 8000de0:	f000 f94b 	bl	800107a <HAL_SYSTICK_Config>
 8000de4:	1e03      	subs	r3, r0, #0
 8000de6:	d112      	bne.n	8000e0e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	2b03      	cmp	r3, #3
 8000dec:	d80a      	bhi.n	8000e04 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dee:	6879      	ldr	r1, [r7, #4]
 8000df0:	2301      	movs	r3, #1
 8000df2:	425b      	negs	r3, r3
 8000df4:	2200      	movs	r2, #0
 8000df6:	0018      	movs	r0, r3
 8000df8:	f000 f91a 	bl	8001030 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000dfc:	4b0e      	ldr	r3, [pc, #56]	; (8000e38 <HAL_InitTick+0x90>)
 8000dfe:	687a      	ldr	r2, [r7, #4]
 8000e00:	601a      	str	r2, [r3, #0]
 8000e02:	e00d      	b.n	8000e20 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000e04:	230f      	movs	r3, #15
 8000e06:	18fb      	adds	r3, r7, r3
 8000e08:	2201      	movs	r2, #1
 8000e0a:	701a      	strb	r2, [r3, #0]
 8000e0c:	e008      	b.n	8000e20 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e0e:	230f      	movs	r3, #15
 8000e10:	18fb      	adds	r3, r7, r3
 8000e12:	2201      	movs	r2, #1
 8000e14:	701a      	strb	r2, [r3, #0]
 8000e16:	e003      	b.n	8000e20 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e18:	230f      	movs	r3, #15
 8000e1a:	18fb      	adds	r3, r7, r3
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000e20:	230f      	movs	r3, #15
 8000e22:	18fb      	adds	r3, r7, r3
 8000e24:	781b      	ldrb	r3, [r3, #0]
}
 8000e26:	0018      	movs	r0, r3
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	b005      	add	sp, #20
 8000e2c:	bd90      	pop	{r4, r7, pc}
 8000e2e:	46c0      	nop			; (mov r8, r8)
 8000e30:	20000014 	.word	0x20000014
 8000e34:	2000000c 	.word	0x2000000c
 8000e38:	20000010 	.word	0x20000010

08000e3c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e40:	4b05      	ldr	r3, [pc, #20]	; (8000e58 <HAL_IncTick+0x1c>)
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	001a      	movs	r2, r3
 8000e46:	4b05      	ldr	r3, [pc, #20]	; (8000e5c <HAL_IncTick+0x20>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	18d2      	adds	r2, r2, r3
 8000e4c:	4b03      	ldr	r3, [pc, #12]	; (8000e5c <HAL_IncTick+0x20>)
 8000e4e:	601a      	str	r2, [r3, #0]
}
 8000e50:	46c0      	nop			; (mov r8, r8)
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	46c0      	nop			; (mov r8, r8)
 8000e58:	20000014 	.word	0x20000014
 8000e5c:	2000043c 	.word	0x2000043c

08000e60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
  return uwTick;
 8000e64:	4b02      	ldr	r3, [pc, #8]	; (8000e70 <HAL_GetTick+0x10>)
 8000e66:	681b      	ldr	r3, [r3, #0]
}
 8000e68:	0018      	movs	r0, r3
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	46c0      	nop			; (mov r8, r8)
 8000e70:	2000043c 	.word	0x2000043c

08000e74 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 8000e78:	4b04      	ldr	r3, [pc, #16]	; (8000e8c <HAL_SuspendTick+0x18>)
 8000e7a:	681a      	ldr	r2, [r3, #0]
 8000e7c:	4b03      	ldr	r3, [pc, #12]	; (8000e8c <HAL_SuspendTick+0x18>)
 8000e7e:	2102      	movs	r1, #2
 8000e80:	438a      	bics	r2, r1
 8000e82:	601a      	str	r2, [r3, #0]
}
 8000e84:	46c0      	nop			; (mov r8, r8)
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	46c0      	nop			; (mov r8, r8)
 8000e8c:	e000e010 	.word	0xe000e010

08000e90 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8000e94:	4b04      	ldr	r3, [pc, #16]	; (8000ea8 <HAL_ResumeTick+0x18>)
 8000e96:	681a      	ldr	r2, [r3, #0]
 8000e98:	4b03      	ldr	r3, [pc, #12]	; (8000ea8 <HAL_ResumeTick+0x18>)
 8000e9a:	2102      	movs	r1, #2
 8000e9c:	430a      	orrs	r2, r1
 8000e9e:	601a      	str	r2, [r3, #0]
}
 8000ea0:	46c0      	nop			; (mov r8, r8)
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	46c0      	nop			; (mov r8, r8)
 8000ea8:	e000e010 	.word	0xe000e010

08000eac <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8000eb4:	4b06      	ldr	r3, [pc, #24]	; (8000ed0 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a06      	ldr	r2, [pc, #24]	; (8000ed4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8000eba:	4013      	ands	r3, r2
 8000ebc:	0019      	movs	r1, r3
 8000ebe:	4b04      	ldr	r3, [pc, #16]	; (8000ed0 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000ec0:	687a      	ldr	r2, [r7, #4]
 8000ec2:	430a      	orrs	r2, r1
 8000ec4:	601a      	str	r2, [r3, #0]
}
 8000ec6:	46c0      	nop			; (mov r8, r8)
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	b002      	add	sp, #8
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	46c0      	nop			; (mov r8, r8)
 8000ed0:	40010000 	.word	0x40010000
 8000ed4:	fffff9ff 	.word	0xfffff9ff

08000ed8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	0002      	movs	r2, r0
 8000ee0:	1dfb      	adds	r3, r7, #7
 8000ee2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000ee4:	1dfb      	adds	r3, r7, #7
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	2b7f      	cmp	r3, #127	; 0x7f
 8000eea:	d809      	bhi.n	8000f00 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eec:	1dfb      	adds	r3, r7, #7
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	001a      	movs	r2, r3
 8000ef2:	231f      	movs	r3, #31
 8000ef4:	401a      	ands	r2, r3
 8000ef6:	4b04      	ldr	r3, [pc, #16]	; (8000f08 <__NVIC_EnableIRQ+0x30>)
 8000ef8:	2101      	movs	r1, #1
 8000efa:	4091      	lsls	r1, r2
 8000efc:	000a      	movs	r2, r1
 8000efe:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000f00:	46c0      	nop			; (mov r8, r8)
 8000f02:	46bd      	mov	sp, r7
 8000f04:	b002      	add	sp, #8
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	e000e100 	.word	0xe000e100

08000f0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f0c:	b590      	push	{r4, r7, lr}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	0002      	movs	r2, r0
 8000f14:	6039      	str	r1, [r7, #0]
 8000f16:	1dfb      	adds	r3, r7, #7
 8000f18:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000f1a:	1dfb      	adds	r3, r7, #7
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	2b7f      	cmp	r3, #127	; 0x7f
 8000f20:	d828      	bhi.n	8000f74 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f22:	4a2f      	ldr	r2, [pc, #188]	; (8000fe0 <__NVIC_SetPriority+0xd4>)
 8000f24:	1dfb      	adds	r3, r7, #7
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	b25b      	sxtb	r3, r3
 8000f2a:	089b      	lsrs	r3, r3, #2
 8000f2c:	33c0      	adds	r3, #192	; 0xc0
 8000f2e:	009b      	lsls	r3, r3, #2
 8000f30:	589b      	ldr	r3, [r3, r2]
 8000f32:	1dfa      	adds	r2, r7, #7
 8000f34:	7812      	ldrb	r2, [r2, #0]
 8000f36:	0011      	movs	r1, r2
 8000f38:	2203      	movs	r2, #3
 8000f3a:	400a      	ands	r2, r1
 8000f3c:	00d2      	lsls	r2, r2, #3
 8000f3e:	21ff      	movs	r1, #255	; 0xff
 8000f40:	4091      	lsls	r1, r2
 8000f42:	000a      	movs	r2, r1
 8000f44:	43d2      	mvns	r2, r2
 8000f46:	401a      	ands	r2, r3
 8000f48:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	019b      	lsls	r3, r3, #6
 8000f4e:	22ff      	movs	r2, #255	; 0xff
 8000f50:	401a      	ands	r2, r3
 8000f52:	1dfb      	adds	r3, r7, #7
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	0018      	movs	r0, r3
 8000f58:	2303      	movs	r3, #3
 8000f5a:	4003      	ands	r3, r0
 8000f5c:	00db      	lsls	r3, r3, #3
 8000f5e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f60:	481f      	ldr	r0, [pc, #124]	; (8000fe0 <__NVIC_SetPriority+0xd4>)
 8000f62:	1dfb      	adds	r3, r7, #7
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	b25b      	sxtb	r3, r3
 8000f68:	089b      	lsrs	r3, r3, #2
 8000f6a:	430a      	orrs	r2, r1
 8000f6c:	33c0      	adds	r3, #192	; 0xc0
 8000f6e:	009b      	lsls	r3, r3, #2
 8000f70:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000f72:	e031      	b.n	8000fd8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f74:	4a1b      	ldr	r2, [pc, #108]	; (8000fe4 <__NVIC_SetPriority+0xd8>)
 8000f76:	1dfb      	adds	r3, r7, #7
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	0019      	movs	r1, r3
 8000f7c:	230f      	movs	r3, #15
 8000f7e:	400b      	ands	r3, r1
 8000f80:	3b08      	subs	r3, #8
 8000f82:	089b      	lsrs	r3, r3, #2
 8000f84:	3306      	adds	r3, #6
 8000f86:	009b      	lsls	r3, r3, #2
 8000f88:	18d3      	adds	r3, r2, r3
 8000f8a:	3304      	adds	r3, #4
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	1dfa      	adds	r2, r7, #7
 8000f90:	7812      	ldrb	r2, [r2, #0]
 8000f92:	0011      	movs	r1, r2
 8000f94:	2203      	movs	r2, #3
 8000f96:	400a      	ands	r2, r1
 8000f98:	00d2      	lsls	r2, r2, #3
 8000f9a:	21ff      	movs	r1, #255	; 0xff
 8000f9c:	4091      	lsls	r1, r2
 8000f9e:	000a      	movs	r2, r1
 8000fa0:	43d2      	mvns	r2, r2
 8000fa2:	401a      	ands	r2, r3
 8000fa4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	019b      	lsls	r3, r3, #6
 8000faa:	22ff      	movs	r2, #255	; 0xff
 8000fac:	401a      	ands	r2, r3
 8000fae:	1dfb      	adds	r3, r7, #7
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	0018      	movs	r0, r3
 8000fb4:	2303      	movs	r3, #3
 8000fb6:	4003      	ands	r3, r0
 8000fb8:	00db      	lsls	r3, r3, #3
 8000fba:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fbc:	4809      	ldr	r0, [pc, #36]	; (8000fe4 <__NVIC_SetPriority+0xd8>)
 8000fbe:	1dfb      	adds	r3, r7, #7
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	001c      	movs	r4, r3
 8000fc4:	230f      	movs	r3, #15
 8000fc6:	4023      	ands	r3, r4
 8000fc8:	3b08      	subs	r3, #8
 8000fca:	089b      	lsrs	r3, r3, #2
 8000fcc:	430a      	orrs	r2, r1
 8000fce:	3306      	adds	r3, #6
 8000fd0:	009b      	lsls	r3, r3, #2
 8000fd2:	18c3      	adds	r3, r0, r3
 8000fd4:	3304      	adds	r3, #4
 8000fd6:	601a      	str	r2, [r3, #0]
}
 8000fd8:	46c0      	nop			; (mov r8, r8)
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	b003      	add	sp, #12
 8000fde:	bd90      	pop	{r4, r7, pc}
 8000fe0:	e000e100 	.word	0xe000e100
 8000fe4:	e000ed00 	.word	0xe000ed00

08000fe8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	1e5a      	subs	r2, r3, #1
 8000ff4:	2380      	movs	r3, #128	; 0x80
 8000ff6:	045b      	lsls	r3, r3, #17
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	d301      	bcc.n	8001000 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	e010      	b.n	8001022 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001000:	4b0a      	ldr	r3, [pc, #40]	; (800102c <SysTick_Config+0x44>)
 8001002:	687a      	ldr	r2, [r7, #4]
 8001004:	3a01      	subs	r2, #1
 8001006:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001008:	2301      	movs	r3, #1
 800100a:	425b      	negs	r3, r3
 800100c:	2103      	movs	r1, #3
 800100e:	0018      	movs	r0, r3
 8001010:	f7ff ff7c 	bl	8000f0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001014:	4b05      	ldr	r3, [pc, #20]	; (800102c <SysTick_Config+0x44>)
 8001016:	2200      	movs	r2, #0
 8001018:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800101a:	4b04      	ldr	r3, [pc, #16]	; (800102c <SysTick_Config+0x44>)
 800101c:	2207      	movs	r2, #7
 800101e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001020:	2300      	movs	r3, #0
}
 8001022:	0018      	movs	r0, r3
 8001024:	46bd      	mov	sp, r7
 8001026:	b002      	add	sp, #8
 8001028:	bd80      	pop	{r7, pc}
 800102a:	46c0      	nop			; (mov r8, r8)
 800102c:	e000e010 	.word	0xe000e010

08001030 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0
 8001036:	60b9      	str	r1, [r7, #8]
 8001038:	607a      	str	r2, [r7, #4]
 800103a:	210f      	movs	r1, #15
 800103c:	187b      	adds	r3, r7, r1
 800103e:	1c02      	adds	r2, r0, #0
 8001040:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001042:	68ba      	ldr	r2, [r7, #8]
 8001044:	187b      	adds	r3, r7, r1
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	b25b      	sxtb	r3, r3
 800104a:	0011      	movs	r1, r2
 800104c:	0018      	movs	r0, r3
 800104e:	f7ff ff5d 	bl	8000f0c <__NVIC_SetPriority>
}
 8001052:	46c0      	nop			; (mov r8, r8)
 8001054:	46bd      	mov	sp, r7
 8001056:	b004      	add	sp, #16
 8001058:	bd80      	pop	{r7, pc}

0800105a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800105a:	b580      	push	{r7, lr}
 800105c:	b082      	sub	sp, #8
 800105e:	af00      	add	r7, sp, #0
 8001060:	0002      	movs	r2, r0
 8001062:	1dfb      	adds	r3, r7, #7
 8001064:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001066:	1dfb      	adds	r3, r7, #7
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	b25b      	sxtb	r3, r3
 800106c:	0018      	movs	r0, r3
 800106e:	f7ff ff33 	bl	8000ed8 <__NVIC_EnableIRQ>
}
 8001072:	46c0      	nop			; (mov r8, r8)
 8001074:	46bd      	mov	sp, r7
 8001076:	b002      	add	sp, #8
 8001078:	bd80      	pop	{r7, pc}

0800107a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800107a:	b580      	push	{r7, lr}
 800107c:	b082      	sub	sp, #8
 800107e:	af00      	add	r7, sp, #0
 8001080:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	0018      	movs	r0, r3
 8001086:	f7ff ffaf 	bl	8000fe8 <SysTick_Config>
 800108a:	0003      	movs	r3, r0
}
 800108c:	0018      	movs	r0, r3
 800108e:	46bd      	mov	sp, r7
 8001090:	b002      	add	sp, #8
 8001092:	bd80      	pop	{r7, pc}

08001094 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d101      	bne.n	80010a6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80010a2:	2301      	movs	r3, #1
 80010a4:	e077      	b.n	8001196 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4a3d      	ldr	r2, [pc, #244]	; (80011a0 <HAL_DMA_Init+0x10c>)
 80010ac:	4694      	mov	ip, r2
 80010ae:	4463      	add	r3, ip
 80010b0:	2114      	movs	r1, #20
 80010b2:	0018      	movs	r0, r3
 80010b4:	f7ff f824 	bl	8000100 <__udivsi3>
 80010b8:	0003      	movs	r3, r0
 80010ba:	009a      	lsls	r2, r3, #2
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	641a      	str	r2, [r3, #64]	; 0x40
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2225      	movs	r2, #37	; 0x25
 80010c4:	2102      	movs	r1, #2
 80010c6:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4934      	ldr	r1, [pc, #208]	; (80011a4 <HAL_DMA_Init+0x110>)
 80010d4:	400a      	ands	r2, r1
 80010d6:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	6819      	ldr	r1, [r3, #0]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	689a      	ldr	r2, [r3, #8]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	68db      	ldr	r3, [r3, #12]
 80010e6:	431a      	orrs	r2, r3
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	691b      	ldr	r3, [r3, #16]
 80010ec:	431a      	orrs	r2, r3
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	695b      	ldr	r3, [r3, #20]
 80010f2:	431a      	orrs	r2, r3
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	699b      	ldr	r3, [r3, #24]
 80010f8:	431a      	orrs	r2, r3
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	69db      	ldr	r3, [r3, #28]
 80010fe:	431a      	orrs	r2, r3
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6a1b      	ldr	r3, [r3, #32]
 8001104:	431a      	orrs	r2, r3
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	430a      	orrs	r2, r1
 800110c:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	0018      	movs	r0, r3
 8001112:	f000 fa8d 	bl	8001630 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	689a      	ldr	r2, [r3, #8]
 800111a:	2380      	movs	r3, #128	; 0x80
 800111c:	01db      	lsls	r3, r3, #7
 800111e:	429a      	cmp	r2, r3
 8001120:	d102      	bne.n	8001128 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2200      	movs	r2, #0
 8001126:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	685a      	ldr	r2, [r3, #4]
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001130:	213f      	movs	r1, #63	; 0x3f
 8001132:	400a      	ands	r2, r1
 8001134:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800113a:	687a      	ldr	r2, [r7, #4]
 800113c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800113e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d011      	beq.n	800116c <HAL_DMA_Init+0xd8>
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	2b04      	cmp	r3, #4
 800114e:	d80d      	bhi.n	800116c <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	0018      	movs	r0, r3
 8001154:	f000 fa98 	bl	8001688 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001164:	687a      	ldr	r2, [r7, #4]
 8001166:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001168:	605a      	str	r2, [r3, #4]
 800116a:	e008      	b.n	800117e <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2200      	movs	r2, #0
 8001170:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2200      	movs	r2, #0
 8001176:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2200      	movs	r2, #0
 800117c:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2200      	movs	r2, #0
 8001182:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2225      	movs	r2, #37	; 0x25
 8001188:	2101      	movs	r1, #1
 800118a:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2224      	movs	r2, #36	; 0x24
 8001190:	2100      	movs	r1, #0
 8001192:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001194:	2300      	movs	r3, #0
}
 8001196:	0018      	movs	r0, r3
 8001198:	46bd      	mov	sp, r7
 800119a:	b002      	add	sp, #8
 800119c:	bd80      	pop	{r7, pc}
 800119e:	46c0      	nop			; (mov r8, r8)
 80011a0:	bffdfff8 	.word	0xbffdfff8
 80011a4:	ffff800f 	.word	0xffff800f

080011a8 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b086      	sub	sp, #24
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	60f8      	str	r0, [r7, #12]
 80011b0:	60b9      	str	r1, [r7, #8]
 80011b2:	607a      	str	r2, [r7, #4]
 80011b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80011b6:	2317      	movs	r3, #23
 80011b8:	18fb      	adds	r3, r7, r3
 80011ba:	2200      	movs	r2, #0
 80011bc:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	2224      	movs	r2, #36	; 0x24
 80011c2:	5c9b      	ldrb	r3, [r3, r2]
 80011c4:	2b01      	cmp	r3, #1
 80011c6:	d101      	bne.n	80011cc <HAL_DMA_Start_IT+0x24>
 80011c8:	2302      	movs	r3, #2
 80011ca:	e06f      	b.n	80012ac <HAL_DMA_Start_IT+0x104>
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	2224      	movs	r2, #36	; 0x24
 80011d0:	2101      	movs	r1, #1
 80011d2:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	2225      	movs	r2, #37	; 0x25
 80011d8:	5c9b      	ldrb	r3, [r3, r2]
 80011da:	b2db      	uxtb	r3, r3
 80011dc:	2b01      	cmp	r3, #1
 80011de:	d157      	bne.n	8001290 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	2225      	movs	r2, #37	; 0x25
 80011e4:	2102      	movs	r1, #2
 80011e6:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	2200      	movs	r2, #0
 80011ec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	2101      	movs	r1, #1
 80011fa:	438a      	bics	r2, r1
 80011fc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	687a      	ldr	r2, [r7, #4]
 8001202:	68b9      	ldr	r1, [r7, #8]
 8001204:	68f8      	ldr	r0, [r7, #12]
 8001206:	f000 f9d3 	bl	80015b0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120e:	2b00      	cmp	r3, #0
 8001210:	d008      	beq.n	8001224 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	681a      	ldr	r2, [r3, #0]
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	210e      	movs	r1, #14
 800121e:	430a      	orrs	r2, r1
 8001220:	601a      	str	r2, [r3, #0]
 8001222:	e00f      	b.n	8001244 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	2104      	movs	r1, #4
 8001230:	438a      	bics	r2, r1
 8001232:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	210a      	movs	r1, #10
 8001240:	430a      	orrs	r2, r1
 8001242:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	2380      	movs	r3, #128	; 0x80
 800124c:	025b      	lsls	r3, r3, #9
 800124e:	4013      	ands	r3, r2
 8001250:	d008      	beq.n	8001264 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800125c:	2180      	movs	r1, #128	; 0x80
 800125e:	0049      	lsls	r1, r1, #1
 8001260:	430a      	orrs	r2, r1
 8001262:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001268:	2b00      	cmp	r3, #0
 800126a:	d008      	beq.n	800127e <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001276:	2180      	movs	r1, #128	; 0x80
 8001278:	0049      	lsls	r1, r1, #1
 800127a:	430a      	orrs	r2, r1
 800127c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	681a      	ldr	r2, [r3, #0]
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	2101      	movs	r1, #1
 800128a:	430a      	orrs	r2, r1
 800128c:	601a      	str	r2, [r3, #0]
 800128e:	e00a      	b.n	80012a6 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	2280      	movs	r2, #128	; 0x80
 8001294:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	2224      	movs	r2, #36	; 0x24
 800129a:	2100      	movs	r1, #0
 800129c:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 800129e:	2317      	movs	r3, #23
 80012a0:	18fb      	adds	r3, r7, r3
 80012a2:	2201      	movs	r2, #1
 80012a4:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80012a6:	2317      	movs	r3, #23
 80012a8:	18fb      	adds	r3, r7, r3
 80012aa:	781b      	ldrb	r3, [r3, #0]
}
 80012ac:	0018      	movs	r0, r3
 80012ae:	46bd      	mov	sp, r7
 80012b0:	b006      	add	sp, #24
 80012b2:	bd80      	pop	{r7, pc}

080012b4 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d101      	bne.n	80012c6 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80012c2:	2301      	movs	r3, #1
 80012c4:	e050      	b.n	8001368 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2225      	movs	r2, #37	; 0x25
 80012ca:	5c9b      	ldrb	r3, [r3, r2]
 80012cc:	b2db      	uxtb	r3, r3
 80012ce:	2b02      	cmp	r3, #2
 80012d0:	d008      	beq.n	80012e4 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2204      	movs	r2, #4
 80012d6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2224      	movs	r2, #36	; 0x24
 80012dc:	2100      	movs	r1, #0
 80012de:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80012e0:	2301      	movs	r3, #1
 80012e2:	e041      	b.n	8001368 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	210e      	movs	r1, #14
 80012f0:	438a      	bics	r2, r1
 80012f2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012fe:	491c      	ldr	r1, [pc, #112]	; (8001370 <HAL_DMA_Abort+0xbc>)
 8001300:	400a      	ands	r2, r1
 8001302:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	2101      	movs	r1, #1
 8001310:	438a      	bics	r2, r1
 8001312:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8001314:	4b17      	ldr	r3, [pc, #92]	; (8001374 <HAL_DMA_Abort+0xc0>)
 8001316:	6859      	ldr	r1, [r3, #4]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131c:	221c      	movs	r2, #28
 800131e:	4013      	ands	r3, r2
 8001320:	2201      	movs	r2, #1
 8001322:	409a      	lsls	r2, r3
 8001324:	4b13      	ldr	r3, [pc, #76]	; (8001374 <HAL_DMA_Abort+0xc0>)
 8001326:	430a      	orrs	r2, r1
 8001328:	605a      	str	r2, [r3, #4]
#endif

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800132e:	687a      	ldr	r2, [r7, #4]
 8001330:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001332:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001338:	2b00      	cmp	r3, #0
 800133a:	d00c      	beq.n	8001356 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001346:	490a      	ldr	r1, [pc, #40]	; (8001370 <HAL_DMA_Abort+0xbc>)
 8001348:	400a      	ands	r2, r1
 800134a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001350:	687a      	ldr	r2, [r7, #4]
 8001352:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001354:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2225      	movs	r2, #37	; 0x25
 800135a:	2101      	movs	r1, #1
 800135c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2224      	movs	r2, #36	; 0x24
 8001362:	2100      	movs	r1, #0
 8001364:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8001366:	2300      	movs	r3, #0
}
 8001368:	0018      	movs	r0, r3
 800136a:	46bd      	mov	sp, r7
 800136c:	b002      	add	sp, #8
 800136e:	bd80      	pop	{r7, pc}
 8001370:	fffffeff 	.word	0xfffffeff
 8001374:	40020000 	.word	0x40020000

08001378 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b084      	sub	sp, #16
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001380:	210f      	movs	r1, #15
 8001382:	187b      	adds	r3, r7, r1
 8001384:	2200      	movs	r2, #0
 8001386:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2225      	movs	r2, #37	; 0x25
 800138c:	5c9b      	ldrb	r3, [r3, r2]
 800138e:	b2db      	uxtb	r3, r3
 8001390:	2b02      	cmp	r3, #2
 8001392:	d006      	beq.n	80013a2 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2204      	movs	r2, #4
 8001398:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800139a:	187b      	adds	r3, r7, r1
 800139c:	2201      	movs	r2, #1
 800139e:	701a      	strb	r2, [r3, #0]
 80013a0:	e049      	b.n	8001436 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	210e      	movs	r1, #14
 80013ae:	438a      	bics	r2, r1
 80013b0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	2101      	movs	r1, #1
 80013be:	438a      	bics	r2, r1
 80013c0:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013cc:	491d      	ldr	r1, [pc, #116]	; (8001444 <HAL_DMA_Abort_IT+0xcc>)
 80013ce:	400a      	ands	r2, r1
 80013d0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 80013d2:	4b1d      	ldr	r3, [pc, #116]	; (8001448 <HAL_DMA_Abort_IT+0xd0>)
 80013d4:	6859      	ldr	r1, [r3, #4]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013da:	221c      	movs	r2, #28
 80013dc:	4013      	ands	r3, r2
 80013de:	2201      	movs	r2, #1
 80013e0:	409a      	lsls	r2, r3
 80013e2:	4b19      	ldr	r3, [pc, #100]	; (8001448 <HAL_DMA_Abort_IT+0xd0>)
 80013e4:	430a      	orrs	r2, r1
 80013e6:	605a      	str	r2, [r3, #4]
#endif

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013ec:	687a      	ldr	r2, [r7, #4]
 80013ee:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80013f0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d00c      	beq.n	8001414 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001404:	490f      	ldr	r1, [pc, #60]	; (8001444 <HAL_DMA_Abort_IT+0xcc>)
 8001406:	400a      	ands	r2, r1
 8001408:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800140e:	687a      	ldr	r2, [r7, #4]
 8001410:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001412:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2225      	movs	r2, #37	; 0x25
 8001418:	2101      	movs	r1, #1
 800141a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2224      	movs	r2, #36	; 0x24
 8001420:	2100      	movs	r1, #0
 8001422:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001428:	2b00      	cmp	r3, #0
 800142a:	d004      	beq.n	8001436 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001430:	687a      	ldr	r2, [r7, #4]
 8001432:	0010      	movs	r0, r2
 8001434:	4798      	blx	r3
    }
  }
  return status;
 8001436:	230f      	movs	r3, #15
 8001438:	18fb      	adds	r3, r7, r3
 800143a:	781b      	ldrb	r3, [r3, #0]
}
 800143c:	0018      	movs	r0, r3
 800143e:	46bd      	mov	sp, r7
 8001440:	b004      	add	sp, #16
 8001442:	bd80      	pop	{r7, pc}
 8001444:	fffffeff 	.word	0xfffffeff
 8001448:	40020000 	.word	0x40020000

0800144c <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b084      	sub	sp, #16
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8001454:	4b55      	ldr	r3, [pc, #340]	; (80015ac <HAL_DMA_IRQHandler+0x160>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t source_it = hdma->Instance->CCR;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001466:	221c      	movs	r2, #28
 8001468:	4013      	ands	r3, r2
 800146a:	2204      	movs	r2, #4
 800146c:	409a      	lsls	r2, r3
 800146e:	0013      	movs	r3, r2
 8001470:	68fa      	ldr	r2, [r7, #12]
 8001472:	4013      	ands	r3, r2
 8001474:	d027      	beq.n	80014c6 <HAL_DMA_IRQHandler+0x7a>
 8001476:	68bb      	ldr	r3, [r7, #8]
 8001478:	2204      	movs	r2, #4
 800147a:	4013      	ands	r3, r2
 800147c:	d023      	beq.n	80014c6 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	2220      	movs	r2, #32
 8001486:	4013      	ands	r3, r2
 8001488:	d107      	bne.n	800149a <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	2104      	movs	r1, #4
 8001496:	438a      	bics	r2, r1
 8001498:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 800149a:	4b44      	ldr	r3, [pc, #272]	; (80015ac <HAL_DMA_IRQHandler+0x160>)
 800149c:	6859      	ldr	r1, [r3, #4]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a2:	221c      	movs	r2, #28
 80014a4:	4013      	ands	r3, r2
 80014a6:	2204      	movs	r2, #4
 80014a8:	409a      	lsls	r2, r3
 80014aa:	4b40      	ldr	r3, [pc, #256]	; (80015ac <HAL_DMA_IRQHandler+0x160>)
 80014ac:	430a      	orrs	r2, r1
 80014ae:	605a      	str	r2, [r3, #4]
#endif

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d100      	bne.n	80014ba <HAL_DMA_IRQHandler+0x6e>
 80014b8:	e073      	b.n	80015a2 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014be:	687a      	ldr	r2, [r7, #4]
 80014c0:	0010      	movs	r0, r2
 80014c2:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80014c4:	e06d      	b.n	80015a2 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ca:	221c      	movs	r2, #28
 80014cc:	4013      	ands	r3, r2
 80014ce:	2202      	movs	r2, #2
 80014d0:	409a      	lsls	r2, r3
 80014d2:	0013      	movs	r3, r2
 80014d4:	68fa      	ldr	r2, [r7, #12]
 80014d6:	4013      	ands	r3, r2
 80014d8:	d02e      	beq.n	8001538 <HAL_DMA_IRQHandler+0xec>
 80014da:	68bb      	ldr	r3, [r7, #8]
 80014dc:	2202      	movs	r2, #2
 80014de:	4013      	ands	r3, r2
 80014e0:	d02a      	beq.n	8001538 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	2220      	movs	r2, #32
 80014ea:	4013      	ands	r3, r2
 80014ec:	d10b      	bne.n	8001506 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	210a      	movs	r1, #10
 80014fa:	438a      	bics	r2, r1
 80014fc:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2225      	movs	r2, #37	; 0x25
 8001502:	2101      	movs	r1, #1
 8001504:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8001506:	4b29      	ldr	r3, [pc, #164]	; (80015ac <HAL_DMA_IRQHandler+0x160>)
 8001508:	6859      	ldr	r1, [r3, #4]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150e:	221c      	movs	r2, #28
 8001510:	4013      	ands	r3, r2
 8001512:	2202      	movs	r2, #2
 8001514:	409a      	lsls	r2, r3
 8001516:	4b25      	ldr	r3, [pc, #148]	; (80015ac <HAL_DMA_IRQHandler+0x160>)
 8001518:	430a      	orrs	r2, r1
 800151a:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2224      	movs	r2, #36	; 0x24
 8001520:	2100      	movs	r1, #0
 8001522:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001528:	2b00      	cmp	r3, #0
 800152a:	d03a      	beq.n	80015a2 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001530:	687a      	ldr	r2, [r7, #4]
 8001532:	0010      	movs	r0, r2
 8001534:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8001536:	e034      	b.n	80015a2 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153c:	221c      	movs	r2, #28
 800153e:	4013      	ands	r3, r2
 8001540:	2208      	movs	r2, #8
 8001542:	409a      	lsls	r2, r3
 8001544:	0013      	movs	r3, r2
 8001546:	68fa      	ldr	r2, [r7, #12]
 8001548:	4013      	ands	r3, r2
 800154a:	d02b      	beq.n	80015a4 <HAL_DMA_IRQHandler+0x158>
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	2208      	movs	r2, #8
 8001550:	4013      	ands	r3, r2
 8001552:	d027      	beq.n	80015a4 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	210e      	movs	r1, #14
 8001560:	438a      	bics	r2, r1
 8001562:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8001564:	4b11      	ldr	r3, [pc, #68]	; (80015ac <HAL_DMA_IRQHandler+0x160>)
 8001566:	6859      	ldr	r1, [r3, #4]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156c:	221c      	movs	r2, #28
 800156e:	4013      	ands	r3, r2
 8001570:	2201      	movs	r2, #1
 8001572:	409a      	lsls	r2, r3
 8001574:	4b0d      	ldr	r3, [pc, #52]	; (80015ac <HAL_DMA_IRQHandler+0x160>)
 8001576:	430a      	orrs	r2, r1
 8001578:	605a      	str	r2, [r3, #4]
#endif

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2201      	movs	r2, #1
 800157e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2225      	movs	r2, #37	; 0x25
 8001584:	2101      	movs	r1, #1
 8001586:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2224      	movs	r2, #36	; 0x24
 800158c:	2100      	movs	r1, #0
 800158e:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001594:	2b00      	cmp	r3, #0
 8001596:	d005      	beq.n	80015a4 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800159c:	687a      	ldr	r2, [r7, #4]
 800159e:	0010      	movs	r0, r2
 80015a0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80015a2:	46c0      	nop			; (mov r8, r8)
 80015a4:	46c0      	nop			; (mov r8, r8)
}
 80015a6:	46bd      	mov	sp, r7
 80015a8:	b004      	add	sp, #16
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	40020000 	.word	0x40020000

080015b0 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	60f8      	str	r0, [r7, #12]
 80015b8:	60b9      	str	r1, [r7, #8]
 80015ba:	607a      	str	r2, [r7, #4]
 80015bc:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015c2:	68fa      	ldr	r2, [r7, #12]
 80015c4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80015c6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d004      	beq.n	80015da <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015d4:	68fa      	ldr	r2, [r7, #12]
 80015d6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80015d8:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80015da:	4b14      	ldr	r3, [pc, #80]	; (800162c <DMA_SetConfig+0x7c>)
 80015dc:	6859      	ldr	r1, [r3, #4]
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e2:	221c      	movs	r2, #28
 80015e4:	4013      	ands	r3, r2
 80015e6:	2201      	movs	r2, #1
 80015e8:	409a      	lsls	r2, r3
 80015ea:	4b10      	ldr	r3, [pc, #64]	; (800162c <DMA_SetConfig+0x7c>)
 80015ec:	430a      	orrs	r2, r1
 80015ee:	605a      	str	r2, [r3, #4]
#endif

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	683a      	ldr	r2, [r7, #0]
 80015f6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	689b      	ldr	r3, [r3, #8]
 80015fc:	2b10      	cmp	r3, #16
 80015fe:	d108      	bne.n	8001612 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	687a      	ldr	r2, [r7, #4]
 8001606:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	68ba      	ldr	r2, [r7, #8]
 800160e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001610:	e007      	b.n	8001622 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	68ba      	ldr	r2, [r7, #8]
 8001618:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	687a      	ldr	r2, [r7, #4]
 8001620:	60da      	str	r2, [r3, #12]
}
 8001622:	46c0      	nop			; (mov r8, r8)
 8001624:	46bd      	mov	sp, r7
 8001626:	b004      	add	sp, #16
 8001628:	bd80      	pop	{r7, pc}
 800162a:	46c0      	nop			; (mov r8, r8)
 800162c:	40020000 	.word	0x40020000

08001630 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b084      	sub	sp, #16
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163c:	089b      	lsrs	r3, r3, #2
 800163e:	4a10      	ldr	r2, [pc, #64]	; (8001680 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8001640:	4694      	mov	ip, r2
 8001642:	4463      	add	r3, ip
 8001644:	009b      	lsls	r3, r3, #2
 8001646:	001a      	movs	r2, r3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	001a      	movs	r2, r3
 8001652:	23ff      	movs	r3, #255	; 0xff
 8001654:	4013      	ands	r3, r2
 8001656:	3b08      	subs	r3, #8
 8001658:	2114      	movs	r1, #20
 800165a:	0018      	movs	r0, r3
 800165c:	f7fe fd50 	bl	8000100 <__udivsi3>
 8001660:	0003      	movs	r3, r0
 8001662:	60fb      	str	r3, [r7, #12]
#endif

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	4a07      	ldr	r2, [pc, #28]	; (8001684 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8001668:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	221f      	movs	r2, #31
 800166e:	4013      	ands	r3, r2
 8001670:	2201      	movs	r2, #1
 8001672:	409a      	lsls	r2, r3
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8001678:	46c0      	nop			; (mov r8, r8)
 800167a:	46bd      	mov	sp, r7
 800167c:	b004      	add	sp, #16
 800167e:	bd80      	pop	{r7, pc}
 8001680:	10008200 	.word	0x10008200
 8001684:	40020880 	.word	0x40020880

08001688 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b084      	sub	sp, #16
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	223f      	movs	r2, #63	; 0x3f
 8001696:	4013      	ands	r3, r2
 8001698:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	4a0a      	ldr	r2, [pc, #40]	; (80016c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800169e:	4694      	mov	ip, r2
 80016a0:	4463      	add	r3, ip
 80016a2:	009b      	lsls	r3, r3, #2
 80016a4:	001a      	movs	r2, r3
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	4a07      	ldr	r2, [pc, #28]	; (80016cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80016ae:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	3b01      	subs	r3, #1
 80016b4:	2203      	movs	r2, #3
 80016b6:	4013      	ands	r3, r2
 80016b8:	2201      	movs	r2, #1
 80016ba:	409a      	lsls	r2, r3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	659a      	str	r2, [r3, #88]	; 0x58
}
 80016c0:	46c0      	nop			; (mov r8, r8)
 80016c2:	46bd      	mov	sp, r7
 80016c4:	b004      	add	sp, #16
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	1000823f 	.word	0x1000823f
 80016cc:	40020940 	.word	0x40020940

080016d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b086      	sub	sp, #24
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
 80016d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016da:	2300      	movs	r3, #0
 80016dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016de:	e147      	b.n	8001970 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	2101      	movs	r1, #1
 80016e6:	697a      	ldr	r2, [r7, #20]
 80016e8:	4091      	lsls	r1, r2
 80016ea:	000a      	movs	r2, r1
 80016ec:	4013      	ands	r3, r2
 80016ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d100      	bne.n	80016f8 <HAL_GPIO_Init+0x28>
 80016f6:	e138      	b.n	800196a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	2b01      	cmp	r3, #1
 80016fe:	d00b      	beq.n	8001718 <HAL_GPIO_Init+0x48>
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	2b02      	cmp	r3, #2
 8001706:	d007      	beq.n	8001718 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800170c:	2b11      	cmp	r3, #17
 800170e:	d003      	beq.n	8001718 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	2b12      	cmp	r3, #18
 8001716:	d130      	bne.n	800177a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	005b      	lsls	r3, r3, #1
 8001722:	2203      	movs	r2, #3
 8001724:	409a      	lsls	r2, r3
 8001726:	0013      	movs	r3, r2
 8001728:	43da      	mvns	r2, r3
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	4013      	ands	r3, r2
 800172e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	68da      	ldr	r2, [r3, #12]
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	005b      	lsls	r3, r3, #1
 8001738:	409a      	lsls	r2, r3
 800173a:	0013      	movs	r3, r2
 800173c:	693a      	ldr	r2, [r7, #16]
 800173e:	4313      	orrs	r3, r2
 8001740:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	693a      	ldr	r2, [r7, #16]
 8001746:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800174e:	2201      	movs	r2, #1
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	409a      	lsls	r2, r3
 8001754:	0013      	movs	r3, r2
 8001756:	43da      	mvns	r2, r3
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	4013      	ands	r3, r2
 800175c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	091b      	lsrs	r3, r3, #4
 8001764:	2201      	movs	r2, #1
 8001766:	401a      	ands	r2, r3
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	409a      	lsls	r2, r3
 800176c:	0013      	movs	r3, r2
 800176e:	693a      	ldr	r2, [r7, #16]
 8001770:	4313      	orrs	r3, r2
 8001772:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	693a      	ldr	r2, [r7, #16]
 8001778:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	68db      	ldr	r3, [r3, #12]
 800177e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	005b      	lsls	r3, r3, #1
 8001784:	2203      	movs	r2, #3
 8001786:	409a      	lsls	r2, r3
 8001788:	0013      	movs	r3, r2
 800178a:	43da      	mvns	r2, r3
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	4013      	ands	r3, r2
 8001790:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	689a      	ldr	r2, [r3, #8]
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	005b      	lsls	r3, r3, #1
 800179a:	409a      	lsls	r2, r3
 800179c:	0013      	movs	r3, r2
 800179e:	693a      	ldr	r2, [r7, #16]
 80017a0:	4313      	orrs	r3, r2
 80017a2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	693a      	ldr	r2, [r7, #16]
 80017a8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	2b02      	cmp	r3, #2
 80017b0:	d003      	beq.n	80017ba <HAL_GPIO_Init+0xea>
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	2b12      	cmp	r3, #18
 80017b8:	d123      	bne.n	8001802 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	08da      	lsrs	r2, r3, #3
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	3208      	adds	r2, #8
 80017c2:	0092      	lsls	r2, r2, #2
 80017c4:	58d3      	ldr	r3, [r2, r3]
 80017c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	2207      	movs	r2, #7
 80017cc:	4013      	ands	r3, r2
 80017ce:	009b      	lsls	r3, r3, #2
 80017d0:	220f      	movs	r2, #15
 80017d2:	409a      	lsls	r2, r3
 80017d4:	0013      	movs	r3, r2
 80017d6:	43da      	mvns	r2, r3
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	4013      	ands	r3, r2
 80017dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	691a      	ldr	r2, [r3, #16]
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	2107      	movs	r1, #7
 80017e6:	400b      	ands	r3, r1
 80017e8:	009b      	lsls	r3, r3, #2
 80017ea:	409a      	lsls	r2, r3
 80017ec:	0013      	movs	r3, r2
 80017ee:	693a      	ldr	r2, [r7, #16]
 80017f0:	4313      	orrs	r3, r2
 80017f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	08da      	lsrs	r2, r3, #3
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	3208      	adds	r2, #8
 80017fc:	0092      	lsls	r2, r2, #2
 80017fe:	6939      	ldr	r1, [r7, #16]
 8001800:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	005b      	lsls	r3, r3, #1
 800180c:	2203      	movs	r2, #3
 800180e:	409a      	lsls	r2, r3
 8001810:	0013      	movs	r3, r2
 8001812:	43da      	mvns	r2, r3
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	4013      	ands	r3, r2
 8001818:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	2203      	movs	r2, #3
 8001820:	401a      	ands	r2, r3
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	005b      	lsls	r3, r3, #1
 8001826:	409a      	lsls	r2, r3
 8001828:	0013      	movs	r3, r2
 800182a:	693a      	ldr	r2, [r7, #16]
 800182c:	4313      	orrs	r3, r2
 800182e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	693a      	ldr	r2, [r7, #16]
 8001834:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	685a      	ldr	r2, [r3, #4]
 800183a:	2380      	movs	r3, #128	; 0x80
 800183c:	055b      	lsls	r3, r3, #21
 800183e:	4013      	ands	r3, r2
 8001840:	d100      	bne.n	8001844 <HAL_GPIO_Init+0x174>
 8001842:	e092      	b.n	800196a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001844:	4a50      	ldr	r2, [pc, #320]	; (8001988 <HAL_GPIO_Init+0x2b8>)
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	089b      	lsrs	r3, r3, #2
 800184a:	3318      	adds	r3, #24
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	589b      	ldr	r3, [r3, r2]
 8001850:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	2203      	movs	r2, #3
 8001856:	4013      	ands	r3, r2
 8001858:	00db      	lsls	r3, r3, #3
 800185a:	220f      	movs	r2, #15
 800185c:	409a      	lsls	r2, r3
 800185e:	0013      	movs	r3, r2
 8001860:	43da      	mvns	r2, r3
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	4013      	ands	r3, r2
 8001866:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001868:	687a      	ldr	r2, [r7, #4]
 800186a:	23a0      	movs	r3, #160	; 0xa0
 800186c:	05db      	lsls	r3, r3, #23
 800186e:	429a      	cmp	r2, r3
 8001870:	d013      	beq.n	800189a <HAL_GPIO_Init+0x1ca>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4a45      	ldr	r2, [pc, #276]	; (800198c <HAL_GPIO_Init+0x2bc>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d00d      	beq.n	8001896 <HAL_GPIO_Init+0x1c6>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4a44      	ldr	r2, [pc, #272]	; (8001990 <HAL_GPIO_Init+0x2c0>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d007      	beq.n	8001892 <HAL_GPIO_Init+0x1c2>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4a43      	ldr	r2, [pc, #268]	; (8001994 <HAL_GPIO_Init+0x2c4>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d101      	bne.n	800188e <HAL_GPIO_Init+0x1be>
 800188a:	2303      	movs	r3, #3
 800188c:	e006      	b.n	800189c <HAL_GPIO_Init+0x1cc>
 800188e:	2305      	movs	r3, #5
 8001890:	e004      	b.n	800189c <HAL_GPIO_Init+0x1cc>
 8001892:	2302      	movs	r3, #2
 8001894:	e002      	b.n	800189c <HAL_GPIO_Init+0x1cc>
 8001896:	2301      	movs	r3, #1
 8001898:	e000      	b.n	800189c <HAL_GPIO_Init+0x1cc>
 800189a:	2300      	movs	r3, #0
 800189c:	697a      	ldr	r2, [r7, #20]
 800189e:	2103      	movs	r1, #3
 80018a0:	400a      	ands	r2, r1
 80018a2:	00d2      	lsls	r2, r2, #3
 80018a4:	4093      	lsls	r3, r2
 80018a6:	693a      	ldr	r2, [r7, #16]
 80018a8:	4313      	orrs	r3, r2
 80018aa:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80018ac:	4936      	ldr	r1, [pc, #216]	; (8001988 <HAL_GPIO_Init+0x2b8>)
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	089b      	lsrs	r3, r3, #2
 80018b2:	3318      	adds	r3, #24
 80018b4:	009b      	lsls	r3, r3, #2
 80018b6:	693a      	ldr	r2, [r7, #16]
 80018b8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80018ba:	4a33      	ldr	r2, [pc, #204]	; (8001988 <HAL_GPIO_Init+0x2b8>)
 80018bc:	2380      	movs	r3, #128	; 0x80
 80018be:	58d3      	ldr	r3, [r2, r3]
 80018c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	43da      	mvns	r2, r3
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	4013      	ands	r3, r2
 80018ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	685a      	ldr	r2, [r3, #4]
 80018d0:	2380      	movs	r3, #128	; 0x80
 80018d2:	025b      	lsls	r3, r3, #9
 80018d4:	4013      	ands	r3, r2
 80018d6:	d003      	beq.n	80018e0 <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 80018d8:	693a      	ldr	r2, [r7, #16]
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	4313      	orrs	r3, r2
 80018de:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80018e0:	4929      	ldr	r1, [pc, #164]	; (8001988 <HAL_GPIO_Init+0x2b8>)
 80018e2:	2280      	movs	r2, #128	; 0x80
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 80018e8:	4a27      	ldr	r2, [pc, #156]	; (8001988 <HAL_GPIO_Init+0x2b8>)
 80018ea:	2384      	movs	r3, #132	; 0x84
 80018ec:	58d3      	ldr	r3, [r2, r3]
 80018ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	43da      	mvns	r2, r3
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	4013      	ands	r3, r2
 80018f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	685a      	ldr	r2, [r3, #4]
 80018fe:	2380      	movs	r3, #128	; 0x80
 8001900:	029b      	lsls	r3, r3, #10
 8001902:	4013      	ands	r3, r2
 8001904:	d003      	beq.n	800190e <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 8001906:	693a      	ldr	r2, [r7, #16]
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	4313      	orrs	r3, r2
 800190c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800190e:	491e      	ldr	r1, [pc, #120]	; (8001988 <HAL_GPIO_Init+0x2b8>)
 8001910:	2284      	movs	r2, #132	; 0x84
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001916:	4b1c      	ldr	r3, [pc, #112]	; (8001988 <HAL_GPIO_Init+0x2b8>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	43da      	mvns	r2, r3
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	4013      	ands	r3, r2
 8001924:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	685a      	ldr	r2, [r3, #4]
 800192a:	2380      	movs	r3, #128	; 0x80
 800192c:	035b      	lsls	r3, r3, #13
 800192e:	4013      	ands	r3, r2
 8001930:	d003      	beq.n	800193a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001932:	693a      	ldr	r2, [r7, #16]
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	4313      	orrs	r3, r2
 8001938:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800193a:	4b13      	ldr	r3, [pc, #76]	; (8001988 <HAL_GPIO_Init+0x2b8>)
 800193c:	693a      	ldr	r2, [r7, #16]
 800193e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001940:	4b11      	ldr	r3, [pc, #68]	; (8001988 <HAL_GPIO_Init+0x2b8>)
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	43da      	mvns	r2, r3
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	4013      	ands	r3, r2
 800194e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	685a      	ldr	r2, [r3, #4]
 8001954:	2380      	movs	r3, #128	; 0x80
 8001956:	039b      	lsls	r3, r3, #14
 8001958:	4013      	ands	r3, r2
 800195a:	d003      	beq.n	8001964 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800195c:	693a      	ldr	r2, [r7, #16]
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	4313      	orrs	r3, r2
 8001962:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001964:	4b08      	ldr	r3, [pc, #32]	; (8001988 <HAL_GPIO_Init+0x2b8>)
 8001966:	693a      	ldr	r2, [r7, #16]
 8001968:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	3301      	adds	r3, #1
 800196e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	40da      	lsrs	r2, r3
 8001978:	1e13      	subs	r3, r2, #0
 800197a:	d000      	beq.n	800197e <HAL_GPIO_Init+0x2ae>
 800197c:	e6b0      	b.n	80016e0 <HAL_GPIO_Init+0x10>
  }
}
 800197e:	46c0      	nop			; (mov r8, r8)
 8001980:	46c0      	nop			; (mov r8, r8)
 8001982:	46bd      	mov	sp, r7
 8001984:	b006      	add	sp, #24
 8001986:	bd80      	pop	{r7, pc}
 8001988:	40021800 	.word	0x40021800
 800198c:	50000400 	.word	0x50000400
 8001990:	50000800 	.word	0x50000800
 8001994:	50000c00 	.word	0x50000c00

08001998 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	0008      	movs	r0, r1
 80019a2:	0011      	movs	r1, r2
 80019a4:	1cbb      	adds	r3, r7, #2
 80019a6:	1c02      	adds	r2, r0, #0
 80019a8:	801a      	strh	r2, [r3, #0]
 80019aa:	1c7b      	adds	r3, r7, #1
 80019ac:	1c0a      	adds	r2, r1, #0
 80019ae:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019b0:	1c7b      	adds	r3, r7, #1
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d004      	beq.n	80019c2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80019b8:	1cbb      	adds	r3, r7, #2
 80019ba:	881a      	ldrh	r2, [r3, #0]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80019c0:	e003      	b.n	80019ca <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80019c2:	1cbb      	adds	r3, r7, #2
 80019c4:	881a      	ldrh	r2, [r3, #0]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80019ca:	46c0      	nop			; (mov r8, r8)
 80019cc:	46bd      	mov	sp, r7
 80019ce:	b002      	add	sp, #8
 80019d0:	bd80      	pop	{r7, pc}
	...

080019d4 <HAL_PWR_EnterSLEEPMode>:
  * @note   When WFI entry is used, tick interrupt have to be disabled if not
  *         desired as the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
 80019dc:	000a      	movs	r2, r1
 80019de:	1cfb      	adds	r3, r7, #3
 80019e0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if(Regulator != PWR_MAINREGULATOR_ON)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d008      	beq.n	80019fa <HAL_PWR_EnterSLEEPMode+0x26>
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if((PWR->SR2 & PWR_SR2_REGLPF) == 0x00u)
 80019e8:	4b13      	ldr	r3, [pc, #76]	; (8001a38 <HAL_PWR_EnterSLEEPMode+0x64>)
 80019ea:	695a      	ldr	r2, [r3, #20]
 80019ec:	2380      	movs	r3, #128	; 0x80
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	4013      	ands	r3, r2
 80019f2:	d10c      	bne.n	8001a0e <HAL_PWR_EnterSLEEPMode+0x3a>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 80019f4:	f000 f864 	bl	8001ac0 <HAL_PWREx_EnableLowPowerRunMode>
 80019f8:	e009      	b.n	8001a0e <HAL_PWR_EnterSLEEPMode+0x3a>
    }
  }
  else
  {
    /* If in low-power run mode at this point, exit it */
    if((PWR->SR2 & PWR_SR2_REGLPF) != 0x00u)
 80019fa:	4b0f      	ldr	r3, [pc, #60]	; (8001a38 <HAL_PWR_EnterSLEEPMode+0x64>)
 80019fc:	695a      	ldr	r2, [r3, #20]
 80019fe:	2380      	movs	r3, #128	; 0x80
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	4013      	ands	r3, r2
 8001a04:	d003      	beq.n	8001a0e <HAL_PWR_EnterSLEEPMode+0x3a>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8001a06:	f000 f869 	bl	8001adc <HAL_PWREx_DisableLowPowerRunMode>
 8001a0a:	1e03      	subs	r3, r0, #0
 8001a0c:	d10f      	bne.n	8001a2e <HAL_PWR_EnterSLEEPMode+0x5a>
      }
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001a0e:	4b0b      	ldr	r3, [pc, #44]	; (8001a3c <HAL_PWR_EnterSLEEPMode+0x68>)
 8001a10:	691a      	ldr	r2, [r3, #16]
 8001a12:	4b0a      	ldr	r3, [pc, #40]	; (8001a3c <HAL_PWR_EnterSLEEPMode+0x68>)
 8001a14:	2104      	movs	r1, #4
 8001a16:	438a      	bics	r2, r1
 8001a18:	611a      	str	r2, [r3, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8001a1a:	1cfb      	adds	r3, r7, #3
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d101      	bne.n	8001a26 <HAL_PWR_EnterSLEEPMode+0x52>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8001a22:	bf30      	wfi
 8001a24:	e004      	b.n	8001a30 <HAL_PWR_EnterSLEEPMode+0x5c>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8001a26:	bf40      	sev
    __WFE();
 8001a28:	bf20      	wfe
    __WFE();
 8001a2a:	bf20      	wfe
 8001a2c:	e000      	b.n	8001a30 <HAL_PWR_EnterSLEEPMode+0x5c>
        return ;
 8001a2e:	46c0      	nop			; (mov r8, r8)
  }
}
 8001a30:	46bd      	mov	sp, r7
 8001a32:	b002      	add	sp, #8
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	46c0      	nop			; (mov r8, r8)
 8001a38:	40007000 	.word	0x40007000
 8001a3c:	e000ed00 	.word	0xe000ed00

08001a40 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b084      	sub	sp, #16
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001a48:	4b19      	ldr	r3, [pc, #100]	; (8001ab0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a19      	ldr	r2, [pc, #100]	; (8001ab4 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001a4e:	4013      	ands	r3, r2
 8001a50:	0019      	movs	r1, r3
 8001a52:	4b17      	ldr	r3, [pc, #92]	; (8001ab0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001a54:	687a      	ldr	r2, [r7, #4]
 8001a56:	430a      	orrs	r2, r1
 8001a58:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a5a:	687a      	ldr	r2, [r7, #4]
 8001a5c:	2380      	movs	r3, #128	; 0x80
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d11f      	bne.n	8001aa4 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 8001a64:	4b14      	ldr	r3, [pc, #80]	; (8001ab8 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	0013      	movs	r3, r2
 8001a6a:	005b      	lsls	r3, r3, #1
 8001a6c:	189b      	adds	r3, r3, r2
 8001a6e:	005b      	lsls	r3, r3, #1
 8001a70:	4912      	ldr	r1, [pc, #72]	; (8001abc <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001a72:	0018      	movs	r0, r3
 8001a74:	f7fe fb44 	bl	8000100 <__udivsi3>
 8001a78:	0003      	movs	r3, r0
 8001a7a:	3301      	adds	r3, #1
 8001a7c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a7e:	e008      	b.n	8001a92 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if(wait_loop_index != 0U)
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d003      	beq.n	8001a8e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	3b01      	subs	r3, #1
 8001a8a:	60fb      	str	r3, [r7, #12]
 8001a8c:	e001      	b.n	8001a92 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	e009      	b.n	8001aa6 <HAL_PWREx_ControlVoltageScaling+0x66>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a92:	4b07      	ldr	r3, [pc, #28]	; (8001ab0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001a94:	695a      	ldr	r2, [r3, #20]
 8001a96:	2380      	movs	r3, #128	; 0x80
 8001a98:	00db      	lsls	r3, r3, #3
 8001a9a:	401a      	ands	r2, r3
 8001a9c:	2380      	movs	r3, #128	; 0x80
 8001a9e:	00db      	lsls	r3, r3, #3
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d0ed      	beq.n	8001a80 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001aa4:	2300      	movs	r3, #0
}
 8001aa6:	0018      	movs	r0, r3
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	b004      	add	sp, #16
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	46c0      	nop			; (mov r8, r8)
 8001ab0:	40007000 	.word	0x40007000
 8001ab4:	fffff9ff 	.word	0xfffff9ff
 8001ab8:	2000000c 	.word	0x2000000c
 8001abc:	000f4240 	.word	0x000f4240

08001ac0 <HAL_PWREx_EnableLowPowerRunMode>:
  *        low power run mode
  * @note  In Low-power Run mode, all I/O pins keep the same state as in Run mode.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8001ac4:	4b04      	ldr	r3, [pc, #16]	; (8001ad8 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	4b03      	ldr	r3, [pc, #12]	; (8001ad8 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 8001aca:	2180      	movs	r1, #128	; 0x80
 8001acc:	01c9      	lsls	r1, r1, #7
 8001ace:	430a      	orrs	r2, r1
 8001ad0:	601a      	str	r2, [r3, #0]
}
 8001ad2:	46c0      	nop			; (mov r8, r8)
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	40007000 	.word	0x40007000

08001adc <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index = ((PWR_REGLPF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 8001ae2:	4b15      	ldr	r3, [pc, #84]	; (8001b38 <HAL_PWREx_DisableLowPowerRunMode+0x5c>)
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	0013      	movs	r3, r2
 8001ae8:	005b      	lsls	r3, r3, #1
 8001aea:	189b      	adds	r3, r3, r2
 8001aec:	005b      	lsls	r3, r3, #1
 8001aee:	4913      	ldr	r1, [pc, #76]	; (8001b3c <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8001af0:	0018      	movs	r0, r3
 8001af2:	f7fe fb05 	bl	8000100 <__udivsi3>
 8001af6:	0003      	movs	r3, r0
 8001af8:	3301      	adds	r3, #1
 8001afa:	607b      	str	r3, [r7, #4]

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8001afc:	4b10      	ldr	r3, [pc, #64]	; (8001b40 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	4b0f      	ldr	r3, [pc, #60]	; (8001b40 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8001b02:	4910      	ldr	r1, [pc, #64]	; (8001b44 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 8001b04:	400a      	ands	r2, r1
 8001b06:	601a      	str	r2, [r3, #0]

  /* Wait until REGLPF is reset */
  while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 8001b08:	e008      	b.n	8001b1c <HAL_PWREx_DisableLowPowerRunMode+0x40>
  {
    if(wait_loop_index != 0U)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d003      	beq.n	8001b18 <HAL_PWREx_DisableLowPowerRunMode+0x3c>
    {
      wait_loop_index--;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	3b01      	subs	r3, #1
 8001b14:	607b      	str	r3, [r7, #4]
 8001b16:	e001      	b.n	8001b1c <HAL_PWREx_DisableLowPowerRunMode+0x40>
    }
    else
    {
      return HAL_TIMEOUT;
 8001b18:	2303      	movs	r3, #3
 8001b1a:	e009      	b.n	8001b30 <HAL_PWREx_DisableLowPowerRunMode+0x54>
  while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 8001b1c:	4b08      	ldr	r3, [pc, #32]	; (8001b40 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8001b1e:	695a      	ldr	r2, [r3, #20]
 8001b20:	2380      	movs	r3, #128	; 0x80
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	401a      	ands	r2, r3
 8001b26:	2380      	movs	r3, #128	; 0x80
 8001b28:	009b      	lsls	r3, r3, #2
 8001b2a:	429a      	cmp	r2, r3
 8001b2c:	d0ed      	beq.n	8001b0a <HAL_PWREx_DisableLowPowerRunMode+0x2e>
    }
  }

  return HAL_OK;
 8001b2e:	2300      	movs	r3, #0
}
 8001b30:	0018      	movs	r0, r3
 8001b32:	46bd      	mov	sp, r7
 8001b34:	b002      	add	sp, #8
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	2000000c 	.word	0x2000000c
 8001b3c:	000f4240 	.word	0x000f4240
 8001b40:	40007000 	.word	0x40007000
 8001b44:	ffffbfff 	.word	0xffffbfff

08001b48 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001b4c:	4b03      	ldr	r3, [pc, #12]	; (8001b5c <LL_RCC_GetAPB1Prescaler+0x14>)
 8001b4e:	689a      	ldr	r2, [r3, #8]
 8001b50:	23e0      	movs	r3, #224	; 0xe0
 8001b52:	01db      	lsls	r3, r3, #7
 8001b54:	4013      	ands	r3, r2
}
 8001b56:	0018      	movs	r0, r3
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	40021000 	.word	0x40021000

08001b60 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b088      	sub	sp, #32
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d101      	bne.n	8001b72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e2f9      	b.n	8002166 <HAL_RCC_OscConfig+0x606>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	2201      	movs	r2, #1
 8001b78:	4013      	ands	r3, r2
 8001b7a:	d100      	bne.n	8001b7e <HAL_RCC_OscConfig+0x1e>
 8001b7c:	e07c      	b.n	8001c78 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b7e:	4bc3      	ldr	r3, [pc, #780]	; (8001e8c <HAL_RCC_OscConfig+0x32c>)
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	2238      	movs	r2, #56	; 0x38
 8001b84:	4013      	ands	r3, r2
 8001b86:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b88:	4bc0      	ldr	r3, [pc, #768]	; (8001e8c <HAL_RCC_OscConfig+0x32c>)
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	2203      	movs	r2, #3
 8001b8e:	4013      	ands	r3, r2
 8001b90:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001b92:	69bb      	ldr	r3, [r7, #24]
 8001b94:	2b10      	cmp	r3, #16
 8001b96:	d102      	bne.n	8001b9e <HAL_RCC_OscConfig+0x3e>
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	2b03      	cmp	r3, #3
 8001b9c:	d002      	beq.n	8001ba4 <HAL_RCC_OscConfig+0x44>
 8001b9e:	69bb      	ldr	r3, [r7, #24]
 8001ba0:	2b08      	cmp	r3, #8
 8001ba2:	d10b      	bne.n	8001bbc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ba4:	4bb9      	ldr	r3, [pc, #740]	; (8001e8c <HAL_RCC_OscConfig+0x32c>)
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	2380      	movs	r3, #128	; 0x80
 8001baa:	029b      	lsls	r3, r3, #10
 8001bac:	4013      	ands	r3, r2
 8001bae:	d062      	beq.n	8001c76 <HAL_RCC_OscConfig+0x116>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d15e      	bne.n	8001c76 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e2d4      	b.n	8002166 <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	685a      	ldr	r2, [r3, #4]
 8001bc0:	2380      	movs	r3, #128	; 0x80
 8001bc2:	025b      	lsls	r3, r3, #9
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	d107      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x78>
 8001bc8:	4bb0      	ldr	r3, [pc, #704]	; (8001e8c <HAL_RCC_OscConfig+0x32c>)
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	4baf      	ldr	r3, [pc, #700]	; (8001e8c <HAL_RCC_OscConfig+0x32c>)
 8001bce:	2180      	movs	r1, #128	; 0x80
 8001bd0:	0249      	lsls	r1, r1, #9
 8001bd2:	430a      	orrs	r2, r1
 8001bd4:	601a      	str	r2, [r3, #0]
 8001bd6:	e020      	b.n	8001c1a <HAL_RCC_OscConfig+0xba>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	685a      	ldr	r2, [r3, #4]
 8001bdc:	23a0      	movs	r3, #160	; 0xa0
 8001bde:	02db      	lsls	r3, r3, #11
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d10e      	bne.n	8001c02 <HAL_RCC_OscConfig+0xa2>
 8001be4:	4ba9      	ldr	r3, [pc, #676]	; (8001e8c <HAL_RCC_OscConfig+0x32c>)
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	4ba8      	ldr	r3, [pc, #672]	; (8001e8c <HAL_RCC_OscConfig+0x32c>)
 8001bea:	2180      	movs	r1, #128	; 0x80
 8001bec:	02c9      	lsls	r1, r1, #11
 8001bee:	430a      	orrs	r2, r1
 8001bf0:	601a      	str	r2, [r3, #0]
 8001bf2:	4ba6      	ldr	r3, [pc, #664]	; (8001e8c <HAL_RCC_OscConfig+0x32c>)
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	4ba5      	ldr	r3, [pc, #660]	; (8001e8c <HAL_RCC_OscConfig+0x32c>)
 8001bf8:	2180      	movs	r1, #128	; 0x80
 8001bfa:	0249      	lsls	r1, r1, #9
 8001bfc:	430a      	orrs	r2, r1
 8001bfe:	601a      	str	r2, [r3, #0]
 8001c00:	e00b      	b.n	8001c1a <HAL_RCC_OscConfig+0xba>
 8001c02:	4ba2      	ldr	r3, [pc, #648]	; (8001e8c <HAL_RCC_OscConfig+0x32c>)
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	4ba1      	ldr	r3, [pc, #644]	; (8001e8c <HAL_RCC_OscConfig+0x32c>)
 8001c08:	49a1      	ldr	r1, [pc, #644]	; (8001e90 <HAL_RCC_OscConfig+0x330>)
 8001c0a:	400a      	ands	r2, r1
 8001c0c:	601a      	str	r2, [r3, #0]
 8001c0e:	4b9f      	ldr	r3, [pc, #636]	; (8001e8c <HAL_RCC_OscConfig+0x32c>)
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	4b9e      	ldr	r3, [pc, #632]	; (8001e8c <HAL_RCC_OscConfig+0x32c>)
 8001c14:	499f      	ldr	r1, [pc, #636]	; (8001e94 <HAL_RCC_OscConfig+0x334>)
 8001c16:	400a      	ands	r2, r1
 8001c18:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d014      	beq.n	8001c4c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c22:	f7ff f91d 	bl	8000e60 <HAL_GetTick>
 8001c26:	0003      	movs	r3, r0
 8001c28:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c2a:	e008      	b.n	8001c3e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c2c:	f7ff f918 	bl	8000e60 <HAL_GetTick>
 8001c30:	0002      	movs	r2, r0
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	2b64      	cmp	r3, #100	; 0x64
 8001c38:	d901      	bls.n	8001c3e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	e293      	b.n	8002166 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c3e:	4b93      	ldr	r3, [pc, #588]	; (8001e8c <HAL_RCC_OscConfig+0x32c>)
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	2380      	movs	r3, #128	; 0x80
 8001c44:	029b      	lsls	r3, r3, #10
 8001c46:	4013      	ands	r3, r2
 8001c48:	d0f0      	beq.n	8001c2c <HAL_RCC_OscConfig+0xcc>
 8001c4a:	e015      	b.n	8001c78 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c4c:	f7ff f908 	bl	8000e60 <HAL_GetTick>
 8001c50:	0003      	movs	r3, r0
 8001c52:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c54:	e008      	b.n	8001c68 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c56:	f7ff f903 	bl	8000e60 <HAL_GetTick>
 8001c5a:	0002      	movs	r2, r0
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	1ad3      	subs	r3, r2, r3
 8001c60:	2b64      	cmp	r3, #100	; 0x64
 8001c62:	d901      	bls.n	8001c68 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001c64:	2303      	movs	r3, #3
 8001c66:	e27e      	b.n	8002166 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c68:	4b88      	ldr	r3, [pc, #544]	; (8001e8c <HAL_RCC_OscConfig+0x32c>)
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	2380      	movs	r3, #128	; 0x80
 8001c6e:	029b      	lsls	r3, r3, #10
 8001c70:	4013      	ands	r3, r2
 8001c72:	d1f0      	bne.n	8001c56 <HAL_RCC_OscConfig+0xf6>
 8001c74:	e000      	b.n	8001c78 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c76:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	2202      	movs	r2, #2
 8001c7e:	4013      	ands	r3, r2
 8001c80:	d100      	bne.n	8001c84 <HAL_RCC_OscConfig+0x124>
 8001c82:	e099      	b.n	8001db8 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c84:	4b81      	ldr	r3, [pc, #516]	; (8001e8c <HAL_RCC_OscConfig+0x32c>)
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	2238      	movs	r2, #56	; 0x38
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c8e:	4b7f      	ldr	r3, [pc, #508]	; (8001e8c <HAL_RCC_OscConfig+0x32c>)
 8001c90:	68db      	ldr	r3, [r3, #12]
 8001c92:	2203      	movs	r2, #3
 8001c94:	4013      	ands	r3, r2
 8001c96:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001c98:	69bb      	ldr	r3, [r7, #24]
 8001c9a:	2b10      	cmp	r3, #16
 8001c9c:	d102      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x144>
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	2b02      	cmp	r3, #2
 8001ca2:	d002      	beq.n	8001caa <HAL_RCC_OscConfig+0x14a>
 8001ca4:	69bb      	ldr	r3, [r7, #24]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d135      	bne.n	8001d16 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001caa:	4b78      	ldr	r3, [pc, #480]	; (8001e8c <HAL_RCC_OscConfig+0x32c>)
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	2380      	movs	r3, #128	; 0x80
 8001cb0:	00db      	lsls	r3, r3, #3
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	d005      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x162>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	68db      	ldr	r3, [r3, #12]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d101      	bne.n	8001cc2 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e251      	b.n	8002166 <HAL_RCC_OscConfig+0x606>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cc2:	4b72      	ldr	r3, [pc, #456]	; (8001e8c <HAL_RCC_OscConfig+0x32c>)
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	4a74      	ldr	r2, [pc, #464]	; (8001e98 <HAL_RCC_OscConfig+0x338>)
 8001cc8:	4013      	ands	r3, r2
 8001cca:	0019      	movs	r1, r3
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	695b      	ldr	r3, [r3, #20]
 8001cd0:	021a      	lsls	r2, r3, #8
 8001cd2:	4b6e      	ldr	r3, [pc, #440]	; (8001e8c <HAL_RCC_OscConfig+0x32c>)
 8001cd4:	430a      	orrs	r2, r1
 8001cd6:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001cd8:	69bb      	ldr	r3, [r7, #24]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d112      	bne.n	8001d04 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001cde:	4b6b      	ldr	r3, [pc, #428]	; (8001e8c <HAL_RCC_OscConfig+0x32c>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a6e      	ldr	r2, [pc, #440]	; (8001e9c <HAL_RCC_OscConfig+0x33c>)
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	0019      	movs	r1, r3
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	691a      	ldr	r2, [r3, #16]
 8001cec:	4b67      	ldr	r3, [pc, #412]	; (8001e8c <HAL_RCC_OscConfig+0x32c>)
 8001cee:	430a      	orrs	r2, r1
 8001cf0:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001cf2:	4b66      	ldr	r3, [pc, #408]	; (8001e8c <HAL_RCC_OscConfig+0x32c>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	0adb      	lsrs	r3, r3, #11
 8001cf8:	2207      	movs	r2, #7
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	4a68      	ldr	r2, [pc, #416]	; (8001ea0 <HAL_RCC_OscConfig+0x340>)
 8001cfe:	40da      	lsrs	r2, r3
 8001d00:	4b68      	ldr	r3, [pc, #416]	; (8001ea4 <HAL_RCC_OscConfig+0x344>)
 8001d02:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001d04:	4b68      	ldr	r3, [pc, #416]	; (8001ea8 <HAL_RCC_OscConfig+0x348>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	0018      	movs	r0, r3
 8001d0a:	f7ff f84d 	bl	8000da8 <HAL_InitTick>
 8001d0e:	1e03      	subs	r3, r0, #0
 8001d10:	d051      	beq.n	8001db6 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e227      	b.n	8002166 <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	68db      	ldr	r3, [r3, #12]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d030      	beq.n	8001d80 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001d1e:	4b5b      	ldr	r3, [pc, #364]	; (8001e8c <HAL_RCC_OscConfig+0x32c>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a5e      	ldr	r2, [pc, #376]	; (8001e9c <HAL_RCC_OscConfig+0x33c>)
 8001d24:	4013      	ands	r3, r2
 8001d26:	0019      	movs	r1, r3
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	691a      	ldr	r2, [r3, #16]
 8001d2c:	4b57      	ldr	r3, [pc, #348]	; (8001e8c <HAL_RCC_OscConfig+0x32c>)
 8001d2e:	430a      	orrs	r2, r1
 8001d30:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001d32:	4b56      	ldr	r3, [pc, #344]	; (8001e8c <HAL_RCC_OscConfig+0x32c>)
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	4b55      	ldr	r3, [pc, #340]	; (8001e8c <HAL_RCC_OscConfig+0x32c>)
 8001d38:	2180      	movs	r1, #128	; 0x80
 8001d3a:	0049      	lsls	r1, r1, #1
 8001d3c:	430a      	orrs	r2, r1
 8001d3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d40:	f7ff f88e 	bl	8000e60 <HAL_GetTick>
 8001d44:	0003      	movs	r3, r0
 8001d46:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d48:	e008      	b.n	8001d5c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d4a:	f7ff f889 	bl	8000e60 <HAL_GetTick>
 8001d4e:	0002      	movs	r2, r0
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	1ad3      	subs	r3, r2, r3
 8001d54:	2b02      	cmp	r3, #2
 8001d56:	d901      	bls.n	8001d5c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001d58:	2303      	movs	r3, #3
 8001d5a:	e204      	b.n	8002166 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d5c:	4b4b      	ldr	r3, [pc, #300]	; (8001e8c <HAL_RCC_OscConfig+0x32c>)
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	2380      	movs	r3, #128	; 0x80
 8001d62:	00db      	lsls	r3, r3, #3
 8001d64:	4013      	ands	r3, r2
 8001d66:	d0f0      	beq.n	8001d4a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d68:	4b48      	ldr	r3, [pc, #288]	; (8001e8c <HAL_RCC_OscConfig+0x32c>)
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	4a4a      	ldr	r2, [pc, #296]	; (8001e98 <HAL_RCC_OscConfig+0x338>)
 8001d6e:	4013      	ands	r3, r2
 8001d70:	0019      	movs	r1, r3
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	695b      	ldr	r3, [r3, #20]
 8001d76:	021a      	lsls	r2, r3, #8
 8001d78:	4b44      	ldr	r3, [pc, #272]	; (8001e8c <HAL_RCC_OscConfig+0x32c>)
 8001d7a:	430a      	orrs	r2, r1
 8001d7c:	605a      	str	r2, [r3, #4]
 8001d7e:	e01b      	b.n	8001db8 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001d80:	4b42      	ldr	r3, [pc, #264]	; (8001e8c <HAL_RCC_OscConfig+0x32c>)
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	4b41      	ldr	r3, [pc, #260]	; (8001e8c <HAL_RCC_OscConfig+0x32c>)
 8001d86:	4949      	ldr	r1, [pc, #292]	; (8001eac <HAL_RCC_OscConfig+0x34c>)
 8001d88:	400a      	ands	r2, r1
 8001d8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d8c:	f7ff f868 	bl	8000e60 <HAL_GetTick>
 8001d90:	0003      	movs	r3, r0
 8001d92:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d94:	e008      	b.n	8001da8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d96:	f7ff f863 	bl	8000e60 <HAL_GetTick>
 8001d9a:	0002      	movs	r2, r0
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	1ad3      	subs	r3, r2, r3
 8001da0:	2b02      	cmp	r3, #2
 8001da2:	d901      	bls.n	8001da8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001da4:	2303      	movs	r3, #3
 8001da6:	e1de      	b.n	8002166 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001da8:	4b38      	ldr	r3, [pc, #224]	; (8001e8c <HAL_RCC_OscConfig+0x32c>)
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	2380      	movs	r3, #128	; 0x80
 8001dae:	00db      	lsls	r3, r3, #3
 8001db0:	4013      	ands	r3, r2
 8001db2:	d1f0      	bne.n	8001d96 <HAL_RCC_OscConfig+0x236>
 8001db4:	e000      	b.n	8001db8 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001db6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	2208      	movs	r2, #8
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	d047      	beq.n	8001e52 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001dc2:	4b32      	ldr	r3, [pc, #200]	; (8001e8c <HAL_RCC_OscConfig+0x32c>)
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	2238      	movs	r2, #56	; 0x38
 8001dc8:	4013      	ands	r3, r2
 8001dca:	2b18      	cmp	r3, #24
 8001dcc:	d10a      	bne.n	8001de4 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001dce:	4b2f      	ldr	r3, [pc, #188]	; (8001e8c <HAL_RCC_OscConfig+0x32c>)
 8001dd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dd2:	2202      	movs	r2, #2
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	d03c      	beq.n	8001e52 <HAL_RCC_OscConfig+0x2f2>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	699b      	ldr	r3, [r3, #24]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d138      	bne.n	8001e52 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	e1c0      	b.n	8002166 <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	699b      	ldr	r3, [r3, #24]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d019      	beq.n	8001e20 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001dec:	4b27      	ldr	r3, [pc, #156]	; (8001e8c <HAL_RCC_OscConfig+0x32c>)
 8001dee:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001df0:	4b26      	ldr	r3, [pc, #152]	; (8001e8c <HAL_RCC_OscConfig+0x32c>)
 8001df2:	2101      	movs	r1, #1
 8001df4:	430a      	orrs	r2, r1
 8001df6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001df8:	f7ff f832 	bl	8000e60 <HAL_GetTick>
 8001dfc:	0003      	movs	r3, r0
 8001dfe:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e00:	e008      	b.n	8001e14 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e02:	f7ff f82d 	bl	8000e60 <HAL_GetTick>
 8001e06:	0002      	movs	r2, r0
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	1ad3      	subs	r3, r2, r3
 8001e0c:	2b02      	cmp	r3, #2
 8001e0e:	d901      	bls.n	8001e14 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001e10:	2303      	movs	r3, #3
 8001e12:	e1a8      	b.n	8002166 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e14:	4b1d      	ldr	r3, [pc, #116]	; (8001e8c <HAL_RCC_OscConfig+0x32c>)
 8001e16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e18:	2202      	movs	r2, #2
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	d0f1      	beq.n	8001e02 <HAL_RCC_OscConfig+0x2a2>
 8001e1e:	e018      	b.n	8001e52 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001e20:	4b1a      	ldr	r3, [pc, #104]	; (8001e8c <HAL_RCC_OscConfig+0x32c>)
 8001e22:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001e24:	4b19      	ldr	r3, [pc, #100]	; (8001e8c <HAL_RCC_OscConfig+0x32c>)
 8001e26:	2101      	movs	r1, #1
 8001e28:	438a      	bics	r2, r1
 8001e2a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e2c:	f7ff f818 	bl	8000e60 <HAL_GetTick>
 8001e30:	0003      	movs	r3, r0
 8001e32:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e34:	e008      	b.n	8001e48 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e36:	f7ff f813 	bl	8000e60 <HAL_GetTick>
 8001e3a:	0002      	movs	r2, r0
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	1ad3      	subs	r3, r2, r3
 8001e40:	2b02      	cmp	r3, #2
 8001e42:	d901      	bls.n	8001e48 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001e44:	2303      	movs	r3, #3
 8001e46:	e18e      	b.n	8002166 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e48:	4b10      	ldr	r3, [pc, #64]	; (8001e8c <HAL_RCC_OscConfig+0x32c>)
 8001e4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e4c:	2202      	movs	r2, #2
 8001e4e:	4013      	ands	r3, r2
 8001e50:	d1f1      	bne.n	8001e36 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	2204      	movs	r2, #4
 8001e58:	4013      	ands	r3, r2
 8001e5a:	d100      	bne.n	8001e5e <HAL_RCC_OscConfig+0x2fe>
 8001e5c:	e0c6      	b.n	8001fec <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e5e:	231f      	movs	r3, #31
 8001e60:	18fb      	adds	r3, r7, r3
 8001e62:	2200      	movs	r2, #0
 8001e64:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001e66:	4b09      	ldr	r3, [pc, #36]	; (8001e8c <HAL_RCC_OscConfig+0x32c>)
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	2238      	movs	r2, #56	; 0x38
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	2b20      	cmp	r3, #32
 8001e70:	d11e      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001e72:	4b06      	ldr	r3, [pc, #24]	; (8001e8c <HAL_RCC_OscConfig+0x32c>)
 8001e74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e76:	2202      	movs	r2, #2
 8001e78:	4013      	ands	r3, r2
 8001e7a:	d100      	bne.n	8001e7e <HAL_RCC_OscConfig+0x31e>
 8001e7c:	e0b6      	b.n	8001fec <HAL_RCC_OscConfig+0x48c>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d000      	beq.n	8001e88 <HAL_RCC_OscConfig+0x328>
 8001e86:	e0b1      	b.n	8001fec <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e16c      	b.n	8002166 <HAL_RCC_OscConfig+0x606>
 8001e8c:	40021000 	.word	0x40021000
 8001e90:	fffeffff 	.word	0xfffeffff
 8001e94:	fffbffff 	.word	0xfffbffff
 8001e98:	ffff80ff 	.word	0xffff80ff
 8001e9c:	ffffc7ff 	.word	0xffffc7ff
 8001ea0:	00f42400 	.word	0x00f42400
 8001ea4:	2000000c 	.word	0x2000000c
 8001ea8:	20000010 	.word	0x20000010
 8001eac:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001eb0:	4baf      	ldr	r3, [pc, #700]	; (8002170 <HAL_RCC_OscConfig+0x610>)
 8001eb2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001eb4:	2380      	movs	r3, #128	; 0x80
 8001eb6:	055b      	lsls	r3, r3, #21
 8001eb8:	4013      	ands	r3, r2
 8001eba:	d101      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x360>
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e000      	b.n	8001ec2 <HAL_RCC_OscConfig+0x362>
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d011      	beq.n	8001eea <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001ec6:	4baa      	ldr	r3, [pc, #680]	; (8002170 <HAL_RCC_OscConfig+0x610>)
 8001ec8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001eca:	4ba9      	ldr	r3, [pc, #676]	; (8002170 <HAL_RCC_OscConfig+0x610>)
 8001ecc:	2180      	movs	r1, #128	; 0x80
 8001ece:	0549      	lsls	r1, r1, #21
 8001ed0:	430a      	orrs	r2, r1
 8001ed2:	63da      	str	r2, [r3, #60]	; 0x3c
 8001ed4:	4ba6      	ldr	r3, [pc, #664]	; (8002170 <HAL_RCC_OscConfig+0x610>)
 8001ed6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001ed8:	2380      	movs	r3, #128	; 0x80
 8001eda:	055b      	lsls	r3, r3, #21
 8001edc:	4013      	ands	r3, r2
 8001ede:	60fb      	str	r3, [r7, #12]
 8001ee0:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001ee2:	231f      	movs	r3, #31
 8001ee4:	18fb      	adds	r3, r7, r3
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001eea:	4ba2      	ldr	r3, [pc, #648]	; (8002174 <HAL_RCC_OscConfig+0x614>)
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	2380      	movs	r3, #128	; 0x80
 8001ef0:	005b      	lsls	r3, r3, #1
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	d11a      	bne.n	8001f2c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ef6:	4b9f      	ldr	r3, [pc, #636]	; (8002174 <HAL_RCC_OscConfig+0x614>)
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	4b9e      	ldr	r3, [pc, #632]	; (8002174 <HAL_RCC_OscConfig+0x614>)
 8001efc:	2180      	movs	r1, #128	; 0x80
 8001efe:	0049      	lsls	r1, r1, #1
 8001f00:	430a      	orrs	r2, r1
 8001f02:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001f04:	f7fe ffac 	bl	8000e60 <HAL_GetTick>
 8001f08:	0003      	movs	r3, r0
 8001f0a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f0c:	e008      	b.n	8001f20 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f0e:	f7fe ffa7 	bl	8000e60 <HAL_GetTick>
 8001f12:	0002      	movs	r2, r0
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	2b02      	cmp	r3, #2
 8001f1a:	d901      	bls.n	8001f20 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001f1c:	2303      	movs	r3, #3
 8001f1e:	e122      	b.n	8002166 <HAL_RCC_OscConfig+0x606>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f20:	4b94      	ldr	r3, [pc, #592]	; (8002174 <HAL_RCC_OscConfig+0x614>)
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	2380      	movs	r3, #128	; 0x80
 8001f26:	005b      	lsls	r3, r3, #1
 8001f28:	4013      	ands	r3, r2
 8001f2a:	d0f0      	beq.n	8001f0e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	d106      	bne.n	8001f42 <HAL_RCC_OscConfig+0x3e2>
 8001f34:	4b8e      	ldr	r3, [pc, #568]	; (8002170 <HAL_RCC_OscConfig+0x610>)
 8001f36:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001f38:	4b8d      	ldr	r3, [pc, #564]	; (8002170 <HAL_RCC_OscConfig+0x610>)
 8001f3a:	2101      	movs	r1, #1
 8001f3c:	430a      	orrs	r2, r1
 8001f3e:	65da      	str	r2, [r3, #92]	; 0x5c
 8001f40:	e01c      	b.n	8001f7c <HAL_RCC_OscConfig+0x41c>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	2b05      	cmp	r3, #5
 8001f48:	d10c      	bne.n	8001f64 <HAL_RCC_OscConfig+0x404>
 8001f4a:	4b89      	ldr	r3, [pc, #548]	; (8002170 <HAL_RCC_OscConfig+0x610>)
 8001f4c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001f4e:	4b88      	ldr	r3, [pc, #544]	; (8002170 <HAL_RCC_OscConfig+0x610>)
 8001f50:	2104      	movs	r1, #4
 8001f52:	430a      	orrs	r2, r1
 8001f54:	65da      	str	r2, [r3, #92]	; 0x5c
 8001f56:	4b86      	ldr	r3, [pc, #536]	; (8002170 <HAL_RCC_OscConfig+0x610>)
 8001f58:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001f5a:	4b85      	ldr	r3, [pc, #532]	; (8002170 <HAL_RCC_OscConfig+0x610>)
 8001f5c:	2101      	movs	r1, #1
 8001f5e:	430a      	orrs	r2, r1
 8001f60:	65da      	str	r2, [r3, #92]	; 0x5c
 8001f62:	e00b      	b.n	8001f7c <HAL_RCC_OscConfig+0x41c>
 8001f64:	4b82      	ldr	r3, [pc, #520]	; (8002170 <HAL_RCC_OscConfig+0x610>)
 8001f66:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001f68:	4b81      	ldr	r3, [pc, #516]	; (8002170 <HAL_RCC_OscConfig+0x610>)
 8001f6a:	2101      	movs	r1, #1
 8001f6c:	438a      	bics	r2, r1
 8001f6e:	65da      	str	r2, [r3, #92]	; 0x5c
 8001f70:	4b7f      	ldr	r3, [pc, #508]	; (8002170 <HAL_RCC_OscConfig+0x610>)
 8001f72:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001f74:	4b7e      	ldr	r3, [pc, #504]	; (8002170 <HAL_RCC_OscConfig+0x610>)
 8001f76:	2104      	movs	r1, #4
 8001f78:	438a      	bics	r2, r1
 8001f7a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d014      	beq.n	8001fae <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f84:	f7fe ff6c 	bl	8000e60 <HAL_GetTick>
 8001f88:	0003      	movs	r3, r0
 8001f8a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f8c:	e009      	b.n	8001fa2 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f8e:	f7fe ff67 	bl	8000e60 <HAL_GetTick>
 8001f92:	0002      	movs	r2, r0
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	1ad3      	subs	r3, r2, r3
 8001f98:	4a77      	ldr	r2, [pc, #476]	; (8002178 <HAL_RCC_OscConfig+0x618>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d901      	bls.n	8001fa2 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	e0e1      	b.n	8002166 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fa2:	4b73      	ldr	r3, [pc, #460]	; (8002170 <HAL_RCC_OscConfig+0x610>)
 8001fa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fa6:	2202      	movs	r2, #2
 8001fa8:	4013      	ands	r3, r2
 8001faa:	d0f0      	beq.n	8001f8e <HAL_RCC_OscConfig+0x42e>
 8001fac:	e013      	b.n	8001fd6 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fae:	f7fe ff57 	bl	8000e60 <HAL_GetTick>
 8001fb2:	0003      	movs	r3, r0
 8001fb4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001fb6:	e009      	b.n	8001fcc <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fb8:	f7fe ff52 	bl	8000e60 <HAL_GetTick>
 8001fbc:	0002      	movs	r2, r0
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	4a6d      	ldr	r2, [pc, #436]	; (8002178 <HAL_RCC_OscConfig+0x618>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d901      	bls.n	8001fcc <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001fc8:	2303      	movs	r3, #3
 8001fca:	e0cc      	b.n	8002166 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001fcc:	4b68      	ldr	r3, [pc, #416]	; (8002170 <HAL_RCC_OscConfig+0x610>)
 8001fce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fd0:	2202      	movs	r2, #2
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	d1f0      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001fd6:	231f      	movs	r3, #31
 8001fd8:	18fb      	adds	r3, r7, r3
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d105      	bne.n	8001fec <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001fe0:	4b63      	ldr	r3, [pc, #396]	; (8002170 <HAL_RCC_OscConfig+0x610>)
 8001fe2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001fe4:	4b62      	ldr	r3, [pc, #392]	; (8002170 <HAL_RCC_OscConfig+0x610>)
 8001fe6:	4965      	ldr	r1, [pc, #404]	; (800217c <HAL_RCC_OscConfig+0x61c>)
 8001fe8:	400a      	ands	r2, r1
 8001fea:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	69db      	ldr	r3, [r3, #28]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d100      	bne.n	8001ff6 <HAL_RCC_OscConfig+0x496>
 8001ff4:	e0b6      	b.n	8002164 <HAL_RCC_OscConfig+0x604>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ff6:	4b5e      	ldr	r3, [pc, #376]	; (8002170 <HAL_RCC_OscConfig+0x610>)
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	2238      	movs	r2, #56	; 0x38
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	2b10      	cmp	r3, #16
 8002000:	d100      	bne.n	8002004 <HAL_RCC_OscConfig+0x4a4>
 8002002:	e07e      	b.n	8002102 <HAL_RCC_OscConfig+0x5a2>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	69db      	ldr	r3, [r3, #28]
 8002008:	2b02      	cmp	r3, #2
 800200a:	d153      	bne.n	80020b4 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800200c:	4b58      	ldr	r3, [pc, #352]	; (8002170 <HAL_RCC_OscConfig+0x610>)
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	4b57      	ldr	r3, [pc, #348]	; (8002170 <HAL_RCC_OscConfig+0x610>)
 8002012:	495b      	ldr	r1, [pc, #364]	; (8002180 <HAL_RCC_OscConfig+0x620>)
 8002014:	400a      	ands	r2, r1
 8002016:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002018:	f7fe ff22 	bl	8000e60 <HAL_GetTick>
 800201c:	0003      	movs	r3, r0
 800201e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002020:	e008      	b.n	8002034 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002022:	f7fe ff1d 	bl	8000e60 <HAL_GetTick>
 8002026:	0002      	movs	r2, r0
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	1ad3      	subs	r3, r2, r3
 800202c:	2b02      	cmp	r3, #2
 800202e:	d901      	bls.n	8002034 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002030:	2303      	movs	r3, #3
 8002032:	e098      	b.n	8002166 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002034:	4b4e      	ldr	r3, [pc, #312]	; (8002170 <HAL_RCC_OscConfig+0x610>)
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	2380      	movs	r3, #128	; 0x80
 800203a:	049b      	lsls	r3, r3, #18
 800203c:	4013      	ands	r3, r2
 800203e:	d1f0      	bne.n	8002022 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002040:	4b4b      	ldr	r3, [pc, #300]	; (8002170 <HAL_RCC_OscConfig+0x610>)
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	4a4f      	ldr	r2, [pc, #316]	; (8002184 <HAL_RCC_OscConfig+0x624>)
 8002046:	4013      	ands	r3, r2
 8002048:	0019      	movs	r1, r3
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6a1a      	ldr	r2, [r3, #32]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002052:	431a      	orrs	r2, r3
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002058:	021b      	lsls	r3, r3, #8
 800205a:	431a      	orrs	r2, r3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002060:	431a      	orrs	r2, r3
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002066:	431a      	orrs	r2, r3
 8002068:	4b41      	ldr	r3, [pc, #260]	; (8002170 <HAL_RCC_OscConfig+0x610>)
 800206a:	430a      	orrs	r2, r1
 800206c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800206e:	4b40      	ldr	r3, [pc, #256]	; (8002170 <HAL_RCC_OscConfig+0x610>)
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	4b3f      	ldr	r3, [pc, #252]	; (8002170 <HAL_RCC_OscConfig+0x610>)
 8002074:	2180      	movs	r1, #128	; 0x80
 8002076:	0449      	lsls	r1, r1, #17
 8002078:	430a      	orrs	r2, r1
 800207a:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800207c:	4b3c      	ldr	r3, [pc, #240]	; (8002170 <HAL_RCC_OscConfig+0x610>)
 800207e:	68da      	ldr	r2, [r3, #12]
 8002080:	4b3b      	ldr	r3, [pc, #236]	; (8002170 <HAL_RCC_OscConfig+0x610>)
 8002082:	2180      	movs	r1, #128	; 0x80
 8002084:	0549      	lsls	r1, r1, #21
 8002086:	430a      	orrs	r2, r1
 8002088:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800208a:	f7fe fee9 	bl	8000e60 <HAL_GetTick>
 800208e:	0003      	movs	r3, r0
 8002090:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002092:	e008      	b.n	80020a6 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002094:	f7fe fee4 	bl	8000e60 <HAL_GetTick>
 8002098:	0002      	movs	r2, r0
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	2b02      	cmp	r3, #2
 80020a0:	d901      	bls.n	80020a6 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 80020a2:	2303      	movs	r3, #3
 80020a4:	e05f      	b.n	8002166 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020a6:	4b32      	ldr	r3, [pc, #200]	; (8002170 <HAL_RCC_OscConfig+0x610>)
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	2380      	movs	r3, #128	; 0x80
 80020ac:	049b      	lsls	r3, r3, #18
 80020ae:	4013      	ands	r3, r2
 80020b0:	d0f0      	beq.n	8002094 <HAL_RCC_OscConfig+0x534>
 80020b2:	e057      	b.n	8002164 <HAL_RCC_OscConfig+0x604>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020b4:	4b2e      	ldr	r3, [pc, #184]	; (8002170 <HAL_RCC_OscConfig+0x610>)
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	4b2d      	ldr	r3, [pc, #180]	; (8002170 <HAL_RCC_OscConfig+0x610>)
 80020ba:	4931      	ldr	r1, [pc, #196]	; (8002180 <HAL_RCC_OscConfig+0x620>)
 80020bc:	400a      	ands	r2, r1
 80020be:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80020c0:	4b2b      	ldr	r3, [pc, #172]	; (8002170 <HAL_RCC_OscConfig+0x610>)
 80020c2:	68da      	ldr	r2, [r3, #12]
 80020c4:	4b2a      	ldr	r3, [pc, #168]	; (8002170 <HAL_RCC_OscConfig+0x610>)
 80020c6:	2103      	movs	r1, #3
 80020c8:	438a      	bics	r2, r1
 80020ca:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 80020cc:	4b28      	ldr	r3, [pc, #160]	; (8002170 <HAL_RCC_OscConfig+0x610>)
 80020ce:	68da      	ldr	r2, [r3, #12]
 80020d0:	4b27      	ldr	r3, [pc, #156]	; (8002170 <HAL_RCC_OscConfig+0x610>)
 80020d2:	492d      	ldr	r1, [pc, #180]	; (8002188 <HAL_RCC_OscConfig+0x628>)
 80020d4:	400a      	ands	r2, r1
 80020d6:	60da      	str	r2, [r3, #12]
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020d8:	f7fe fec2 	bl	8000e60 <HAL_GetTick>
 80020dc:	0003      	movs	r3, r0
 80020de:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020e0:	e008      	b.n	80020f4 <HAL_RCC_OscConfig+0x594>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020e2:	f7fe febd 	bl	8000e60 <HAL_GetTick>
 80020e6:	0002      	movs	r2, r0
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	1ad3      	subs	r3, r2, r3
 80020ec:	2b02      	cmp	r3, #2
 80020ee:	d901      	bls.n	80020f4 <HAL_RCC_OscConfig+0x594>
          {
            return HAL_TIMEOUT;
 80020f0:	2303      	movs	r3, #3
 80020f2:	e038      	b.n	8002166 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020f4:	4b1e      	ldr	r3, [pc, #120]	; (8002170 <HAL_RCC_OscConfig+0x610>)
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	2380      	movs	r3, #128	; 0x80
 80020fa:	049b      	lsls	r3, r3, #18
 80020fc:	4013      	ands	r3, r2
 80020fe:	d1f0      	bne.n	80020e2 <HAL_RCC_OscConfig+0x582>
 8002100:	e030      	b.n	8002164 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	69db      	ldr	r3, [r3, #28]
 8002106:	2b01      	cmp	r3, #1
 8002108:	d101      	bne.n	800210e <HAL_RCC_OscConfig+0x5ae>
      {
        return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e02b      	b.n	8002166 <HAL_RCC_OscConfig+0x606>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800210e:	4b18      	ldr	r3, [pc, #96]	; (8002170 <HAL_RCC_OscConfig+0x610>)
 8002110:	68db      	ldr	r3, [r3, #12]
 8002112:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	2203      	movs	r2, #3
 8002118:	401a      	ands	r2, r3
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6a1b      	ldr	r3, [r3, #32]
 800211e:	429a      	cmp	r2, r3
 8002120:	d11e      	bne.n	8002160 <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	2270      	movs	r2, #112	; 0x70
 8002126:	401a      	ands	r2, r3
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800212c:	429a      	cmp	r2, r3
 800212e:	d117      	bne.n	8002160 <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002130:	697a      	ldr	r2, [r7, #20]
 8002132:	23fe      	movs	r3, #254	; 0xfe
 8002134:	01db      	lsls	r3, r3, #7
 8002136:	401a      	ands	r2, r3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800213c:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800213e:	429a      	cmp	r2, r3
 8002140:	d10e      	bne.n	8002160 <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002142:	697a      	ldr	r2, [r7, #20]
 8002144:	23f8      	movs	r3, #248	; 0xf8
 8002146:	039b      	lsls	r3, r3, #14
 8002148:	401a      	ands	r2, r3
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800214e:	429a      	cmp	r2, r3
 8002150:	d106      	bne.n	8002160 <HAL_RCC_OscConfig+0x600>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	0f5b      	lsrs	r3, r3, #29
 8002156:	075a      	lsls	r2, r3, #29
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800215c:	429a      	cmp	r2, r3
 800215e:	d001      	beq.n	8002164 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	e000      	b.n	8002166 <HAL_RCC_OscConfig+0x606>
        }
      }
    }
  }
  return HAL_OK;
 8002164:	2300      	movs	r3, #0
}
 8002166:	0018      	movs	r0, r3
 8002168:	46bd      	mov	sp, r7
 800216a:	b008      	add	sp, #32
 800216c:	bd80      	pop	{r7, pc}
 800216e:	46c0      	nop			; (mov r8, r8)
 8002170:	40021000 	.word	0x40021000
 8002174:	40007000 	.word	0x40007000
 8002178:	00001388 	.word	0x00001388
 800217c:	efffffff 	.word	0xefffffff
 8002180:	feffffff 	.word	0xfeffffff
 8002184:	1fc1808c 	.word	0x1fc1808c
 8002188:	effeffff 	.word	0xeffeffff

0800218c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b084      	sub	sp, #16
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d101      	bne.n	80021a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	e0e9      	b.n	8002374 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80021a0:	4b76      	ldr	r3, [pc, #472]	; (800237c <HAL_RCC_ClockConfig+0x1f0>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	2207      	movs	r2, #7
 80021a6:	4013      	ands	r3, r2
 80021a8:	683a      	ldr	r2, [r7, #0]
 80021aa:	429a      	cmp	r2, r3
 80021ac:	d91e      	bls.n	80021ec <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ae:	4b73      	ldr	r3, [pc, #460]	; (800237c <HAL_RCC_ClockConfig+0x1f0>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	2207      	movs	r2, #7
 80021b4:	4393      	bics	r3, r2
 80021b6:	0019      	movs	r1, r3
 80021b8:	4b70      	ldr	r3, [pc, #448]	; (800237c <HAL_RCC_ClockConfig+0x1f0>)
 80021ba:	683a      	ldr	r2, [r7, #0]
 80021bc:	430a      	orrs	r2, r1
 80021be:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80021c0:	f7fe fe4e 	bl	8000e60 <HAL_GetTick>
 80021c4:	0003      	movs	r3, r0
 80021c6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80021c8:	e009      	b.n	80021de <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021ca:	f7fe fe49 	bl	8000e60 <HAL_GetTick>
 80021ce:	0002      	movs	r2, r0
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	1ad3      	subs	r3, r2, r3
 80021d4:	4a6a      	ldr	r2, [pc, #424]	; (8002380 <HAL_RCC_ClockConfig+0x1f4>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d901      	bls.n	80021de <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80021da:	2303      	movs	r3, #3
 80021dc:	e0ca      	b.n	8002374 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80021de:	4b67      	ldr	r3, [pc, #412]	; (800237c <HAL_RCC_ClockConfig+0x1f0>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	2207      	movs	r2, #7
 80021e4:	4013      	ands	r3, r2
 80021e6:	683a      	ldr	r2, [r7, #0]
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d1ee      	bne.n	80021ca <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	2202      	movs	r2, #2
 80021f2:	4013      	ands	r3, r2
 80021f4:	d015      	beq.n	8002222 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	2204      	movs	r2, #4
 80021fc:	4013      	ands	r3, r2
 80021fe:	d006      	beq.n	800220e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002200:	4b60      	ldr	r3, [pc, #384]	; (8002384 <HAL_RCC_ClockConfig+0x1f8>)
 8002202:	689a      	ldr	r2, [r3, #8]
 8002204:	4b5f      	ldr	r3, [pc, #380]	; (8002384 <HAL_RCC_ClockConfig+0x1f8>)
 8002206:	21e0      	movs	r1, #224	; 0xe0
 8002208:	01c9      	lsls	r1, r1, #7
 800220a:	430a      	orrs	r2, r1
 800220c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800220e:	4b5d      	ldr	r3, [pc, #372]	; (8002384 <HAL_RCC_ClockConfig+0x1f8>)
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	4a5d      	ldr	r2, [pc, #372]	; (8002388 <HAL_RCC_ClockConfig+0x1fc>)
 8002214:	4013      	ands	r3, r2
 8002216:	0019      	movs	r1, r3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	689a      	ldr	r2, [r3, #8]
 800221c:	4b59      	ldr	r3, [pc, #356]	; (8002384 <HAL_RCC_ClockConfig+0x1f8>)
 800221e:	430a      	orrs	r2, r1
 8002220:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	2201      	movs	r2, #1
 8002228:	4013      	ands	r3, r2
 800222a:	d057      	beq.n	80022dc <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	2b01      	cmp	r3, #1
 8002232:	d107      	bne.n	8002244 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002234:	4b53      	ldr	r3, [pc, #332]	; (8002384 <HAL_RCC_ClockConfig+0x1f8>)
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	2380      	movs	r3, #128	; 0x80
 800223a:	029b      	lsls	r3, r3, #10
 800223c:	4013      	ands	r3, r2
 800223e:	d12b      	bne.n	8002298 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	e097      	b.n	8002374 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	2b02      	cmp	r3, #2
 800224a:	d107      	bne.n	800225c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800224c:	4b4d      	ldr	r3, [pc, #308]	; (8002384 <HAL_RCC_ClockConfig+0x1f8>)
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	2380      	movs	r3, #128	; 0x80
 8002252:	049b      	lsls	r3, r3, #18
 8002254:	4013      	ands	r3, r2
 8002256:	d11f      	bne.n	8002298 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	e08b      	b.n	8002374 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d107      	bne.n	8002274 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002264:	4b47      	ldr	r3, [pc, #284]	; (8002384 <HAL_RCC_ClockConfig+0x1f8>)
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	2380      	movs	r3, #128	; 0x80
 800226a:	00db      	lsls	r3, r3, #3
 800226c:	4013      	ands	r3, r2
 800226e:	d113      	bne.n	8002298 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	e07f      	b.n	8002374 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	2b03      	cmp	r3, #3
 800227a:	d106      	bne.n	800228a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800227c:	4b41      	ldr	r3, [pc, #260]	; (8002384 <HAL_RCC_ClockConfig+0x1f8>)
 800227e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002280:	2202      	movs	r2, #2
 8002282:	4013      	ands	r3, r2
 8002284:	d108      	bne.n	8002298 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e074      	b.n	8002374 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800228a:	4b3e      	ldr	r3, [pc, #248]	; (8002384 <HAL_RCC_ClockConfig+0x1f8>)
 800228c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800228e:	2202      	movs	r2, #2
 8002290:	4013      	ands	r3, r2
 8002292:	d101      	bne.n	8002298 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	e06d      	b.n	8002374 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002298:	4b3a      	ldr	r3, [pc, #232]	; (8002384 <HAL_RCC_ClockConfig+0x1f8>)
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	2207      	movs	r2, #7
 800229e:	4393      	bics	r3, r2
 80022a0:	0019      	movs	r1, r3
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	685a      	ldr	r2, [r3, #4]
 80022a6:	4b37      	ldr	r3, [pc, #220]	; (8002384 <HAL_RCC_ClockConfig+0x1f8>)
 80022a8:	430a      	orrs	r2, r1
 80022aa:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022ac:	f7fe fdd8 	bl	8000e60 <HAL_GetTick>
 80022b0:	0003      	movs	r3, r0
 80022b2:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022b4:	e009      	b.n	80022ca <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022b6:	f7fe fdd3 	bl	8000e60 <HAL_GetTick>
 80022ba:	0002      	movs	r2, r0
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	1ad3      	subs	r3, r2, r3
 80022c0:	4a2f      	ldr	r2, [pc, #188]	; (8002380 <HAL_RCC_ClockConfig+0x1f4>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d901      	bls.n	80022ca <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80022c6:	2303      	movs	r3, #3
 80022c8:	e054      	b.n	8002374 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022ca:	4b2e      	ldr	r3, [pc, #184]	; (8002384 <HAL_RCC_ClockConfig+0x1f8>)
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	2238      	movs	r2, #56	; 0x38
 80022d0:	401a      	ands	r2, r3
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	00db      	lsls	r3, r3, #3
 80022d8:	429a      	cmp	r2, r3
 80022da:	d1ec      	bne.n	80022b6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80022dc:	4b27      	ldr	r3, [pc, #156]	; (800237c <HAL_RCC_ClockConfig+0x1f0>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	2207      	movs	r2, #7
 80022e2:	4013      	ands	r3, r2
 80022e4:	683a      	ldr	r2, [r7, #0]
 80022e6:	429a      	cmp	r2, r3
 80022e8:	d21e      	bcs.n	8002328 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ea:	4b24      	ldr	r3, [pc, #144]	; (800237c <HAL_RCC_ClockConfig+0x1f0>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	2207      	movs	r2, #7
 80022f0:	4393      	bics	r3, r2
 80022f2:	0019      	movs	r1, r3
 80022f4:	4b21      	ldr	r3, [pc, #132]	; (800237c <HAL_RCC_ClockConfig+0x1f0>)
 80022f6:	683a      	ldr	r2, [r7, #0]
 80022f8:	430a      	orrs	r2, r1
 80022fa:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80022fc:	f7fe fdb0 	bl	8000e60 <HAL_GetTick>
 8002300:	0003      	movs	r3, r0
 8002302:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002304:	e009      	b.n	800231a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002306:	f7fe fdab 	bl	8000e60 <HAL_GetTick>
 800230a:	0002      	movs	r2, r0
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	1ad3      	subs	r3, r2, r3
 8002310:	4a1b      	ldr	r2, [pc, #108]	; (8002380 <HAL_RCC_ClockConfig+0x1f4>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d901      	bls.n	800231a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002316:	2303      	movs	r3, #3
 8002318:	e02c      	b.n	8002374 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800231a:	4b18      	ldr	r3, [pc, #96]	; (800237c <HAL_RCC_ClockConfig+0x1f0>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	2207      	movs	r2, #7
 8002320:	4013      	ands	r3, r2
 8002322:	683a      	ldr	r2, [r7, #0]
 8002324:	429a      	cmp	r2, r3
 8002326:	d1ee      	bne.n	8002306 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	2204      	movs	r2, #4
 800232e:	4013      	ands	r3, r2
 8002330:	d009      	beq.n	8002346 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002332:	4b14      	ldr	r3, [pc, #80]	; (8002384 <HAL_RCC_ClockConfig+0x1f8>)
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	4a15      	ldr	r2, [pc, #84]	; (800238c <HAL_RCC_ClockConfig+0x200>)
 8002338:	4013      	ands	r3, r2
 800233a:	0019      	movs	r1, r3
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	68da      	ldr	r2, [r3, #12]
 8002340:	4b10      	ldr	r3, [pc, #64]	; (8002384 <HAL_RCC_ClockConfig+0x1f8>)
 8002342:	430a      	orrs	r2, r1
 8002344:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002346:	f000 f829 	bl	800239c <HAL_RCC_GetSysClockFreq>
 800234a:	0001      	movs	r1, r0
 800234c:	4b0d      	ldr	r3, [pc, #52]	; (8002384 <HAL_RCC_ClockConfig+0x1f8>)
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	0a1b      	lsrs	r3, r3, #8
 8002352:	220f      	movs	r2, #15
 8002354:	401a      	ands	r2, r3
 8002356:	4b0e      	ldr	r3, [pc, #56]	; (8002390 <HAL_RCC_ClockConfig+0x204>)
 8002358:	0092      	lsls	r2, r2, #2
 800235a:	58d3      	ldr	r3, [r2, r3]
 800235c:	221f      	movs	r2, #31
 800235e:	4013      	ands	r3, r2
 8002360:	000a      	movs	r2, r1
 8002362:	40da      	lsrs	r2, r3
 8002364:	4b0b      	ldr	r3, [pc, #44]	; (8002394 <HAL_RCC_ClockConfig+0x208>)
 8002366:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002368:	4b0b      	ldr	r3, [pc, #44]	; (8002398 <HAL_RCC_ClockConfig+0x20c>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	0018      	movs	r0, r3
 800236e:	f7fe fd1b 	bl	8000da8 <HAL_InitTick>
 8002372:	0003      	movs	r3, r0
}
 8002374:	0018      	movs	r0, r3
 8002376:	46bd      	mov	sp, r7
 8002378:	b004      	add	sp, #16
 800237a:	bd80      	pop	{r7, pc}
 800237c:	40022000 	.word	0x40022000
 8002380:	00001388 	.word	0x00001388
 8002384:	40021000 	.word	0x40021000
 8002388:	fffff0ff 	.word	0xfffff0ff
 800238c:	ffff8fff 	.word	0xffff8fff
 8002390:	08003960 	.word	0x08003960
 8002394:	2000000c 	.word	0x2000000c
 8002398:	20000010 	.word	0x20000010

0800239c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b086      	sub	sp, #24
 80023a0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80023a2:	4b3c      	ldr	r3, [pc, #240]	; (8002494 <HAL_RCC_GetSysClockFreq+0xf8>)
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	2238      	movs	r2, #56	; 0x38
 80023a8:	4013      	ands	r3, r2
 80023aa:	d10f      	bne.n	80023cc <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80023ac:	4b39      	ldr	r3, [pc, #228]	; (8002494 <HAL_RCC_GetSysClockFreq+0xf8>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	0adb      	lsrs	r3, r3, #11
 80023b2:	2207      	movs	r2, #7
 80023b4:	4013      	ands	r3, r2
 80023b6:	2201      	movs	r2, #1
 80023b8:	409a      	lsls	r2, r3
 80023ba:	0013      	movs	r3, r2
 80023bc:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80023be:	6839      	ldr	r1, [r7, #0]
 80023c0:	4835      	ldr	r0, [pc, #212]	; (8002498 <HAL_RCC_GetSysClockFreq+0xfc>)
 80023c2:	f7fd fe9d 	bl	8000100 <__udivsi3>
 80023c6:	0003      	movs	r3, r0
 80023c8:	613b      	str	r3, [r7, #16]
 80023ca:	e05d      	b.n	8002488 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80023cc:	4b31      	ldr	r3, [pc, #196]	; (8002494 <HAL_RCC_GetSysClockFreq+0xf8>)
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	2238      	movs	r2, #56	; 0x38
 80023d2:	4013      	ands	r3, r2
 80023d4:	2b08      	cmp	r3, #8
 80023d6:	d102      	bne.n	80023de <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80023d8:	4b30      	ldr	r3, [pc, #192]	; (800249c <HAL_RCC_GetSysClockFreq+0x100>)
 80023da:	613b      	str	r3, [r7, #16]
 80023dc:	e054      	b.n	8002488 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023de:	4b2d      	ldr	r3, [pc, #180]	; (8002494 <HAL_RCC_GetSysClockFreq+0xf8>)
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	2238      	movs	r2, #56	; 0x38
 80023e4:	4013      	ands	r3, r2
 80023e6:	2b10      	cmp	r3, #16
 80023e8:	d138      	bne.n	800245c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80023ea:	4b2a      	ldr	r3, [pc, #168]	; (8002494 <HAL_RCC_GetSysClockFreq+0xf8>)
 80023ec:	68db      	ldr	r3, [r3, #12]
 80023ee:	2203      	movs	r2, #3
 80023f0:	4013      	ands	r3, r2
 80023f2:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80023f4:	4b27      	ldr	r3, [pc, #156]	; (8002494 <HAL_RCC_GetSysClockFreq+0xf8>)
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	091b      	lsrs	r3, r3, #4
 80023fa:	2207      	movs	r2, #7
 80023fc:	4013      	ands	r3, r2
 80023fe:	3301      	adds	r3, #1
 8002400:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	2b03      	cmp	r3, #3
 8002406:	d10d      	bne.n	8002424 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002408:	68b9      	ldr	r1, [r7, #8]
 800240a:	4824      	ldr	r0, [pc, #144]	; (800249c <HAL_RCC_GetSysClockFreq+0x100>)
 800240c:	f7fd fe78 	bl	8000100 <__udivsi3>
 8002410:	0003      	movs	r3, r0
 8002412:	0019      	movs	r1, r3
 8002414:	4b1f      	ldr	r3, [pc, #124]	; (8002494 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	0a1b      	lsrs	r3, r3, #8
 800241a:	227f      	movs	r2, #127	; 0x7f
 800241c:	4013      	ands	r3, r2
 800241e:	434b      	muls	r3, r1
 8002420:	617b      	str	r3, [r7, #20]
        break;
 8002422:	e00d      	b.n	8002440 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002424:	68b9      	ldr	r1, [r7, #8]
 8002426:	481c      	ldr	r0, [pc, #112]	; (8002498 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002428:	f7fd fe6a 	bl	8000100 <__udivsi3>
 800242c:	0003      	movs	r3, r0
 800242e:	0019      	movs	r1, r3
 8002430:	4b18      	ldr	r3, [pc, #96]	; (8002494 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	0a1b      	lsrs	r3, r3, #8
 8002436:	227f      	movs	r2, #127	; 0x7f
 8002438:	4013      	ands	r3, r2
 800243a:	434b      	muls	r3, r1
 800243c:	617b      	str	r3, [r7, #20]
        break;
 800243e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002440:	4b14      	ldr	r3, [pc, #80]	; (8002494 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	0f5b      	lsrs	r3, r3, #29
 8002446:	2207      	movs	r2, #7
 8002448:	4013      	ands	r3, r2
 800244a:	3301      	adds	r3, #1
 800244c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800244e:	6879      	ldr	r1, [r7, #4]
 8002450:	6978      	ldr	r0, [r7, #20]
 8002452:	f7fd fe55 	bl	8000100 <__udivsi3>
 8002456:	0003      	movs	r3, r0
 8002458:	613b      	str	r3, [r7, #16]
 800245a:	e015      	b.n	8002488 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800245c:	4b0d      	ldr	r3, [pc, #52]	; (8002494 <HAL_RCC_GetSysClockFreq+0xf8>)
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	2238      	movs	r2, #56	; 0x38
 8002462:	4013      	ands	r3, r2
 8002464:	2b20      	cmp	r3, #32
 8002466:	d103      	bne.n	8002470 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002468:	2380      	movs	r3, #128	; 0x80
 800246a:	021b      	lsls	r3, r3, #8
 800246c:	613b      	str	r3, [r7, #16]
 800246e:	e00b      	b.n	8002488 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002470:	4b08      	ldr	r3, [pc, #32]	; (8002494 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	2238      	movs	r2, #56	; 0x38
 8002476:	4013      	ands	r3, r2
 8002478:	2b18      	cmp	r3, #24
 800247a:	d103      	bne.n	8002484 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800247c:	23fa      	movs	r3, #250	; 0xfa
 800247e:	01db      	lsls	r3, r3, #7
 8002480:	613b      	str	r3, [r7, #16]
 8002482:	e001      	b.n	8002488 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002484:	2300      	movs	r3, #0
 8002486:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002488:	693b      	ldr	r3, [r7, #16]
}
 800248a:	0018      	movs	r0, r3
 800248c:	46bd      	mov	sp, r7
 800248e:	b006      	add	sp, #24
 8002490:	bd80      	pop	{r7, pc}
 8002492:	46c0      	nop			; (mov r8, r8)
 8002494:	40021000 	.word	0x40021000
 8002498:	00f42400 	.word	0x00f42400
 800249c:	007a1200 	.word	0x007a1200

080024a0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024a4:	4b02      	ldr	r3, [pc, #8]	; (80024b0 <HAL_RCC_GetHCLKFreq+0x10>)
 80024a6:	681b      	ldr	r3, [r3, #0]
}
 80024a8:	0018      	movs	r0, r3
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	46c0      	nop			; (mov r8, r8)
 80024b0:	2000000c 	.word	0x2000000c

080024b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024b4:	b5b0      	push	{r4, r5, r7, lr}
 80024b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80024b8:	f7ff fff2 	bl	80024a0 <HAL_RCC_GetHCLKFreq>
 80024bc:	0004      	movs	r4, r0
 80024be:	f7ff fb43 	bl	8001b48 <LL_RCC_GetAPB1Prescaler>
 80024c2:	0003      	movs	r3, r0
 80024c4:	0b1a      	lsrs	r2, r3, #12
 80024c6:	4b05      	ldr	r3, [pc, #20]	; (80024dc <HAL_RCC_GetPCLK1Freq+0x28>)
 80024c8:	0092      	lsls	r2, r2, #2
 80024ca:	58d3      	ldr	r3, [r2, r3]
 80024cc:	221f      	movs	r2, #31
 80024ce:	4013      	ands	r3, r2
 80024d0:	40dc      	lsrs	r4, r3
 80024d2:	0023      	movs	r3, r4
}
 80024d4:	0018      	movs	r0, r3
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bdb0      	pop	{r4, r5, r7, pc}
 80024da:	46c0      	nop			; (mov r8, r8)
 80024dc:	080039a0 	.word	0x080039a0

080024e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b086      	sub	sp, #24
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80024e8:	2313      	movs	r3, #19
 80024ea:	18fb      	adds	r3, r7, r3
 80024ec:	2200      	movs	r2, #0
 80024ee:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80024f0:	2312      	movs	r3, #18
 80024f2:	18fb      	adds	r3, r7, r3
 80024f4:	2200      	movs	r2, #0
 80024f6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	2380      	movs	r3, #128	; 0x80
 80024fe:	029b      	lsls	r3, r3, #10
 8002500:	4013      	ands	r3, r2
 8002502:	d100      	bne.n	8002506 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002504:	e0a3      	b.n	800264e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002506:	2011      	movs	r0, #17
 8002508:	183b      	adds	r3, r7, r0
 800250a:	2200      	movs	r2, #0
 800250c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800250e:	4b86      	ldr	r3, [pc, #536]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002510:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002512:	2380      	movs	r3, #128	; 0x80
 8002514:	055b      	lsls	r3, r3, #21
 8002516:	4013      	ands	r3, r2
 8002518:	d110      	bne.n	800253c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800251a:	4b83      	ldr	r3, [pc, #524]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800251c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800251e:	4b82      	ldr	r3, [pc, #520]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002520:	2180      	movs	r1, #128	; 0x80
 8002522:	0549      	lsls	r1, r1, #21
 8002524:	430a      	orrs	r2, r1
 8002526:	63da      	str	r2, [r3, #60]	; 0x3c
 8002528:	4b7f      	ldr	r3, [pc, #508]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800252a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800252c:	2380      	movs	r3, #128	; 0x80
 800252e:	055b      	lsls	r3, r3, #21
 8002530:	4013      	ands	r3, r2
 8002532:	60bb      	str	r3, [r7, #8]
 8002534:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002536:	183b      	adds	r3, r7, r0
 8002538:	2201      	movs	r2, #1
 800253a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800253c:	4b7b      	ldr	r3, [pc, #492]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	4b7a      	ldr	r3, [pc, #488]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002542:	2180      	movs	r1, #128	; 0x80
 8002544:	0049      	lsls	r1, r1, #1
 8002546:	430a      	orrs	r2, r1
 8002548:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800254a:	f7fe fc89 	bl	8000e60 <HAL_GetTick>
 800254e:	0003      	movs	r3, r0
 8002550:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002552:	e00b      	b.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002554:	f7fe fc84 	bl	8000e60 <HAL_GetTick>
 8002558:	0002      	movs	r2, r0
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	2b02      	cmp	r3, #2
 8002560:	d904      	bls.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002562:	2313      	movs	r3, #19
 8002564:	18fb      	adds	r3, r7, r3
 8002566:	2203      	movs	r2, #3
 8002568:	701a      	strb	r2, [r3, #0]
        break;
 800256a:	e005      	b.n	8002578 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800256c:	4b6f      	ldr	r3, [pc, #444]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	2380      	movs	r3, #128	; 0x80
 8002572:	005b      	lsls	r3, r3, #1
 8002574:	4013      	ands	r3, r2
 8002576:	d0ed      	beq.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002578:	2313      	movs	r3, #19
 800257a:	18fb      	adds	r3, r7, r3
 800257c:	781b      	ldrb	r3, [r3, #0]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d154      	bne.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002582:	4b69      	ldr	r3, [pc, #420]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002584:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002586:	23c0      	movs	r3, #192	; 0xc0
 8002588:	009b      	lsls	r3, r3, #2
 800258a:	4013      	ands	r3, r2
 800258c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d019      	beq.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	699b      	ldr	r3, [r3, #24]
 8002598:	697a      	ldr	r2, [r7, #20]
 800259a:	429a      	cmp	r2, r3
 800259c:	d014      	beq.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800259e:	4b62      	ldr	r3, [pc, #392]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80025a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025a2:	4a63      	ldr	r2, [pc, #396]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80025a4:	4013      	ands	r3, r2
 80025a6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80025a8:	4b5f      	ldr	r3, [pc, #380]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80025aa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80025ac:	4b5e      	ldr	r3, [pc, #376]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80025ae:	2180      	movs	r1, #128	; 0x80
 80025b0:	0249      	lsls	r1, r1, #9
 80025b2:	430a      	orrs	r2, r1
 80025b4:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80025b6:	4b5c      	ldr	r3, [pc, #368]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80025b8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80025ba:	4b5b      	ldr	r3, [pc, #364]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80025bc:	495d      	ldr	r1, [pc, #372]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80025be:	400a      	ands	r2, r1
 80025c0:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80025c2:	4b59      	ldr	r3, [pc, #356]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80025c4:	697a      	ldr	r2, [r7, #20]
 80025c6:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	2201      	movs	r2, #1
 80025cc:	4013      	ands	r3, r2
 80025ce:	d016      	beq.n	80025fe <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025d0:	f7fe fc46 	bl	8000e60 <HAL_GetTick>
 80025d4:	0003      	movs	r3, r0
 80025d6:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025d8:	e00c      	b.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025da:	f7fe fc41 	bl	8000e60 <HAL_GetTick>
 80025de:	0002      	movs	r2, r0
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	1ad3      	subs	r3, r2, r3
 80025e4:	4a54      	ldr	r2, [pc, #336]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d904      	bls.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80025ea:	2313      	movs	r3, #19
 80025ec:	18fb      	adds	r3, r7, r3
 80025ee:	2203      	movs	r2, #3
 80025f0:	701a      	strb	r2, [r3, #0]
            break;
 80025f2:	e004      	b.n	80025fe <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025f4:	4b4c      	ldr	r3, [pc, #304]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80025f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025f8:	2202      	movs	r2, #2
 80025fa:	4013      	ands	r3, r2
 80025fc:	d0ed      	beq.n	80025da <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80025fe:	2313      	movs	r3, #19
 8002600:	18fb      	adds	r3, r7, r3
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d10a      	bne.n	800261e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002608:	4b47      	ldr	r3, [pc, #284]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800260a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800260c:	4a48      	ldr	r2, [pc, #288]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800260e:	4013      	ands	r3, r2
 8002610:	0019      	movs	r1, r3
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	699a      	ldr	r2, [r3, #24]
 8002616:	4b44      	ldr	r3, [pc, #272]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002618:	430a      	orrs	r2, r1
 800261a:	65da      	str	r2, [r3, #92]	; 0x5c
 800261c:	e00c      	b.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800261e:	2312      	movs	r3, #18
 8002620:	18fb      	adds	r3, r7, r3
 8002622:	2213      	movs	r2, #19
 8002624:	18ba      	adds	r2, r7, r2
 8002626:	7812      	ldrb	r2, [r2, #0]
 8002628:	701a      	strb	r2, [r3, #0]
 800262a:	e005      	b.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800262c:	2312      	movs	r3, #18
 800262e:	18fb      	adds	r3, r7, r3
 8002630:	2213      	movs	r2, #19
 8002632:	18ba      	adds	r2, r7, r2
 8002634:	7812      	ldrb	r2, [r2, #0]
 8002636:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002638:	2311      	movs	r3, #17
 800263a:	18fb      	adds	r3, r7, r3
 800263c:	781b      	ldrb	r3, [r3, #0]
 800263e:	2b01      	cmp	r3, #1
 8002640:	d105      	bne.n	800264e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002642:	4b39      	ldr	r3, [pc, #228]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002644:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002646:	4b38      	ldr	r3, [pc, #224]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002648:	493c      	ldr	r1, [pc, #240]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800264a:	400a      	ands	r2, r1
 800264c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	2201      	movs	r2, #1
 8002654:	4013      	ands	r3, r2
 8002656:	d009      	beq.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002658:	4b33      	ldr	r3, [pc, #204]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800265a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800265c:	2203      	movs	r2, #3
 800265e:	4393      	bics	r3, r2
 8002660:	0019      	movs	r1, r3
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	685a      	ldr	r2, [r3, #4]
 8002666:	4b30      	ldr	r3, [pc, #192]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002668:	430a      	orrs	r2, r1
 800266a:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	2202      	movs	r2, #2
 8002672:	4013      	ands	r3, r2
 8002674:	d009      	beq.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002676:	4b2c      	ldr	r3, [pc, #176]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002678:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800267a:	220c      	movs	r2, #12
 800267c:	4393      	bics	r3, r2
 800267e:	0019      	movs	r1, r3
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	689a      	ldr	r2, [r3, #8]
 8002684:	4b28      	ldr	r3, [pc, #160]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002686:	430a      	orrs	r2, r1
 8002688:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	2220      	movs	r2, #32
 8002690:	4013      	ands	r3, r2
 8002692:	d009      	beq.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002694:	4b24      	ldr	r3, [pc, #144]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002696:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002698:	4a29      	ldr	r2, [pc, #164]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800269a:	4013      	ands	r3, r2
 800269c:	0019      	movs	r1, r3
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	68da      	ldr	r2, [r3, #12]
 80026a2:	4b21      	ldr	r3, [pc, #132]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80026a4:	430a      	orrs	r2, r1
 80026a6:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	2380      	movs	r3, #128	; 0x80
 80026ae:	01db      	lsls	r3, r3, #7
 80026b0:	4013      	ands	r3, r2
 80026b2:	d015      	beq.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80026b4:	4b1c      	ldr	r3, [pc, #112]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80026b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	0899      	lsrs	r1, r3, #2
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	695a      	ldr	r2, [r3, #20]
 80026c0:	4b19      	ldr	r3, [pc, #100]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80026c2:	430a      	orrs	r2, r1
 80026c4:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	695a      	ldr	r2, [r3, #20]
 80026ca:	2380      	movs	r3, #128	; 0x80
 80026cc:	05db      	lsls	r3, r3, #23
 80026ce:	429a      	cmp	r2, r3
 80026d0:	d106      	bne.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80026d2:	4b15      	ldr	r3, [pc, #84]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80026d4:	68da      	ldr	r2, [r3, #12]
 80026d6:	4b14      	ldr	r3, [pc, #80]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80026d8:	2180      	movs	r1, #128	; 0x80
 80026da:	0249      	lsls	r1, r1, #9
 80026dc:	430a      	orrs	r2, r1
 80026de:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	2380      	movs	r3, #128	; 0x80
 80026e6:	011b      	lsls	r3, r3, #4
 80026e8:	4013      	ands	r3, r2
 80026ea:	d016      	beq.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80026ec:	4b0e      	ldr	r3, [pc, #56]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80026ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026f0:	4a14      	ldr	r2, [pc, #80]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80026f2:	4013      	ands	r3, r2
 80026f4:	0019      	movs	r1, r3
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	691a      	ldr	r2, [r3, #16]
 80026fa:	4b0b      	ldr	r3, [pc, #44]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80026fc:	430a      	orrs	r2, r1
 80026fe:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	691a      	ldr	r2, [r3, #16]
 8002704:	2380      	movs	r3, #128	; 0x80
 8002706:	01db      	lsls	r3, r3, #7
 8002708:	429a      	cmp	r2, r3
 800270a:	d106      	bne.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800270c:	4b06      	ldr	r3, [pc, #24]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800270e:	68da      	ldr	r2, [r3, #12]
 8002710:	4b05      	ldr	r3, [pc, #20]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002712:	2180      	movs	r1, #128	; 0x80
 8002714:	0249      	lsls	r1, r1, #9
 8002716:	430a      	orrs	r2, r1
 8002718:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800271a:	2312      	movs	r3, #18
 800271c:	18fb      	adds	r3, r7, r3
 800271e:	781b      	ldrb	r3, [r3, #0]
}
 8002720:	0018      	movs	r0, r3
 8002722:	46bd      	mov	sp, r7
 8002724:	b006      	add	sp, #24
 8002726:	bd80      	pop	{r7, pc}
 8002728:	40021000 	.word	0x40021000
 800272c:	40007000 	.word	0x40007000
 8002730:	fffffcff 	.word	0xfffffcff
 8002734:	fffeffff 	.word	0xfffeffff
 8002738:	00001388 	.word	0x00001388
 800273c:	efffffff 	.word	0xefffffff
 8002740:	ffffcfff 	.word	0xffffcfff
 8002744:	ffff3fff 	.word	0xffff3fff

08002748 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b082      	sub	sp, #8
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d101      	bne.n	800275a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e046      	b.n	80027e8 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2284      	movs	r2, #132	; 0x84
 800275e:	589b      	ldr	r3, [r3, r2]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d107      	bne.n	8002774 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2280      	movs	r2, #128	; 0x80
 8002768:	2100      	movs	r1, #0
 800276a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	0018      	movs	r0, r3
 8002770:	f7fe fa14 	bl	8000b9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2284      	movs	r2, #132	; 0x84
 8002778:	2124      	movs	r1, #36	; 0x24
 800277a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	2101      	movs	r1, #1
 8002788:	438a      	bics	r2, r1
 800278a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	0018      	movs	r0, r3
 8002790:	f000 fb20 	bl	8002dd4 <UART_SetConfig>
 8002794:	0003      	movs	r3, r0
 8002796:	2b01      	cmp	r3, #1
 8002798:	d101      	bne.n	800279e <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e024      	b.n	80027e8 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d003      	beq.n	80027ae <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	0018      	movs	r0, r3
 80027aa:	f000 fcbd 	bl	8003128 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	685a      	ldr	r2, [r3, #4]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	490d      	ldr	r1, [pc, #52]	; (80027f0 <HAL_UART_Init+0xa8>)
 80027ba:	400a      	ands	r2, r1
 80027bc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	689a      	ldr	r2, [r3, #8]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	212a      	movs	r1, #42	; 0x2a
 80027ca:	438a      	bics	r2, r1
 80027cc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2101      	movs	r1, #1
 80027da:	430a      	orrs	r2, r1
 80027dc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	0018      	movs	r0, r3
 80027e2:	f000 fd55 	bl	8003290 <UART_CheckIdleState>
 80027e6:	0003      	movs	r3, r0
}
 80027e8:	0018      	movs	r0, r3
 80027ea:	46bd      	mov	sp, r7
 80027ec:	b002      	add	sp, #8
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	ffffb7ff 	.word	0xffffb7ff

080027f4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b084      	sub	sp, #16
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	60f8      	str	r0, [r7, #12]
 80027fc:	60b9      	str	r1, [r7, #8]
 80027fe:	1dbb      	adds	r3, r7, #6
 8002800:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	2284      	movs	r2, #132	; 0x84
 8002806:	589b      	ldr	r3, [r3, r2]
 8002808:	2b20      	cmp	r3, #32
 800280a:	d000      	beq.n	800280e <HAL_UART_Transmit_DMA+0x1a>
 800280c:	e07b      	b.n	8002906 <HAL_UART_Transmit_DMA+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d003      	beq.n	800281c <HAL_UART_Transmit_DMA+0x28>
 8002814:	1dbb      	adds	r3, r7, #6
 8002816:	881b      	ldrh	r3, [r3, #0]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d101      	bne.n	8002820 <HAL_UART_Transmit_DMA+0x2c>
    {
      return HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	e073      	b.n	8002908 <HAL_UART_Transmit_DMA+0x114>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	689a      	ldr	r2, [r3, #8]
 8002824:	2380      	movs	r3, #128	; 0x80
 8002826:	015b      	lsls	r3, r3, #5
 8002828:	429a      	cmp	r2, r3
 800282a:	d109      	bne.n	8002840 <HAL_UART_Transmit_DMA+0x4c>
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	691b      	ldr	r3, [r3, #16]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d105      	bne.n	8002840 <HAL_UART_Transmit_DMA+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	2201      	movs	r2, #1
 8002838:	4013      	ands	r3, r2
 800283a:	d001      	beq.n	8002840 <HAL_UART_Transmit_DMA+0x4c>
      {
        return  HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	e063      	b.n	8002908 <HAL_UART_Transmit_DMA+0x114>
      }
    }

    __HAL_LOCK(huart);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2280      	movs	r2, #128	; 0x80
 8002844:	5c9b      	ldrb	r3, [r3, r2]
 8002846:	2b01      	cmp	r3, #1
 8002848:	d101      	bne.n	800284e <HAL_UART_Transmit_DMA+0x5a>
 800284a:	2302      	movs	r3, #2
 800284c:	e05c      	b.n	8002908 <HAL_UART_Transmit_DMA+0x114>
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2280      	movs	r2, #128	; 0x80
 8002852:	2101      	movs	r1, #1
 8002854:	5499      	strb	r1, [r3, r2]

    huart->pTxBuffPtr  = pData;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	68ba      	ldr	r2, [r7, #8]
 800285a:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	1dba      	adds	r2, r7, #6
 8002860:	2154      	movs	r1, #84	; 0x54
 8002862:	8812      	ldrh	r2, [r2, #0]
 8002864:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	1dba      	adds	r2, r7, #6
 800286a:	2156      	movs	r1, #86	; 0x56
 800286c:	8812      	ldrh	r2, [r2, #0]
 800286e:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	228c      	movs	r2, #140	; 0x8c
 8002874:	2100      	movs	r1, #0
 8002876:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2284      	movs	r2, #132	; 0x84
 800287c:	2121      	movs	r1, #33	; 0x21
 800287e:	5099      	str	r1, [r3, r2]

    if (huart->hdmatx != NULL)
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002884:	2b00      	cmp	r3, #0
 8002886:	d02c      	beq.n	80028e2 <HAL_UART_Transmit_DMA+0xee>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800288c:	4a20      	ldr	r2, [pc, #128]	; (8002910 <HAL_UART_Transmit_DMA+0x11c>)
 800288e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002894:	4a1f      	ldr	r2, [pc, #124]	; (8002914 <HAL_UART_Transmit_DMA+0x120>)
 8002896:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800289c:	4a1e      	ldr	r2, [pc, #120]	; (8002918 <HAL_UART_Transmit_DMA+0x124>)
 800289e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80028a4:	2200      	movs	r2, #0
 80028a6:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	6f98      	ldr	r0, [r3, #120]	; 0x78
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028b0:	0019      	movs	r1, r3
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	3328      	adds	r3, #40	; 0x28
 80028b8:	001a      	movs	r2, r3
 80028ba:	1dbb      	adds	r3, r7, #6
 80028bc:	881b      	ldrh	r3, [r3, #0]
 80028be:	f7fe fc73 	bl	80011a8 <HAL_DMA_Start_IT>
 80028c2:	1e03      	subs	r3, r0, #0
 80028c4:	d00d      	beq.n	80028e2 <HAL_UART_Transmit_DMA+0xee>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	228c      	movs	r2, #140	; 0x8c
 80028ca:	2110      	movs	r1, #16
 80028cc:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2280      	movs	r2, #128	; 0x80
 80028d2:	2100      	movs	r1, #0
 80028d4:	5499      	strb	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2284      	movs	r2, #132	; 0x84
 80028da:	2120      	movs	r1, #32
 80028dc:	5099      	str	r1, [r3, r2]

        return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e012      	b.n	8002908 <HAL_UART_Transmit_DMA+0x114>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	2240      	movs	r2, #64	; 0x40
 80028e8:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	2280      	movs	r2, #128	; 0x80
 80028ee:	2100      	movs	r1, #0
 80028f0:	5499      	strb	r1, [r3, r2]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	689a      	ldr	r2, [r3, #8]
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	2180      	movs	r1, #128	; 0x80
 80028fe:	430a      	orrs	r2, r1
 8002900:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8002902:	2300      	movs	r3, #0
 8002904:	e000      	b.n	8002908 <HAL_UART_Transmit_DMA+0x114>
  }
  else
  {
    return HAL_BUSY;
 8002906:	2302      	movs	r3, #2
  }
}
 8002908:	0018      	movs	r0, r3
 800290a:	46bd      	mov	sp, r7
 800290c:	b004      	add	sp, #16
 800290e:	bd80      	pop	{r7, pc}
 8002910:	080034c9 	.word	0x080034c9
 8002914:	0800351d 	.word	0x0800351d
 8002918:	0800353b 	.word	0x0800353b

0800291c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b088      	sub	sp, #32
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	69db      	ldr	r3, [r3, #28]
 800292a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800293c:	69fb      	ldr	r3, [r7, #28]
 800293e:	4abb      	ldr	r2, [pc, #748]	; (8002c2c <HAL_UART_IRQHandler+0x310>)
 8002940:	4013      	ands	r3, r2
 8002942:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d117      	bne.n	800297a <HAL_UART_IRQHandler+0x5e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800294a:	69fb      	ldr	r3, [r7, #28]
 800294c:	2220      	movs	r2, #32
 800294e:	4013      	ands	r3, r2
 8002950:	d013      	beq.n	800297a <HAL_UART_IRQHandler+0x5e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002952:	69bb      	ldr	r3, [r7, #24]
 8002954:	2220      	movs	r2, #32
 8002956:	4013      	ands	r3, r2
 8002958:	d104      	bne.n	8002964 <HAL_UART_IRQHandler+0x48>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800295a:	697a      	ldr	r2, [r7, #20]
 800295c:	2380      	movs	r3, #128	; 0x80
 800295e:	055b      	lsls	r3, r3, #21
 8002960:	4013      	ands	r3, r2
 8002962:	d00a      	beq.n	800297a <HAL_UART_IRQHandler+0x5e>
    {
      if (huart->RxISR != NULL)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002968:	2b00      	cmp	r3, #0
 800296a:	d100      	bne.n	800296e <HAL_UART_IRQHandler+0x52>
 800296c:	e1fd      	b.n	8002d6a <HAL_UART_IRQHandler+0x44e>
      {
        huart->RxISR(huart);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	0010      	movs	r0, r2
 8002976:	4798      	blx	r3
      }
      return;
 8002978:	e1f7      	b.n	8002d6a <HAL_UART_IRQHandler+0x44e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d100      	bne.n	8002982 <HAL_UART_IRQHandler+0x66>
 8002980:	e0de      	b.n	8002b40 <HAL_UART_IRQHandler+0x224>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	4aaa      	ldr	r2, [pc, #680]	; (8002c30 <HAL_UART_IRQHandler+0x314>)
 8002986:	4013      	ands	r3, r2
 8002988:	d104      	bne.n	8002994 <HAL_UART_IRQHandler+0x78>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800298a:	69bb      	ldr	r3, [r7, #24]
 800298c:	4aa9      	ldr	r2, [pc, #676]	; (8002c34 <HAL_UART_IRQHandler+0x318>)
 800298e:	4013      	ands	r3, r2
 8002990:	d100      	bne.n	8002994 <HAL_UART_IRQHandler+0x78>
 8002992:	e0d5      	b.n	8002b40 <HAL_UART_IRQHandler+0x224>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002994:	69fb      	ldr	r3, [r7, #28]
 8002996:	2201      	movs	r2, #1
 8002998:	4013      	ands	r3, r2
 800299a:	d010      	beq.n	80029be <HAL_UART_IRQHandler+0xa2>
 800299c:	69ba      	ldr	r2, [r7, #24]
 800299e:	2380      	movs	r3, #128	; 0x80
 80029a0:	005b      	lsls	r3, r3, #1
 80029a2:	4013      	ands	r3, r2
 80029a4:	d00b      	beq.n	80029be <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	2201      	movs	r2, #1
 80029ac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	228c      	movs	r2, #140	; 0x8c
 80029b2:	589b      	ldr	r3, [r3, r2]
 80029b4:	2201      	movs	r2, #1
 80029b6:	431a      	orrs	r2, r3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	218c      	movs	r1, #140	; 0x8c
 80029bc:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	2202      	movs	r2, #2
 80029c2:	4013      	ands	r3, r2
 80029c4:	d00f      	beq.n	80029e6 <HAL_UART_IRQHandler+0xca>
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	2201      	movs	r2, #1
 80029ca:	4013      	ands	r3, r2
 80029cc:	d00b      	beq.n	80029e6 <HAL_UART_IRQHandler+0xca>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	2202      	movs	r2, #2
 80029d4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	228c      	movs	r2, #140	; 0x8c
 80029da:	589b      	ldr	r3, [r3, r2]
 80029dc:	2204      	movs	r2, #4
 80029de:	431a      	orrs	r2, r3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	218c      	movs	r1, #140	; 0x8c
 80029e4:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80029e6:	69fb      	ldr	r3, [r7, #28]
 80029e8:	2204      	movs	r2, #4
 80029ea:	4013      	ands	r3, r2
 80029ec:	d00f      	beq.n	8002a0e <HAL_UART_IRQHandler+0xf2>
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	2201      	movs	r2, #1
 80029f2:	4013      	ands	r3, r2
 80029f4:	d00b      	beq.n	8002a0e <HAL_UART_IRQHandler+0xf2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	2204      	movs	r2, #4
 80029fc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	228c      	movs	r2, #140	; 0x8c
 8002a02:	589b      	ldr	r3, [r3, r2]
 8002a04:	2202      	movs	r2, #2
 8002a06:	431a      	orrs	r2, r3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	218c      	movs	r1, #140	; 0x8c
 8002a0c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002a0e:	69fb      	ldr	r3, [r7, #28]
 8002a10:	2208      	movs	r2, #8
 8002a12:	4013      	ands	r3, r2
 8002a14:	d013      	beq.n	8002a3e <HAL_UART_IRQHandler+0x122>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002a16:	69bb      	ldr	r3, [r7, #24]
 8002a18:	2220      	movs	r2, #32
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	d103      	bne.n	8002a26 <HAL_UART_IRQHandler+0x10a>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	4a83      	ldr	r2, [pc, #524]	; (8002c30 <HAL_UART_IRQHandler+0x314>)
 8002a22:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002a24:	d00b      	beq.n	8002a3e <HAL_UART_IRQHandler+0x122>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	2208      	movs	r2, #8
 8002a2c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	228c      	movs	r2, #140	; 0x8c
 8002a32:	589b      	ldr	r3, [r3, r2]
 8002a34:	2208      	movs	r2, #8
 8002a36:	431a      	orrs	r2, r3
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	218c      	movs	r1, #140	; 0x8c
 8002a3c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002a3e:	69fa      	ldr	r2, [r7, #28]
 8002a40:	2380      	movs	r3, #128	; 0x80
 8002a42:	011b      	lsls	r3, r3, #4
 8002a44:	4013      	ands	r3, r2
 8002a46:	d011      	beq.n	8002a6c <HAL_UART_IRQHandler+0x150>
 8002a48:	69ba      	ldr	r2, [r7, #24]
 8002a4a:	2380      	movs	r3, #128	; 0x80
 8002a4c:	04db      	lsls	r3, r3, #19
 8002a4e:	4013      	ands	r3, r2
 8002a50:	d00c      	beq.n	8002a6c <HAL_UART_IRQHandler+0x150>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	2280      	movs	r2, #128	; 0x80
 8002a58:	0112      	lsls	r2, r2, #4
 8002a5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	228c      	movs	r2, #140	; 0x8c
 8002a60:	589b      	ldr	r3, [r3, r2]
 8002a62:	2220      	movs	r2, #32
 8002a64:	431a      	orrs	r2, r3
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	218c      	movs	r1, #140	; 0x8c
 8002a6a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	228c      	movs	r2, #140	; 0x8c
 8002a70:	589b      	ldr	r3, [r3, r2]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d100      	bne.n	8002a78 <HAL_UART_IRQHandler+0x15c>
 8002a76:	e17a      	b.n	8002d6e <HAL_UART_IRQHandler+0x452>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002a78:	69fb      	ldr	r3, [r7, #28]
 8002a7a:	2220      	movs	r2, #32
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	d011      	beq.n	8002aa4 <HAL_UART_IRQHandler+0x188>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002a80:	69bb      	ldr	r3, [r7, #24]
 8002a82:	2220      	movs	r2, #32
 8002a84:	4013      	ands	r3, r2
 8002a86:	d104      	bne.n	8002a92 <HAL_UART_IRQHandler+0x176>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002a88:	697a      	ldr	r2, [r7, #20]
 8002a8a:	2380      	movs	r3, #128	; 0x80
 8002a8c:	055b      	lsls	r3, r3, #21
 8002a8e:	4013      	ands	r3, r2
 8002a90:	d008      	beq.n	8002aa4 <HAL_UART_IRQHandler+0x188>
      {
        if (huart->RxISR != NULL)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d004      	beq.n	8002aa4 <HAL_UART_IRQHandler+0x188>
        {
          huart->RxISR(huart);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	0010      	movs	r0, r2
 8002aa2:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	228c      	movs	r2, #140	; 0x8c
 8002aa8:	589b      	ldr	r3, [r3, r2]
 8002aaa:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	2240      	movs	r2, #64	; 0x40
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	2b40      	cmp	r3, #64	; 0x40
 8002ab8:	d003      	beq.n	8002ac2 <HAL_UART_IRQHandler+0x1a6>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2228      	movs	r2, #40	; 0x28
 8002abe:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002ac0:	d033      	beq.n	8002b2a <HAL_UART_IRQHandler+0x20e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	0018      	movs	r0, r3
 8002ac6:	f000 fccd 	bl	8003464 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	2240      	movs	r2, #64	; 0x40
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	2b40      	cmp	r3, #64	; 0x40
 8002ad6:	d123      	bne.n	8002b20 <HAL_UART_IRQHandler+0x204>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	689a      	ldr	r2, [r3, #8]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	2140      	movs	r1, #64	; 0x40
 8002ae4:	438a      	bics	r2, r1
 8002ae6:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d012      	beq.n	8002b16 <HAL_UART_IRQHandler+0x1fa>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002af4:	4a50      	ldr	r2, [pc, #320]	; (8002c38 <HAL_UART_IRQHandler+0x31c>)
 8002af6:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002afc:	0018      	movs	r0, r3
 8002afe:	f7fe fc3b 	bl	8001378 <HAL_DMA_Abort_IT>
 8002b02:	1e03      	subs	r3, r0, #0
 8002b04:	d01a      	beq.n	8002b3c <HAL_UART_IRQHandler+0x220>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b10:	0018      	movs	r0, r3
 8002b12:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b14:	e012      	b.n	8002b3c <HAL_UART_IRQHandler+0x220>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	0018      	movs	r0, r3
 8002b1a:	f000 f947 	bl	8002dac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b1e:	e00d      	b.n	8002b3c <HAL_UART_IRQHandler+0x220>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	0018      	movs	r0, r3
 8002b24:	f000 f942 	bl	8002dac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b28:	e008      	b.n	8002b3c <HAL_UART_IRQHandler+0x220>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	0018      	movs	r0, r3
 8002b2e:	f000 f93d 	bl	8002dac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	228c      	movs	r2, #140	; 0x8c
 8002b36:	2100      	movs	r1, #0
 8002b38:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8002b3a:	e118      	b.n	8002d6e <HAL_UART_IRQHandler+0x452>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b3c:	46c0      	nop			; (mov r8, r8)
    return;
 8002b3e:	e116      	b.n	8002d6e <HAL_UART_IRQHandler+0x452>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d000      	beq.n	8002b4a <HAL_UART_IRQHandler+0x22e>
 8002b48:	e0bb      	b.n	8002cc2 <HAL_UART_IRQHandler+0x3a6>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	2210      	movs	r2, #16
 8002b4e:	4013      	ands	r3, r2
 8002b50:	d100      	bne.n	8002b54 <HAL_UART_IRQHandler+0x238>
 8002b52:	e0b6      	b.n	8002cc2 <HAL_UART_IRQHandler+0x3a6>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8002b54:	69bb      	ldr	r3, [r7, #24]
 8002b56:	2210      	movs	r2, #16
 8002b58:	4013      	ands	r3, r2
 8002b5a:	d100      	bne.n	8002b5e <HAL_UART_IRQHandler+0x242>
 8002b5c:	e0b1      	b.n	8002cc2 <HAL_UART_IRQHandler+0x3a6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	2210      	movs	r2, #16
 8002b64:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	2240      	movs	r2, #64	; 0x40
 8002b6e:	4013      	ands	r3, r2
 8002b70:	2b40      	cmp	r3, #64	; 0x40
 8002b72:	d165      	bne.n	8002c40 <HAL_UART_IRQHandler+0x324>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	685a      	ldr	r2, [r3, #4]
 8002b7c:	2108      	movs	r1, #8
 8002b7e:	187b      	adds	r3, r7, r1
 8002b80:	801a      	strh	r2, [r3, #0]
      if (  (nb_remaining_rx_data > 0U)
 8002b82:	187b      	adds	r3, r7, r1
 8002b84:	881b      	ldrh	r3, [r3, #0]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d100      	bne.n	8002b8c <HAL_UART_IRQHandler+0x270>
 8002b8a:	e0f2      	b.n	8002d72 <HAL_UART_IRQHandler+0x456>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	225c      	movs	r2, #92	; 0x5c
 8002b90:	5a9b      	ldrh	r3, [r3, r2]
 8002b92:	187a      	adds	r2, r7, r1
 8002b94:	8812      	ldrh	r2, [r2, #0]
 8002b96:	429a      	cmp	r2, r3
 8002b98:	d300      	bcc.n	8002b9c <HAL_UART_IRQHandler+0x280>
 8002b9a:	e0ea      	b.n	8002d72 <HAL_UART_IRQHandler+0x456>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	187a      	adds	r2, r7, r1
 8002ba0:	215e      	movs	r1, #94	; 0x5e
 8002ba2:	8812      	ldrh	r2, [r2, #0]
 8002ba4:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	2220      	movs	r2, #32
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	d12b      	bne.n	8002c0c <HAL_UART_IRQHandler+0x2f0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	491f      	ldr	r1, [pc, #124]	; (8002c3c <HAL_UART_IRQHandler+0x320>)
 8002bc0:	400a      	ands	r2, r1
 8002bc2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	689a      	ldr	r2, [r3, #8]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	2101      	movs	r1, #1
 8002bd0:	438a      	bics	r2, r1
 8002bd2:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	689a      	ldr	r2, [r3, #8]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	2140      	movs	r1, #64	; 0x40
 8002be0:	438a      	bics	r2, r1
 8002be2:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2288      	movs	r2, #136	; 0x88
 8002be8:	2120      	movs	r1, #32
 8002bea:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	2110      	movs	r1, #16
 8002bfe:	438a      	bics	r2, r1
 8002c00:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c06:	0018      	movs	r0, r3
 8002c08:	f7fe fb54 	bl	80012b4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	225c      	movs	r2, #92	; 0x5c
 8002c10:	5a9a      	ldrh	r2, [r3, r2]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	215e      	movs	r1, #94	; 0x5e
 8002c16:	5a5b      	ldrh	r3, [r3, r1]
 8002c18:	b29b      	uxth	r3, r3
 8002c1a:	1ad3      	subs	r3, r2, r3
 8002c1c:	b29a      	uxth	r2, r3
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	0011      	movs	r1, r2
 8002c22:	0018      	movs	r0, r3
 8002c24:	f000 f8ca 	bl	8002dbc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002c28:	e0a3      	b.n	8002d72 <HAL_UART_IRQHandler+0x456>
 8002c2a:	46c0      	nop			; (mov r8, r8)
 8002c2c:	0000080f 	.word	0x0000080f
 8002c30:	10000001 	.word	0x10000001
 8002c34:	04000120 	.word	0x04000120
 8002c38:	080035c1 	.word	0x080035c1
 8002c3c:	fffffeff 	.word	0xfffffeff
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	225c      	movs	r2, #92	; 0x5c
 8002c44:	5a99      	ldrh	r1, [r3, r2]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	225e      	movs	r2, #94	; 0x5e
 8002c4a:	5a9b      	ldrh	r3, [r3, r2]
 8002c4c:	b29a      	uxth	r2, r3
 8002c4e:	200a      	movs	r0, #10
 8002c50:	183b      	adds	r3, r7, r0
 8002c52:	1a8a      	subs	r2, r1, r2
 8002c54:	801a      	strh	r2, [r3, #0]
      if (  (huart->RxXferCount > 0U)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	225e      	movs	r2, #94	; 0x5e
 8002c5a:	5a9b      	ldrh	r3, [r3, r2]
 8002c5c:	b29b      	uxth	r3, r3
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d100      	bne.n	8002c64 <HAL_UART_IRQHandler+0x348>
 8002c62:	e088      	b.n	8002d76 <HAL_UART_IRQHandler+0x45a>
          &&(nb_rx_data > 0U) )
 8002c64:	183b      	adds	r3, r7, r0
 8002c66:	881b      	ldrh	r3, [r3, #0]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d100      	bne.n	8002c6e <HAL_UART_IRQHandler+0x352>
 8002c6c:	e083      	b.n	8002d76 <HAL_UART_IRQHandler+0x45a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4942      	ldr	r1, [pc, #264]	; (8002d84 <HAL_UART_IRQHandler+0x468>)
 8002c7a:	400a      	ands	r2, r1
 8002c7c:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	689a      	ldr	r2, [r3, #8]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	493f      	ldr	r1, [pc, #252]	; (8002d88 <HAL_UART_IRQHandler+0x46c>)
 8002c8a:	400a      	ands	r2, r1
 8002c8c:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2288      	movs	r2, #136	; 0x88
 8002c92:	2120      	movs	r1, #32
 8002c94:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	2110      	movs	r1, #16
 8002cae:	438a      	bics	r2, r1
 8002cb0:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002cb2:	183b      	adds	r3, r7, r0
 8002cb4:	881a      	ldrh	r2, [r3, #0]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	0011      	movs	r1, r2
 8002cba:	0018      	movs	r0, r3
 8002cbc:	f000 f87e 	bl	8002dbc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002cc0:	e059      	b.n	8002d76 <HAL_UART_IRQHandler+0x45a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002cc2:	69fa      	ldr	r2, [r7, #28]
 8002cc4:	2380      	movs	r3, #128	; 0x80
 8002cc6:	035b      	lsls	r3, r3, #13
 8002cc8:	4013      	ands	r3, r2
 8002cca:	d00e      	beq.n	8002cea <HAL_UART_IRQHandler+0x3ce>
 8002ccc:	697a      	ldr	r2, [r7, #20]
 8002cce:	2380      	movs	r3, #128	; 0x80
 8002cd0:	03db      	lsls	r3, r3, #15
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	d009      	beq.n	8002cea <HAL_UART_IRQHandler+0x3ce>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	2280      	movs	r2, #128	; 0x80
 8002cdc:	0352      	lsls	r2, r2, #13
 8002cde:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	0018      	movs	r0, r3
 8002ce4:	f000 fc9e 	bl	8003624 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002ce8:	e048      	b.n	8002d7c <HAL_UART_IRQHandler+0x460>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	2280      	movs	r2, #128	; 0x80
 8002cee:	4013      	ands	r3, r2
 8002cf0:	d012      	beq.n	8002d18 <HAL_UART_IRQHandler+0x3fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8002cf2:	69bb      	ldr	r3, [r7, #24]
 8002cf4:	2280      	movs	r2, #128	; 0x80
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	d104      	bne.n	8002d04 <HAL_UART_IRQHandler+0x3e8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8002cfa:	697a      	ldr	r2, [r7, #20]
 8002cfc:	2380      	movs	r3, #128	; 0x80
 8002cfe:	041b      	lsls	r3, r3, #16
 8002d00:	4013      	ands	r3, r2
 8002d02:	d009      	beq.n	8002d18 <HAL_UART_IRQHandler+0x3fc>
  {
    if (huart->TxISR != NULL)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d036      	beq.n	8002d7a <HAL_UART_IRQHandler+0x45e>
    {
      huart->TxISR(huart);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d10:	687a      	ldr	r2, [r7, #4]
 8002d12:	0010      	movs	r0, r2
 8002d14:	4798      	blx	r3
    }
    return;
 8002d16:	e030      	b.n	8002d7a <HAL_UART_IRQHandler+0x45e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002d18:	69fb      	ldr	r3, [r7, #28]
 8002d1a:	2240      	movs	r2, #64	; 0x40
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	d008      	beq.n	8002d32 <HAL_UART_IRQHandler+0x416>
 8002d20:	69bb      	ldr	r3, [r7, #24]
 8002d22:	2240      	movs	r2, #64	; 0x40
 8002d24:	4013      	ands	r3, r2
 8002d26:	d004      	beq.n	8002d32 <HAL_UART_IRQHandler+0x416>
  {
    UART_EndTransmit_IT(huart);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	0018      	movs	r0, r3
 8002d2c:	f000 fc5f 	bl	80035ee <UART_EndTransmit_IT>
    return;
 8002d30:	e024      	b.n	8002d7c <HAL_UART_IRQHandler+0x460>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8002d32:	69fa      	ldr	r2, [r7, #28]
 8002d34:	2380      	movs	r3, #128	; 0x80
 8002d36:	041b      	lsls	r3, r3, #16
 8002d38:	4013      	ands	r3, r2
 8002d3a:	d009      	beq.n	8002d50 <HAL_UART_IRQHandler+0x434>
 8002d3c:	69ba      	ldr	r2, [r7, #24]
 8002d3e:	2380      	movs	r3, #128	; 0x80
 8002d40:	05db      	lsls	r3, r3, #23
 8002d42:	4013      	ands	r3, r2
 8002d44:	d004      	beq.n	8002d50 <HAL_UART_IRQHandler+0x434>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	0018      	movs	r0, r3
 8002d4a:	f000 fc7b 	bl	8003644 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002d4e:	e015      	b.n	8002d7c <HAL_UART_IRQHandler+0x460>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8002d50:	69fa      	ldr	r2, [r7, #28]
 8002d52:	2380      	movs	r3, #128	; 0x80
 8002d54:	045b      	lsls	r3, r3, #17
 8002d56:	4013      	ands	r3, r2
 8002d58:	d010      	beq.n	8002d7c <HAL_UART_IRQHandler+0x460>
 8002d5a:	69bb      	ldr	r3, [r7, #24]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	da0d      	bge.n	8002d7c <HAL_UART_IRQHandler+0x460>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	0018      	movs	r0, r3
 8002d64:	f000 fc66 	bl	8003634 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002d68:	e008      	b.n	8002d7c <HAL_UART_IRQHandler+0x460>
      return;
 8002d6a:	46c0      	nop			; (mov r8, r8)
 8002d6c:	e006      	b.n	8002d7c <HAL_UART_IRQHandler+0x460>
    return;
 8002d6e:	46c0      	nop			; (mov r8, r8)
 8002d70:	e004      	b.n	8002d7c <HAL_UART_IRQHandler+0x460>
      return;
 8002d72:	46c0      	nop			; (mov r8, r8)
 8002d74:	e002      	b.n	8002d7c <HAL_UART_IRQHandler+0x460>
      return;
 8002d76:	46c0      	nop			; (mov r8, r8)
 8002d78:	e000      	b.n	8002d7c <HAL_UART_IRQHandler+0x460>
    return;
 8002d7a:	46c0      	nop			; (mov r8, r8)
  }
}
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	b008      	add	sp, #32
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	46c0      	nop			; (mov r8, r8)
 8002d84:	fffffedf 	.word	0xfffffedf
 8002d88:	effffffe 	.word	0xeffffffe

08002d8c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b082      	sub	sp, #8
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002d94:	46c0      	nop			; (mov r8, r8)
 8002d96:	46bd      	mov	sp, r7
 8002d98:	b002      	add	sp, #8
 8002d9a:	bd80      	pop	{r7, pc}

08002d9c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b082      	sub	sp, #8
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8002da4:	46c0      	nop			; (mov r8, r8)
 8002da6:	46bd      	mov	sp, r7
 8002da8:	b002      	add	sp, #8
 8002daa:	bd80      	pop	{r7, pc}

08002dac <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b082      	sub	sp, #8
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002db4:	46c0      	nop			; (mov r8, r8)
 8002db6:	46bd      	mov	sp, r7
 8002db8:	b002      	add	sp, #8
 8002dba:	bd80      	pop	{r7, pc}

08002dbc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b082      	sub	sp, #8
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
 8002dc4:	000a      	movs	r2, r1
 8002dc6:	1cbb      	adds	r3, r7, #2
 8002dc8:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002dca:	46c0      	nop			; (mov r8, r8)
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	b002      	add	sp, #8
 8002dd0:	bd80      	pop	{r7, pc}
	...

08002dd4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b088      	sub	sp, #32
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002ddc:	231a      	movs	r3, #26
 8002dde:	18fb      	adds	r3, r7, r3
 8002de0:	2200      	movs	r2, #0
 8002de2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	689a      	ldr	r2, [r3, #8]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	691b      	ldr	r3, [r3, #16]
 8002dec:	431a      	orrs	r2, r3
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	695b      	ldr	r3, [r3, #20]
 8002df2:	431a      	orrs	r2, r3
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	69db      	ldr	r3, [r3, #28]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	61fb      	str	r3, [r7, #28]
  tmpreg |= (uint32_t)huart->FifoMode;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e00:	69fa      	ldr	r2, [r7, #28]
 8002e02:	4313      	orrs	r3, r2
 8002e04:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4abc      	ldr	r2, [pc, #752]	; (8003100 <UART_SetConfig+0x32c>)
 8002e0e:	4013      	ands	r3, r2
 8002e10:	0019      	movs	r1, r3
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	69fa      	ldr	r2, [r7, #28]
 8002e18:	430a      	orrs	r2, r1
 8002e1a:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	4ab8      	ldr	r2, [pc, #736]	; (8003104 <UART_SetConfig+0x330>)
 8002e24:	4013      	ands	r3, r2
 8002e26:	0019      	movs	r1, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	68da      	ldr	r2, [r3, #12]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	430a      	orrs	r2, r1
 8002e32:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	699b      	ldr	r3, [r3, #24]
 8002e38:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6a1b      	ldr	r3, [r3, #32]
 8002e3e:	69fa      	ldr	r2, [r7, #28]
 8002e40:	4313      	orrs	r3, r2
 8002e42:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	4aaf      	ldr	r2, [pc, #700]	; (8003108 <UART_SetConfig+0x334>)
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	0019      	movs	r1, r3
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	69fa      	ldr	r2, [r7, #28]
 8002e56:	430a      	orrs	r2, r1
 8002e58:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e60:	220f      	movs	r2, #15
 8002e62:	4393      	bics	r3, r2
 8002e64:	0019      	movs	r1, r3
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	430a      	orrs	r2, r1
 8002e70:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4aa5      	ldr	r2, [pc, #660]	; (800310c <UART_SetConfig+0x338>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d127      	bne.n	8002ecc <UART_SetConfig+0xf8>
 8002e7c:	4ba4      	ldr	r3, [pc, #656]	; (8003110 <UART_SetConfig+0x33c>)
 8002e7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e80:	2203      	movs	r2, #3
 8002e82:	4013      	ands	r3, r2
 8002e84:	2b03      	cmp	r3, #3
 8002e86:	d017      	beq.n	8002eb8 <UART_SetConfig+0xe4>
 8002e88:	d81b      	bhi.n	8002ec2 <UART_SetConfig+0xee>
 8002e8a:	2b02      	cmp	r3, #2
 8002e8c:	d00a      	beq.n	8002ea4 <UART_SetConfig+0xd0>
 8002e8e:	d818      	bhi.n	8002ec2 <UART_SetConfig+0xee>
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d002      	beq.n	8002e9a <UART_SetConfig+0xc6>
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d00a      	beq.n	8002eae <UART_SetConfig+0xda>
 8002e98:	e013      	b.n	8002ec2 <UART_SetConfig+0xee>
 8002e9a:	231b      	movs	r3, #27
 8002e9c:	18fb      	adds	r3, r7, r3
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	701a      	strb	r2, [r3, #0]
 8002ea2:	e058      	b.n	8002f56 <UART_SetConfig+0x182>
 8002ea4:	231b      	movs	r3, #27
 8002ea6:	18fb      	adds	r3, r7, r3
 8002ea8:	2202      	movs	r2, #2
 8002eaa:	701a      	strb	r2, [r3, #0]
 8002eac:	e053      	b.n	8002f56 <UART_SetConfig+0x182>
 8002eae:	231b      	movs	r3, #27
 8002eb0:	18fb      	adds	r3, r7, r3
 8002eb2:	2204      	movs	r2, #4
 8002eb4:	701a      	strb	r2, [r3, #0]
 8002eb6:	e04e      	b.n	8002f56 <UART_SetConfig+0x182>
 8002eb8:	231b      	movs	r3, #27
 8002eba:	18fb      	adds	r3, r7, r3
 8002ebc:	2208      	movs	r2, #8
 8002ebe:	701a      	strb	r2, [r3, #0]
 8002ec0:	e049      	b.n	8002f56 <UART_SetConfig+0x182>
 8002ec2:	231b      	movs	r3, #27
 8002ec4:	18fb      	adds	r3, r7, r3
 8002ec6:	2210      	movs	r2, #16
 8002ec8:	701a      	strb	r2, [r3, #0]
 8002eca:	e044      	b.n	8002f56 <UART_SetConfig+0x182>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a90      	ldr	r2, [pc, #576]	; (8003114 <UART_SetConfig+0x340>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d127      	bne.n	8002f26 <UART_SetConfig+0x152>
 8002ed6:	4b8e      	ldr	r3, [pc, #568]	; (8003110 <UART_SetConfig+0x33c>)
 8002ed8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eda:	220c      	movs	r2, #12
 8002edc:	4013      	ands	r3, r2
 8002ede:	2b0c      	cmp	r3, #12
 8002ee0:	d017      	beq.n	8002f12 <UART_SetConfig+0x13e>
 8002ee2:	d81b      	bhi.n	8002f1c <UART_SetConfig+0x148>
 8002ee4:	2b08      	cmp	r3, #8
 8002ee6:	d00a      	beq.n	8002efe <UART_SetConfig+0x12a>
 8002ee8:	d818      	bhi.n	8002f1c <UART_SetConfig+0x148>
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d002      	beq.n	8002ef4 <UART_SetConfig+0x120>
 8002eee:	2b04      	cmp	r3, #4
 8002ef0:	d00a      	beq.n	8002f08 <UART_SetConfig+0x134>
 8002ef2:	e013      	b.n	8002f1c <UART_SetConfig+0x148>
 8002ef4:	231b      	movs	r3, #27
 8002ef6:	18fb      	adds	r3, r7, r3
 8002ef8:	2200      	movs	r2, #0
 8002efa:	701a      	strb	r2, [r3, #0]
 8002efc:	e02b      	b.n	8002f56 <UART_SetConfig+0x182>
 8002efe:	231b      	movs	r3, #27
 8002f00:	18fb      	adds	r3, r7, r3
 8002f02:	2202      	movs	r2, #2
 8002f04:	701a      	strb	r2, [r3, #0]
 8002f06:	e026      	b.n	8002f56 <UART_SetConfig+0x182>
 8002f08:	231b      	movs	r3, #27
 8002f0a:	18fb      	adds	r3, r7, r3
 8002f0c:	2204      	movs	r2, #4
 8002f0e:	701a      	strb	r2, [r3, #0]
 8002f10:	e021      	b.n	8002f56 <UART_SetConfig+0x182>
 8002f12:	231b      	movs	r3, #27
 8002f14:	18fb      	adds	r3, r7, r3
 8002f16:	2208      	movs	r2, #8
 8002f18:	701a      	strb	r2, [r3, #0]
 8002f1a:	e01c      	b.n	8002f56 <UART_SetConfig+0x182>
 8002f1c:	231b      	movs	r3, #27
 8002f1e:	18fb      	adds	r3, r7, r3
 8002f20:	2210      	movs	r2, #16
 8002f22:	701a      	strb	r2, [r3, #0]
 8002f24:	e017      	b.n	8002f56 <UART_SetConfig+0x182>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a7b      	ldr	r2, [pc, #492]	; (8003118 <UART_SetConfig+0x344>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d104      	bne.n	8002f3a <UART_SetConfig+0x166>
 8002f30:	231b      	movs	r3, #27
 8002f32:	18fb      	adds	r3, r7, r3
 8002f34:	2200      	movs	r2, #0
 8002f36:	701a      	strb	r2, [r3, #0]
 8002f38:	e00d      	b.n	8002f56 <UART_SetConfig+0x182>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a77      	ldr	r2, [pc, #476]	; (800311c <UART_SetConfig+0x348>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d104      	bne.n	8002f4e <UART_SetConfig+0x17a>
 8002f44:	231b      	movs	r3, #27
 8002f46:	18fb      	adds	r3, r7, r3
 8002f48:	2200      	movs	r2, #0
 8002f4a:	701a      	strb	r2, [r3, #0]
 8002f4c:	e003      	b.n	8002f56 <UART_SetConfig+0x182>
 8002f4e:	231b      	movs	r3, #27
 8002f50:	18fb      	adds	r3, r7, r3
 8002f52:	2210      	movs	r2, #16
 8002f54:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	69da      	ldr	r2, [r3, #28]
 8002f5a:	2380      	movs	r3, #128	; 0x80
 8002f5c:	021b      	lsls	r3, r3, #8
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d000      	beq.n	8002f64 <UART_SetConfig+0x190>
 8002f62:	e066      	b.n	8003032 <UART_SetConfig+0x25e>
  {
    switch (clocksource)
 8002f64:	231b      	movs	r3, #27
 8002f66:	18fb      	adds	r3, r7, r3
 8002f68:	781b      	ldrb	r3, [r3, #0]
 8002f6a:	2b08      	cmp	r3, #8
 8002f6c:	d015      	beq.n	8002f9a <UART_SetConfig+0x1c6>
 8002f6e:	dc18      	bgt.n	8002fa2 <UART_SetConfig+0x1ce>
 8002f70:	2b04      	cmp	r3, #4
 8002f72:	d00d      	beq.n	8002f90 <UART_SetConfig+0x1bc>
 8002f74:	dc15      	bgt.n	8002fa2 <UART_SetConfig+0x1ce>
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d002      	beq.n	8002f80 <UART_SetConfig+0x1ac>
 8002f7a:	2b02      	cmp	r3, #2
 8002f7c:	d005      	beq.n	8002f8a <UART_SetConfig+0x1b6>
 8002f7e:	e010      	b.n	8002fa2 <UART_SetConfig+0x1ce>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f80:	f7ff fa98 	bl	80024b4 <HAL_RCC_GetPCLK1Freq>
 8002f84:	0003      	movs	r3, r0
 8002f86:	617b      	str	r3, [r7, #20]
        break;
 8002f88:	e012      	b.n	8002fb0 <UART_SetConfig+0x1dc>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f8a:	4b65      	ldr	r3, [pc, #404]	; (8003120 <UART_SetConfig+0x34c>)
 8002f8c:	617b      	str	r3, [r7, #20]
        break;
 8002f8e:	e00f      	b.n	8002fb0 <UART_SetConfig+0x1dc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f90:	f7ff fa04 	bl	800239c <HAL_RCC_GetSysClockFreq>
 8002f94:	0003      	movs	r3, r0
 8002f96:	617b      	str	r3, [r7, #20]
        break;
 8002f98:	e00a      	b.n	8002fb0 <UART_SetConfig+0x1dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f9a:	2380      	movs	r3, #128	; 0x80
 8002f9c:	021b      	lsls	r3, r3, #8
 8002f9e:	617b      	str	r3, [r7, #20]
        break;
 8002fa0:	e006      	b.n	8002fb0 <UART_SetConfig+0x1dc>
      default:
        pclk = 0U;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002fa6:	231a      	movs	r3, #26
 8002fa8:	18fb      	adds	r3, r7, r3
 8002faa:	2201      	movs	r2, #1
 8002fac:	701a      	strb	r2, [r3, #0]
        break;
 8002fae:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d100      	bne.n	8002fb8 <UART_SetConfig+0x1e4>
 8002fb6:	e08e      	b.n	80030d6 <UART_SetConfig+0x302>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002fbc:	4b59      	ldr	r3, [pc, #356]	; (8003124 <UART_SetConfig+0x350>)
 8002fbe:	0052      	lsls	r2, r2, #1
 8002fc0:	5ad3      	ldrh	r3, [r2, r3]
 8002fc2:	0019      	movs	r1, r3
 8002fc4:	6978      	ldr	r0, [r7, #20]
 8002fc6:	f7fd f89b 	bl	8000100 <__udivsi3>
 8002fca:	0003      	movs	r3, r0
 8002fcc:	005a      	lsls	r2, r3, #1
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	085b      	lsrs	r3, r3, #1
 8002fd4:	18d2      	adds	r2, r2, r3
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	0019      	movs	r1, r3
 8002fdc:	0010      	movs	r0, r2
 8002fde:	f7fd f88f 	bl	8000100 <__udivsi3>
 8002fe2:	0003      	movs	r3, r0
 8002fe4:	b29b      	uxth	r3, r3
 8002fe6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	2b0f      	cmp	r3, #15
 8002fec:	d91c      	bls.n	8003028 <UART_SetConfig+0x254>
 8002fee:	693a      	ldr	r2, [r7, #16]
 8002ff0:	2380      	movs	r3, #128	; 0x80
 8002ff2:	025b      	lsls	r3, r3, #9
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d217      	bcs.n	8003028 <UART_SetConfig+0x254>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	b29a      	uxth	r2, r3
 8002ffc:	200e      	movs	r0, #14
 8002ffe:	183b      	adds	r3, r7, r0
 8003000:	210f      	movs	r1, #15
 8003002:	438a      	bics	r2, r1
 8003004:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	085b      	lsrs	r3, r3, #1
 800300a:	b29b      	uxth	r3, r3
 800300c:	2207      	movs	r2, #7
 800300e:	4013      	ands	r3, r2
 8003010:	b299      	uxth	r1, r3
 8003012:	183b      	adds	r3, r7, r0
 8003014:	183a      	adds	r2, r7, r0
 8003016:	8812      	ldrh	r2, [r2, #0]
 8003018:	430a      	orrs	r2, r1
 800301a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	183a      	adds	r2, r7, r0
 8003022:	8812      	ldrh	r2, [r2, #0]
 8003024:	60da      	str	r2, [r3, #12]
 8003026:	e056      	b.n	80030d6 <UART_SetConfig+0x302>
      }
      else
      {
        ret = HAL_ERROR;
 8003028:	231a      	movs	r3, #26
 800302a:	18fb      	adds	r3, r7, r3
 800302c:	2201      	movs	r2, #1
 800302e:	701a      	strb	r2, [r3, #0]
 8003030:	e051      	b.n	80030d6 <UART_SetConfig+0x302>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003032:	231b      	movs	r3, #27
 8003034:	18fb      	adds	r3, r7, r3
 8003036:	781b      	ldrb	r3, [r3, #0]
 8003038:	2b08      	cmp	r3, #8
 800303a:	d015      	beq.n	8003068 <UART_SetConfig+0x294>
 800303c:	dc18      	bgt.n	8003070 <UART_SetConfig+0x29c>
 800303e:	2b04      	cmp	r3, #4
 8003040:	d00d      	beq.n	800305e <UART_SetConfig+0x28a>
 8003042:	dc15      	bgt.n	8003070 <UART_SetConfig+0x29c>
 8003044:	2b00      	cmp	r3, #0
 8003046:	d002      	beq.n	800304e <UART_SetConfig+0x27a>
 8003048:	2b02      	cmp	r3, #2
 800304a:	d005      	beq.n	8003058 <UART_SetConfig+0x284>
 800304c:	e010      	b.n	8003070 <UART_SetConfig+0x29c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800304e:	f7ff fa31 	bl	80024b4 <HAL_RCC_GetPCLK1Freq>
 8003052:	0003      	movs	r3, r0
 8003054:	617b      	str	r3, [r7, #20]
        break;
 8003056:	e012      	b.n	800307e <UART_SetConfig+0x2aa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003058:	4b31      	ldr	r3, [pc, #196]	; (8003120 <UART_SetConfig+0x34c>)
 800305a:	617b      	str	r3, [r7, #20]
        break;
 800305c:	e00f      	b.n	800307e <UART_SetConfig+0x2aa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800305e:	f7ff f99d 	bl	800239c <HAL_RCC_GetSysClockFreq>
 8003062:	0003      	movs	r3, r0
 8003064:	617b      	str	r3, [r7, #20]
        break;
 8003066:	e00a      	b.n	800307e <UART_SetConfig+0x2aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003068:	2380      	movs	r3, #128	; 0x80
 800306a:	021b      	lsls	r3, r3, #8
 800306c:	617b      	str	r3, [r7, #20]
        break;
 800306e:	e006      	b.n	800307e <UART_SetConfig+0x2aa>
      default:
        pclk = 0U;
 8003070:	2300      	movs	r3, #0
 8003072:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003074:	231a      	movs	r3, #26
 8003076:	18fb      	adds	r3, r7, r3
 8003078:	2201      	movs	r2, #1
 800307a:	701a      	strb	r2, [r3, #0]
        break;
 800307c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d028      	beq.n	80030d6 <UART_SetConfig+0x302>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003088:	4b26      	ldr	r3, [pc, #152]	; (8003124 <UART_SetConfig+0x350>)
 800308a:	0052      	lsls	r2, r2, #1
 800308c:	5ad3      	ldrh	r3, [r2, r3]
 800308e:	0019      	movs	r1, r3
 8003090:	6978      	ldr	r0, [r7, #20]
 8003092:	f7fd f835 	bl	8000100 <__udivsi3>
 8003096:	0003      	movs	r3, r0
 8003098:	001a      	movs	r2, r3
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	085b      	lsrs	r3, r3, #1
 80030a0:	18d2      	adds	r2, r2, r3
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	0019      	movs	r1, r3
 80030a8:	0010      	movs	r0, r2
 80030aa:	f7fd f829 	bl	8000100 <__udivsi3>
 80030ae:	0003      	movs	r3, r0
 80030b0:	b29b      	uxth	r3, r3
 80030b2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	2b0f      	cmp	r3, #15
 80030b8:	d909      	bls.n	80030ce <UART_SetConfig+0x2fa>
 80030ba:	693a      	ldr	r2, [r7, #16]
 80030bc:	2380      	movs	r3, #128	; 0x80
 80030be:	025b      	lsls	r3, r3, #9
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d204      	bcs.n	80030ce <UART_SetConfig+0x2fa>
      {
        huart->Instance->BRR = usartdiv;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	693a      	ldr	r2, [r7, #16]
 80030ca:	60da      	str	r2, [r3, #12]
 80030cc:	e003      	b.n	80030d6 <UART_SetConfig+0x302>
      }
      else
      {
        ret = HAL_ERROR;
 80030ce:	231a      	movs	r3, #26
 80030d0:	18fb      	adds	r3, r7, r3
 80030d2:	2201      	movs	r2, #1
 80030d4:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	226a      	movs	r2, #106	; 0x6a
 80030da:	2101      	movs	r1, #1
 80030dc:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2268      	movs	r2, #104	; 0x68
 80030e2:	2101      	movs	r1, #1
 80030e4:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2200      	movs	r2, #0
 80030ea:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2200      	movs	r2, #0
 80030f0:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80030f2:	231a      	movs	r3, #26
 80030f4:	18fb      	adds	r3, r7, r3
 80030f6:	781b      	ldrb	r3, [r3, #0]
}
 80030f8:	0018      	movs	r0, r3
 80030fa:	46bd      	mov	sp, r7
 80030fc:	b008      	add	sp, #32
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	cfff69f3 	.word	0xcfff69f3
 8003104:	ffffcfff 	.word	0xffffcfff
 8003108:	11fff4ff 	.word	0x11fff4ff
 800310c:	40013800 	.word	0x40013800
 8003110:	40021000 	.word	0x40021000
 8003114:	40004400 	.word	0x40004400
 8003118:	40004800 	.word	0x40004800
 800311c:	40004c00 	.word	0x40004c00
 8003120:	00f42400 	.word	0x00f42400
 8003124:	080039c0 	.word	0x080039c0

08003128 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b082      	sub	sp, #8
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003134:	2201      	movs	r2, #1
 8003136:	4013      	ands	r3, r2
 8003138:	d00b      	beq.n	8003152 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	4a4a      	ldr	r2, [pc, #296]	; (800326c <UART_AdvFeatureConfig+0x144>)
 8003142:	4013      	ands	r3, r2
 8003144:	0019      	movs	r1, r3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	430a      	orrs	r2, r1
 8003150:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003156:	2202      	movs	r2, #2
 8003158:	4013      	ands	r3, r2
 800315a:	d00b      	beq.n	8003174 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	4a43      	ldr	r2, [pc, #268]	; (8003270 <UART_AdvFeatureConfig+0x148>)
 8003164:	4013      	ands	r3, r2
 8003166:	0019      	movs	r1, r3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	430a      	orrs	r2, r1
 8003172:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003178:	2204      	movs	r2, #4
 800317a:	4013      	ands	r3, r2
 800317c:	d00b      	beq.n	8003196 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	4a3b      	ldr	r2, [pc, #236]	; (8003274 <UART_AdvFeatureConfig+0x14c>)
 8003186:	4013      	ands	r3, r2
 8003188:	0019      	movs	r1, r3
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	430a      	orrs	r2, r1
 8003194:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800319a:	2208      	movs	r2, #8
 800319c:	4013      	ands	r3, r2
 800319e:	d00b      	beq.n	80031b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	4a34      	ldr	r2, [pc, #208]	; (8003278 <UART_AdvFeatureConfig+0x150>)
 80031a8:	4013      	ands	r3, r2
 80031aa:	0019      	movs	r1, r3
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	430a      	orrs	r2, r1
 80031b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031bc:	2210      	movs	r2, #16
 80031be:	4013      	ands	r3, r2
 80031c0:	d00b      	beq.n	80031da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	4a2c      	ldr	r2, [pc, #176]	; (800327c <UART_AdvFeatureConfig+0x154>)
 80031ca:	4013      	ands	r3, r2
 80031cc:	0019      	movs	r1, r3
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	430a      	orrs	r2, r1
 80031d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031de:	2220      	movs	r2, #32
 80031e0:	4013      	ands	r3, r2
 80031e2:	d00b      	beq.n	80031fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	4a25      	ldr	r2, [pc, #148]	; (8003280 <UART_AdvFeatureConfig+0x158>)
 80031ec:	4013      	ands	r3, r2
 80031ee:	0019      	movs	r1, r3
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	430a      	orrs	r2, r1
 80031fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003200:	2240      	movs	r2, #64	; 0x40
 8003202:	4013      	ands	r3, r2
 8003204:	d01d      	beq.n	8003242 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	4a1d      	ldr	r2, [pc, #116]	; (8003284 <UART_AdvFeatureConfig+0x15c>)
 800320e:	4013      	ands	r3, r2
 8003210:	0019      	movs	r1, r3
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	430a      	orrs	r2, r1
 800321c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003222:	2380      	movs	r3, #128	; 0x80
 8003224:	035b      	lsls	r3, r3, #13
 8003226:	429a      	cmp	r2, r3
 8003228:	d10b      	bne.n	8003242 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	4a15      	ldr	r2, [pc, #84]	; (8003288 <UART_AdvFeatureConfig+0x160>)
 8003232:	4013      	ands	r3, r2
 8003234:	0019      	movs	r1, r3
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	430a      	orrs	r2, r1
 8003240:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003246:	2280      	movs	r2, #128	; 0x80
 8003248:	4013      	ands	r3, r2
 800324a:	d00b      	beq.n	8003264 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	4a0e      	ldr	r2, [pc, #56]	; (800328c <UART_AdvFeatureConfig+0x164>)
 8003254:	4013      	ands	r3, r2
 8003256:	0019      	movs	r1, r3
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	430a      	orrs	r2, r1
 8003262:	605a      	str	r2, [r3, #4]
  }
}
 8003264:	46c0      	nop			; (mov r8, r8)
 8003266:	46bd      	mov	sp, r7
 8003268:	b002      	add	sp, #8
 800326a:	bd80      	pop	{r7, pc}
 800326c:	fffdffff 	.word	0xfffdffff
 8003270:	fffeffff 	.word	0xfffeffff
 8003274:	fffbffff 	.word	0xfffbffff
 8003278:	ffff7fff 	.word	0xffff7fff
 800327c:	ffffefff 	.word	0xffffefff
 8003280:	ffffdfff 	.word	0xffffdfff
 8003284:	ffefffff 	.word	0xffefffff
 8003288:	ff9fffff 	.word	0xff9fffff
 800328c:	fff7ffff 	.word	0xfff7ffff

08003290 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b086      	sub	sp, #24
 8003294:	af02      	add	r7, sp, #8
 8003296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	228c      	movs	r2, #140	; 0x8c
 800329c:	2100      	movs	r1, #0
 800329e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80032a0:	f7fd fdde 	bl	8000e60 <HAL_GetTick>
 80032a4:	0003      	movs	r3, r0
 80032a6:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	2208      	movs	r2, #8
 80032b0:	4013      	ands	r3, r2
 80032b2:	2b08      	cmp	r3, #8
 80032b4:	d10c      	bne.n	80032d0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2280      	movs	r2, #128	; 0x80
 80032ba:	0391      	lsls	r1, r2, #14
 80032bc:	6878      	ldr	r0, [r7, #4]
 80032be:	4a18      	ldr	r2, [pc, #96]	; (8003320 <UART_CheckIdleState+0x90>)
 80032c0:	9200      	str	r2, [sp, #0]
 80032c2:	2200      	movs	r2, #0
 80032c4:	f000 f82e 	bl	8003324 <UART_WaitOnFlagUntilTimeout>
 80032c8:	1e03      	subs	r3, r0, #0
 80032ca:	d001      	beq.n	80032d0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80032cc:	2303      	movs	r3, #3
 80032ce:	e023      	b.n	8003318 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	2204      	movs	r2, #4
 80032d8:	4013      	ands	r3, r2
 80032da:	2b04      	cmp	r3, #4
 80032dc:	d10c      	bne.n	80032f8 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2280      	movs	r2, #128	; 0x80
 80032e2:	03d1      	lsls	r1, r2, #15
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	4a0e      	ldr	r2, [pc, #56]	; (8003320 <UART_CheckIdleState+0x90>)
 80032e8:	9200      	str	r2, [sp, #0]
 80032ea:	2200      	movs	r2, #0
 80032ec:	f000 f81a 	bl	8003324 <UART_WaitOnFlagUntilTimeout>
 80032f0:	1e03      	subs	r3, r0, #0
 80032f2:	d001      	beq.n	80032f8 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80032f4:	2303      	movs	r3, #3
 80032f6:	e00f      	b.n	8003318 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2284      	movs	r2, #132	; 0x84
 80032fc:	2120      	movs	r1, #32
 80032fe:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2288      	movs	r2, #136	; 0x88
 8003304:	2120      	movs	r1, #32
 8003306:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2280      	movs	r2, #128	; 0x80
 8003312:	2100      	movs	r1, #0
 8003314:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003316:	2300      	movs	r3, #0
}
 8003318:	0018      	movs	r0, r3
 800331a:	46bd      	mov	sp, r7
 800331c:	b004      	add	sp, #16
 800331e:	bd80      	pop	{r7, pc}
 8003320:	01ffffff 	.word	0x01ffffff

08003324 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b084      	sub	sp, #16
 8003328:	af00      	add	r7, sp, #0
 800332a:	60f8      	str	r0, [r7, #12]
 800332c:	60b9      	str	r1, [r7, #8]
 800332e:	603b      	str	r3, [r7, #0]
 8003330:	1dfb      	adds	r3, r7, #7
 8003332:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003334:	e062      	b.n	80033fc <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003336:	69bb      	ldr	r3, [r7, #24]
 8003338:	3301      	adds	r3, #1
 800333a:	d05f      	beq.n	80033fc <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800333c:	f7fd fd90 	bl	8000e60 <HAL_GetTick>
 8003340:	0002      	movs	r2, r0
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	69ba      	ldr	r2, [r7, #24]
 8003348:	429a      	cmp	r2, r3
 800334a:	d302      	bcc.n	8003352 <UART_WaitOnFlagUntilTimeout+0x2e>
 800334c:	69bb      	ldr	r3, [r7, #24]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d11d      	bne.n	800338e <UART_WaitOnFlagUntilTimeout+0x6a>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4931      	ldr	r1, [pc, #196]	; (8003424 <UART_WaitOnFlagUntilTimeout+0x100>)
 800335e:	400a      	ands	r2, r1
 8003360:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	689a      	ldr	r2, [r3, #8]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	2101      	movs	r1, #1
 800336e:	438a      	bics	r2, r1
 8003370:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2284      	movs	r2, #132	; 0x84
 8003376:	2120      	movs	r1, #32
 8003378:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2288      	movs	r2, #136	; 0x88
 800337e:	2120      	movs	r1, #32
 8003380:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2280      	movs	r2, #128	; 0x80
 8003386:	2100      	movs	r1, #0
 8003388:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800338a:	2303      	movs	r3, #3
 800338c:	e046      	b.n	800341c <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	2204      	movs	r2, #4
 8003396:	4013      	ands	r3, r2
 8003398:	d030      	beq.n	80033fc <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	69da      	ldr	r2, [r3, #28]
 80033a0:	2380      	movs	r3, #128	; 0x80
 80033a2:	011b      	lsls	r3, r3, #4
 80033a4:	401a      	ands	r2, r3
 80033a6:	2380      	movs	r3, #128	; 0x80
 80033a8:	011b      	lsls	r3, r3, #4
 80033aa:	429a      	cmp	r2, r3
 80033ac:	d126      	bne.n	80033fc <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	2280      	movs	r2, #128	; 0x80
 80033b4:	0112      	lsls	r2, r2, #4
 80033b6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4918      	ldr	r1, [pc, #96]	; (8003424 <UART_WaitOnFlagUntilTimeout+0x100>)
 80033c4:	400a      	ands	r2, r1
 80033c6:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	689a      	ldr	r2, [r3, #8]
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	2101      	movs	r1, #1
 80033d4:	438a      	bics	r2, r1
 80033d6:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2284      	movs	r2, #132	; 0x84
 80033dc:	2120      	movs	r1, #32
 80033de:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2288      	movs	r2, #136	; 0x88
 80033e4:	2120      	movs	r1, #32
 80033e6:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	228c      	movs	r2, #140	; 0x8c
 80033ec:	2120      	movs	r1, #32
 80033ee:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2280      	movs	r2, #128	; 0x80
 80033f4:	2100      	movs	r1, #0
 80033f6:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80033f8:	2303      	movs	r3, #3
 80033fa:	e00f      	b.n	800341c <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	69db      	ldr	r3, [r3, #28]
 8003402:	68ba      	ldr	r2, [r7, #8]
 8003404:	4013      	ands	r3, r2
 8003406:	68ba      	ldr	r2, [r7, #8]
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	425a      	negs	r2, r3
 800340c:	4153      	adcs	r3, r2
 800340e:	b2db      	uxtb	r3, r3
 8003410:	001a      	movs	r2, r3
 8003412:	1dfb      	adds	r3, r7, #7
 8003414:	781b      	ldrb	r3, [r3, #0]
 8003416:	429a      	cmp	r2, r3
 8003418:	d08d      	beq.n	8003336 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800341a:	2300      	movs	r3, #0
}
 800341c:	0018      	movs	r0, r3
 800341e:	46bd      	mov	sp, r7
 8003420:	b004      	add	sp, #16
 8003422:	bd80      	pop	{r7, pc}
 8003424:	fffffe5f 	.word	0xfffffe5f

08003428 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b082      	sub	sp, #8
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	21c0      	movs	r1, #192	; 0xc0
 800343c:	438a      	bics	r2, r1
 800343e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	689a      	ldr	r2, [r3, #8]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4905      	ldr	r1, [pc, #20]	; (8003460 <UART_EndTxTransfer+0x38>)
 800344c:	400a      	ands	r2, r1
 800344e:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2284      	movs	r2, #132	; 0x84
 8003454:	2120      	movs	r1, #32
 8003456:	5099      	str	r1, [r3, r2]
}
 8003458:	46c0      	nop			; (mov r8, r8)
 800345a:	46bd      	mov	sp, r7
 800345c:	b002      	add	sp, #8
 800345e:	bd80      	pop	{r7, pc}
 8003460:	ff7fffff 	.word	0xff7fffff

08003464 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b082      	sub	sp, #8
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4912      	ldr	r1, [pc, #72]	; (80034c0 <UART_EndRxTransfer+0x5c>)
 8003478:	400a      	ands	r2, r1
 800347a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	689a      	ldr	r2, [r3, #8]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	490f      	ldr	r1, [pc, #60]	; (80034c4 <UART_EndRxTransfer+0x60>)
 8003488:	400a      	ands	r2, r1
 800348a:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003490:	2b01      	cmp	r3, #1
 8003492:	d107      	bne.n	80034a4 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	2110      	movs	r1, #16
 80034a0:	438a      	bics	r2, r1
 80034a2:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2288      	movs	r2, #136	; 0x88
 80034a8:	2120      	movs	r1, #32
 80034aa:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2200      	movs	r2, #0
 80034b0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2200      	movs	r2, #0
 80034b6:	671a      	str	r2, [r3, #112]	; 0x70
}
 80034b8:	46c0      	nop			; (mov r8, r8)
 80034ba:	46bd      	mov	sp, r7
 80034bc:	b002      	add	sp, #8
 80034be:	bd80      	pop	{r7, pc}
 80034c0:	fffffedf 	.word	0xfffffedf
 80034c4:	effffffe 	.word	0xeffffffe

080034c8 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b084      	sub	sp, #16
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034d4:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	2220      	movs	r2, #32
 80034de:	4013      	ands	r3, r2
 80034e0:	d114      	bne.n	800350c <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0U;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2256      	movs	r2, #86	; 0x56
 80034e6:	2100      	movs	r1, #0
 80034e8:	5299      	strh	r1, [r3, r2]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	689a      	ldr	r2, [r3, #8]
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	2180      	movs	r1, #128	; 0x80
 80034f6:	438a      	bics	r2, r1
 80034f8:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	2140      	movs	r1, #64	; 0x40
 8003506:	430a      	orrs	r2, r1
 8003508:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800350a:	e003      	b.n	8003514 <UART_DMATransmitCplt+0x4c>
    HAL_UART_TxCpltCallback(huart);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	0018      	movs	r0, r3
 8003510:	f7ff fc3c 	bl	8002d8c <HAL_UART_TxCpltCallback>
}
 8003514:	46c0      	nop			; (mov r8, r8)
 8003516:	46bd      	mov	sp, r7
 8003518:	b004      	add	sp, #16
 800351a:	bd80      	pop	{r7, pc}

0800351c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b084      	sub	sp, #16
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003528:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	0018      	movs	r0, r3
 800352e:	f7ff fc35 	bl	8002d9c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003532:	46c0      	nop			; (mov r8, r8)
 8003534:	46bd      	mov	sp, r7
 8003536:	b004      	add	sp, #16
 8003538:	bd80      	pop	{r7, pc}

0800353a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800353a:	b580      	push	{r7, lr}
 800353c:	b086      	sub	sp, #24
 800353e:	af00      	add	r7, sp, #0
 8003540:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003546:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	2284      	movs	r2, #132	; 0x84
 800354c:	589b      	ldr	r3, [r3, r2]
 800354e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	2288      	movs	r2, #136	; 0x88
 8003554:	589b      	ldr	r3, [r3, r2]
 8003556:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	2280      	movs	r2, #128	; 0x80
 8003560:	4013      	ands	r3, r2
 8003562:	2b80      	cmp	r3, #128	; 0x80
 8003564:	d10a      	bne.n	800357c <UART_DMAError+0x42>
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	2b21      	cmp	r3, #33	; 0x21
 800356a:	d107      	bne.n	800357c <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	2256      	movs	r2, #86	; 0x56
 8003570:	2100      	movs	r1, #0
 8003572:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	0018      	movs	r0, r3
 8003578:	f7ff ff56 	bl	8003428 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	2240      	movs	r2, #64	; 0x40
 8003584:	4013      	ands	r3, r2
 8003586:	2b40      	cmp	r3, #64	; 0x40
 8003588:	d10a      	bne.n	80035a0 <UART_DMAError+0x66>
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2b22      	cmp	r3, #34	; 0x22
 800358e:	d107      	bne.n	80035a0 <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	225e      	movs	r2, #94	; 0x5e
 8003594:	2100      	movs	r1, #0
 8003596:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	0018      	movs	r0, r3
 800359c:	f7ff ff62 	bl	8003464 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	228c      	movs	r2, #140	; 0x8c
 80035a4:	589b      	ldr	r3, [r3, r2]
 80035a6:	2210      	movs	r2, #16
 80035a8:	431a      	orrs	r2, r3
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	218c      	movs	r1, #140	; 0x8c
 80035ae:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	0018      	movs	r0, r3
 80035b4:	f7ff fbfa 	bl	8002dac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80035b8:	46c0      	nop			; (mov r8, r8)
 80035ba:	46bd      	mov	sp, r7
 80035bc:	b006      	add	sp, #24
 80035be:	bd80      	pop	{r7, pc}

080035c0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b084      	sub	sp, #16
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035cc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	225e      	movs	r2, #94	; 0x5e
 80035d2:	2100      	movs	r1, #0
 80035d4:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2256      	movs	r2, #86	; 0x56
 80035da:	2100      	movs	r1, #0
 80035dc:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	0018      	movs	r0, r3
 80035e2:	f7ff fbe3 	bl	8002dac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80035e6:	46c0      	nop			; (mov r8, r8)
 80035e8:	46bd      	mov	sp, r7
 80035ea:	b004      	add	sp, #16
 80035ec:	bd80      	pop	{r7, pc}

080035ee <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80035ee:	b580      	push	{r7, lr}
 80035f0:	b082      	sub	sp, #8
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	2140      	movs	r1, #64	; 0x40
 8003602:	438a      	bics	r2, r1
 8003604:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2284      	movs	r2, #132	; 0x84
 800360a:	2120      	movs	r1, #32
 800360c:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2200      	movs	r2, #0
 8003612:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	0018      	movs	r0, r3
 8003618:	f7ff fbb8 	bl	8002d8c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800361c:	46c0      	nop			; (mov r8, r8)
 800361e:	46bd      	mov	sp, r7
 8003620:	b002      	add	sp, #8
 8003622:	bd80      	pop	{r7, pc}

08003624 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b082      	sub	sp, #8
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800362c:	46c0      	nop			; (mov r8, r8)
 800362e:	46bd      	mov	sp, r7
 8003630:	b002      	add	sp, #8
 8003632:	bd80      	pop	{r7, pc}

08003634 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b082      	sub	sp, #8
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800363c:	46c0      	nop			; (mov r8, r8)
 800363e:	46bd      	mov	sp, r7
 8003640:	b002      	add	sp, #8
 8003642:	bd80      	pop	{r7, pc}

08003644 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b082      	sub	sp, #8
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800364c:	46c0      	nop			; (mov r8, r8)
 800364e:	46bd      	mov	sp, r7
 8003650:	b002      	add	sp, #8
 8003652:	bd80      	pop	{r7, pc}

08003654 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b084      	sub	sp, #16
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2280      	movs	r2, #128	; 0x80
 8003660:	5c9b      	ldrb	r3, [r3, r2]
 8003662:	2b01      	cmp	r3, #1
 8003664:	d101      	bne.n	800366a <HAL_UARTEx_DisableFifoMode+0x16>
 8003666:	2302      	movs	r3, #2
 8003668:	e027      	b.n	80036ba <HAL_UARTEx_DisableFifoMode+0x66>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2280      	movs	r2, #128	; 0x80
 800366e:	2101      	movs	r1, #1
 8003670:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2284      	movs	r2, #132	; 0x84
 8003676:	2124      	movs	r1, #36	; 0x24
 8003678:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	2101      	movs	r1, #1
 800368e:	438a      	bics	r2, r1
 8003690:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	4a0b      	ldr	r2, [pc, #44]	; (80036c4 <HAL_UARTEx_DisableFifoMode+0x70>)
 8003696:	4013      	ands	r3, r2
 8003698:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2200      	movs	r2, #0
 800369e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	68fa      	ldr	r2, [r7, #12]
 80036a6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2284      	movs	r2, #132	; 0x84
 80036ac:	2120      	movs	r1, #32
 80036ae:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2280      	movs	r2, #128	; 0x80
 80036b4:	2100      	movs	r1, #0
 80036b6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80036b8:	2300      	movs	r3, #0
}
 80036ba:	0018      	movs	r0, r3
 80036bc:	46bd      	mov	sp, r7
 80036be:	b004      	add	sp, #16
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	46c0      	nop			; (mov r8, r8)
 80036c4:	dfffffff 	.word	0xdfffffff

080036c8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b084      	sub	sp, #16
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
 80036d0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2280      	movs	r2, #128	; 0x80
 80036d6:	5c9b      	ldrb	r3, [r3, r2]
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d101      	bne.n	80036e0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80036dc:	2302      	movs	r3, #2
 80036de:	e02e      	b.n	800373e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2280      	movs	r2, #128	; 0x80
 80036e4:	2101      	movs	r1, #1
 80036e6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2284      	movs	r2, #132	; 0x84
 80036ec:	2124      	movs	r1, #36	; 0x24
 80036ee:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	2101      	movs	r1, #1
 8003704:	438a      	bics	r2, r1
 8003706:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	00db      	lsls	r3, r3, #3
 8003710:	08d9      	lsrs	r1, r3, #3
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	683a      	ldr	r2, [r7, #0]
 8003718:	430a      	orrs	r2, r1
 800371a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	0018      	movs	r0, r3
 8003720:	f000 f854 	bl	80037cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	68fa      	ldr	r2, [r7, #12]
 800372a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2284      	movs	r2, #132	; 0x84
 8003730:	2120      	movs	r1, #32
 8003732:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2280      	movs	r2, #128	; 0x80
 8003738:	2100      	movs	r1, #0
 800373a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800373c:	2300      	movs	r3, #0
}
 800373e:	0018      	movs	r0, r3
 8003740:	46bd      	mov	sp, r7
 8003742:	b004      	add	sp, #16
 8003744:	bd80      	pop	{r7, pc}
	...

08003748 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b084      	sub	sp, #16
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
 8003750:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2280      	movs	r2, #128	; 0x80
 8003756:	5c9b      	ldrb	r3, [r3, r2]
 8003758:	2b01      	cmp	r3, #1
 800375a:	d101      	bne.n	8003760 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800375c:	2302      	movs	r3, #2
 800375e:	e02f      	b.n	80037c0 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2280      	movs	r2, #128	; 0x80
 8003764:	2101      	movs	r1, #1
 8003766:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2284      	movs	r2, #132	; 0x84
 800376c:	2124      	movs	r1, #36	; 0x24
 800376e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	2101      	movs	r1, #1
 8003784:	438a      	bics	r2, r1
 8003786:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	4a0e      	ldr	r2, [pc, #56]	; (80037c8 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8003790:	4013      	ands	r3, r2
 8003792:	0019      	movs	r1, r3
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	683a      	ldr	r2, [r7, #0]
 800379a:	430a      	orrs	r2, r1
 800379c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	0018      	movs	r0, r3
 80037a2:	f000 f813 	bl	80037cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	68fa      	ldr	r2, [r7, #12]
 80037ac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2284      	movs	r2, #132	; 0x84
 80037b2:	2120      	movs	r1, #32
 80037b4:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2280      	movs	r2, #128	; 0x80
 80037ba:	2100      	movs	r1, #0
 80037bc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80037be:	2300      	movs	r3, #0
}
 80037c0:	0018      	movs	r0, r3
 80037c2:	46bd      	mov	sp, r7
 80037c4:	b004      	add	sp, #16
 80037c6:	bd80      	pop	{r7, pc}
 80037c8:	f1ffffff 	.word	0xf1ffffff

080037cc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80037cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037ce:	b089      	sub	sp, #36	; 0x24
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80037d4:	2314      	movs	r3, #20
 80037d6:	18fb      	adds	r3, r7, r3
 80037d8:	4a2f      	ldr	r2, [pc, #188]	; (8003898 <UARTEx_SetNbDataToProcess+0xcc>)
 80037da:	ca03      	ldmia	r2!, {r0, r1}
 80037dc:	c303      	stmia	r3!, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80037de:	230c      	movs	r3, #12
 80037e0:	18fb      	adds	r3, r7, r3
 80037e2:	4a2e      	ldr	r2, [pc, #184]	; (800389c <UARTEx_SetNbDataToProcess+0xd0>)
 80037e4:	ca03      	ldmia	r2!, {r0, r1}
 80037e6:	c303      	stmia	r3!, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d108      	bne.n	8003802 <UARTEx_SetNbDataToProcess+0x36>
  {
    huart->NbTxDataToProcess = 1U;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	226a      	movs	r2, #106	; 0x6a
 80037f4:	2101      	movs	r1, #1
 80037f6:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2268      	movs	r2, #104	; 0x68
 80037fc:	2101      	movs	r1, #1
 80037fe:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003800:	e046      	b.n	8003890 <UARTEx_SetNbDataToProcess+0xc4>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003802:	261f      	movs	r6, #31
 8003804:	19bb      	adds	r3, r7, r6
 8003806:	2208      	movs	r2, #8
 8003808:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800380a:	201e      	movs	r0, #30
 800380c:	183b      	adds	r3, r7, r0
 800380e:	2208      	movs	r2, #8
 8003810:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	0e5b      	lsrs	r3, r3, #25
 800381a:	b2da      	uxtb	r2, r3
 800381c:	241d      	movs	r4, #29
 800381e:	193b      	adds	r3, r7, r4
 8003820:	2107      	movs	r1, #7
 8003822:	400a      	ands	r2, r1
 8003824:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	0f5b      	lsrs	r3, r3, #29
 800382e:	b2da      	uxtb	r2, r3
 8003830:	251c      	movs	r5, #28
 8003832:	197b      	adds	r3, r7, r5
 8003834:	2107      	movs	r1, #7
 8003836:	400a      	ands	r2, r1
 8003838:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800383a:	183b      	adds	r3, r7, r0
 800383c:	781b      	ldrb	r3, [r3, #0]
 800383e:	197a      	adds	r2, r7, r5
 8003840:	7812      	ldrb	r2, [r2, #0]
 8003842:	2114      	movs	r1, #20
 8003844:	1879      	adds	r1, r7, r1
 8003846:	5c8a      	ldrb	r2, [r1, r2]
 8003848:	435a      	muls	r2, r3
 800384a:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800384c:	197b      	adds	r3, r7, r5
 800384e:	781b      	ldrb	r3, [r3, #0]
 8003850:	250c      	movs	r5, #12
 8003852:	197a      	adds	r2, r7, r5
 8003854:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003856:	0019      	movs	r1, r3
 8003858:	f7fc fcdc 	bl	8000214 <__divsi3>
 800385c:	0003      	movs	r3, r0
 800385e:	b299      	uxth	r1, r3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	226a      	movs	r2, #106	; 0x6a
 8003864:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003866:	19bb      	adds	r3, r7, r6
 8003868:	781b      	ldrb	r3, [r3, #0]
 800386a:	193a      	adds	r2, r7, r4
 800386c:	7812      	ldrb	r2, [r2, #0]
 800386e:	2114      	movs	r1, #20
 8003870:	1879      	adds	r1, r7, r1
 8003872:	5c8a      	ldrb	r2, [r1, r2]
 8003874:	435a      	muls	r2, r3
 8003876:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8003878:	193b      	adds	r3, r7, r4
 800387a:	781b      	ldrb	r3, [r3, #0]
 800387c:	197a      	adds	r2, r7, r5
 800387e:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003880:	0019      	movs	r1, r3
 8003882:	f7fc fcc7 	bl	8000214 <__divsi3>
 8003886:	0003      	movs	r3, r0
 8003888:	b299      	uxth	r1, r3
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2268      	movs	r2, #104	; 0x68
 800388e:	5299      	strh	r1, [r3, r2]
}
 8003890:	46c0      	nop			; (mov r8, r8)
 8003892:	46bd      	mov	sp, r7
 8003894:	b009      	add	sp, #36	; 0x24
 8003896:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003898:	08003910 	.word	0x08003910
 800389c:	08003918 	.word	0x08003918

080038a0 <__libc_init_array>:
 80038a0:	b570      	push	{r4, r5, r6, lr}
 80038a2:	2600      	movs	r6, #0
 80038a4:	4d0c      	ldr	r5, [pc, #48]	; (80038d8 <__libc_init_array+0x38>)
 80038a6:	4c0d      	ldr	r4, [pc, #52]	; (80038dc <__libc_init_array+0x3c>)
 80038a8:	1b64      	subs	r4, r4, r5
 80038aa:	10a4      	asrs	r4, r4, #2
 80038ac:	42a6      	cmp	r6, r4
 80038ae:	d109      	bne.n	80038c4 <__libc_init_array+0x24>
 80038b0:	2600      	movs	r6, #0
 80038b2:	f000 f821 	bl	80038f8 <_init>
 80038b6:	4d0a      	ldr	r5, [pc, #40]	; (80038e0 <__libc_init_array+0x40>)
 80038b8:	4c0a      	ldr	r4, [pc, #40]	; (80038e4 <__libc_init_array+0x44>)
 80038ba:	1b64      	subs	r4, r4, r5
 80038bc:	10a4      	asrs	r4, r4, #2
 80038be:	42a6      	cmp	r6, r4
 80038c0:	d105      	bne.n	80038ce <__libc_init_array+0x2e>
 80038c2:	bd70      	pop	{r4, r5, r6, pc}
 80038c4:	00b3      	lsls	r3, r6, #2
 80038c6:	58eb      	ldr	r3, [r5, r3]
 80038c8:	4798      	blx	r3
 80038ca:	3601      	adds	r6, #1
 80038cc:	e7ee      	b.n	80038ac <__libc_init_array+0xc>
 80038ce:	00b3      	lsls	r3, r6, #2
 80038d0:	58eb      	ldr	r3, [r5, r3]
 80038d2:	4798      	blx	r3
 80038d4:	3601      	adds	r6, #1
 80038d6:	e7f2      	b.n	80038be <__libc_init_array+0x1e>
 80038d8:	080039d8 	.word	0x080039d8
 80038dc:	080039d8 	.word	0x080039d8
 80038e0:	080039d8 	.word	0x080039d8
 80038e4:	080039dc 	.word	0x080039dc

080038e8 <memset>:
 80038e8:	0003      	movs	r3, r0
 80038ea:	1882      	adds	r2, r0, r2
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d100      	bne.n	80038f2 <memset+0xa>
 80038f0:	4770      	bx	lr
 80038f2:	7019      	strb	r1, [r3, #0]
 80038f4:	3301      	adds	r3, #1
 80038f6:	e7f9      	b.n	80038ec <memset+0x4>

080038f8 <_init>:
 80038f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038fa:	46c0      	nop			; (mov r8, r8)
 80038fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038fe:	bc08      	pop	{r3}
 8003900:	469e      	mov	lr, r3
 8003902:	4770      	bx	lr

08003904 <_fini>:
 8003904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003906:	46c0      	nop			; (mov r8, r8)
 8003908:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800390a:	bc08      	pop	{r3}
 800390c:	469e      	mov	lr, r3
 800390e:	4770      	bx	lr
